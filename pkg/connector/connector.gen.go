// Package connector provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package connector

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"gopkg.in/yaml.v2"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
)

const (
	BasicAuthScopes  = "BasicAuth.Scopes"
	BearerAuthScopes = "BearerAuth.Scopes"
	OpenIdScopes     = "OpenId.Scopes"
)

// Defines values for ACLAction.
const (
	Allow    ACLAction = "allow"
	Disallow ACLAction = "disallow"
)

// Defines values for APIImportSource.
const (
	APIImportSourceEventAPIProduct APIImportSource = "EventAPIProduct"
)

// Defines values for APIInfoSource.
const (
	APIInfoSourceEventAPIProduct APIInfoSource = "EventAPIProduct"
	APIInfoSourceEventPortalLink APIInfoSource = "EventPortalLink"
	APIInfoSourceUpload          APIInfoSource = "Upload"
)

// Defines values for APIKeyAuthenticationLocation.
const (
	APIKeyAuthenticationLocationHeader APIKeyAuthenticationLocation = "header"
	APIKeyAuthenticationLocationQuery  APIKeyAuthenticationLocation = "query"
)

// Defines values for APIParameterType.
const (
	Boolean APIParameterType = "boolean"
	Integer APIParameterType = "integer"
	Number  APIParameterType = "number"
	String  APIParameterType = "string"
)

// Defines values for APIProductApprovalType.
const (
	APIProductApprovalTypeAuto   APIProductApprovalType = "auto"
	APIProductApprovalTypeManual APIProductApprovalType = "manual"
)

// Defines values for APIProductAccessLevel.
const (
	Internal APIProductAccessLevel = "internal"
	Private  APIProductAccessLevel = "private"
	Public   APIProductAccessLevel = "public"
)

// Defines values for APIProductPatchApprovalType.
const (
	APIProductPatchApprovalTypeAuto   APIProductPatchApprovalType = "auto"
	APIProductPatchApprovalTypeManual APIProductPatchApprovalType = "manual"
)

// Defines values for APISummarySource.
const (
	APISummarySourceEventAPIProduct APISummarySource = "EventAPIProduct"
	APISummarySourceEventPortalLink APISummarySource = "EventPortalLink"
	APISummarySourceUpload          APISummarySource = "Upload"
)

// Defines values for AboutEVENTPORTALVERSION.
const (
	N1 AboutEVENTPORTALVERSION = "1"
	N2 AboutEVENTPORTALVERSION = "2"
)

// Defines values for AppListItemAppType.
const (
	AppListItemAppTypeDeveloper AppListItemAppType = "developer"
	AppListItemAppTypeTeam      AppListItemAppType = "team"
)

// Defines values for AppResponseGenericAppType.
const (
	AppResponseGenericAppTypeDeveloper AppResponseGenericAppType = "developer"
	AppResponseGenericAppTypeTeam      AppResponseGenericAppType = "team"
)

// Defines values for AppStatus.
const (
	AppStatusApproved AppStatus = "approved"
	AppStatusPending  AppStatus = "pending"
	AppStatusRevoked  AppStatus = "revoked"
)

// Defines values for ClientInformationGuaranteedMessagingAccessType.
const (
	ClientInformationGuaranteedMessagingAccessTypeExclusive    ClientInformationGuaranteedMessagingAccessType = "exclusive"
	ClientInformationGuaranteedMessagingAccessTypeNonExclusive ClientInformationGuaranteedMessagingAccessType = "non-exclusive"
)

// Defines values for ClientOptionsGuaranteedMessagingAccessType.
const (
	ClientOptionsGuaranteedMessagingAccessTypeExclusive    ClientOptionsGuaranteedMessagingAccessType = "exclusive"
	ClientOptionsGuaranteedMessagingAccessTypeNonExclusive ClientOptionsGuaranteedMessagingAccessType = "non-exclusive"
)

// Defines values for ClientOptionsGuaranteedMessagingQueueGranularity.
const (
	Api        ClientOptionsGuaranteedMessagingQueueGranularity = "api"
	ApiProduct ClientOptionsGuaranteedMessagingQueueGranularity = "apiProduct"
)

// Defines values for EndpointCompressed.
const (
	EndpointCompressedFalse EndpointCompressed = "false"
	EndpointCompressedTrue  EndpointCompressed = "true"
)

// Defines values for EndpointSecure.
const (
	EndpointSecureFalse EndpointSecure = "false"
	EndpointSecureTrue  EndpointSecure = "true"
)

// Defines values for HistoryOperation.
const (
	HistoryOperationDELETE HistoryOperation = "DELETE"
	HistoryOperationPATCH  HistoryOperation = "PATCH"
	HistoryOperationPOST   HistoryOperation = "POST"
	HistoryOperationPUT    HistoryOperation = "PUT"
)

// Defines values for JobStatus.
const (
	JobStatusFinished JobStatus = "finished"
	JobStatusPending  JobStatus = "pending"
)

// Defines values for MetaEntityStage.
const (
	Deprecated MetaEntityStage = "deprecated"
	Draft      MetaEntityStage = "draft"
	Released   MetaEntityStage = "released"
	Retired    MetaEntityStage = "retired"
)

// Defines values for MsgVpnMqttSessionMqttSessionVirtualRouter.
const (
	Backup  MsgVpnMqttSessionMqttSessionVirtualRouter = "backup"
	Primary MsgVpnMqttSessionMqttSessionVirtualRouter = "primary"
)

// Defines values for MsgVpnQueueAccessType.
const (
	Exclusive    MsgVpnQueueAccessType = "exclusive"
	NonExclusive MsgVpnQueueAccessType = "non-exclusive"
)

// Defines values for MsgVpnQueuePermission.
const (
	Consume  MsgVpnQueuePermission = "consume"
	NoAccess MsgVpnQueuePermission = "no-access"
	ReadOnly MsgVpnQueuePermission = "read-only"
)

// Defines values for MsgVpnRestDeliveryPointRestConsumerAuthenticationScheme.
const (
	HttpBasic  MsgVpnRestDeliveryPointRestConsumerAuthenticationScheme = "http-basic"
	HttpHeader MsgVpnRestDeliveryPointRestConsumerAuthenticationScheme = "http-header"
	None       MsgVpnRestDeliveryPointRestConsumerAuthenticationScheme = "none"
)

// Defines values for MsgVpnRestDeliveryPointRestConsumerHttpMethod.
const (
	Post MsgVpnRestDeliveryPointRestConsumerHttpMethod = "post"
	Put  MsgVpnRestDeliveryPointRestConsumerHttpMethod = "put"
)

// Defines values for ProtocolName.
const (
	ProtocolNameAmqp          ProtocolName = "amqp"
	ProtocolNameAmqps         ProtocolName = "amqps"
	ProtocolNameCompressedSmf ProtocolName = "compressed-smf"
	ProtocolNameHttp          ProtocolName = "http"
	ProtocolNameHttps         ProtocolName = "https"
	ProtocolNameJms           ProtocolName = "jms"
	ProtocolNameMqtt          ProtocolName = "mqtt"
	ProtocolNameSecureJms     ProtocolName = "secure-jms"
	ProtocolNameSecureMqtt    ProtocolName = "secure-mqtt"
	ProtocolNameSmf           ProtocolName = "smf"
	ProtocolNameSmfs          ProtocolName = "smfs"
	ProtocolNameWs            ProtocolName = "ws"
	ProtocolNameWsMqtt        ProtocolName = "ws-mqtt"
	ProtocolNameWss           ProtocolName = "wss"
	ProtocolNameWssMqtt       ProtocolName = "wss-mqtt"
)

// Defines values for SempV2AuthenticationApiKeyLocation.
const (
	SempV2AuthenticationApiKeyLocationHeader SempV2AuthenticationApiKeyLocation = "header"
	SempV2AuthenticationApiKeyLocationQuery  SempV2AuthenticationApiKeyLocation = "query"
)

// Defines values for SempV2AuthenticationAuthType.
const (
	APIKey    SempV2AuthenticationAuthType = "APIKey"
	BasicAuth SempV2AuthenticationAuthType = "BasicAuth"
)

// Defines values for ServiceRegistryType.
const (
	Eventportal ServiceRegistryType = "eventportal"
	Platform    ServiceRegistryType = "platform"
)

// Defines values for TopicSyntax.
const (
	TopicSyntaxMqtt TopicSyntax = "mqtt"
	TopicSyntaxSmf  TopicSyntax = "smf"
)

// Defines values for WebHookMethod.
const (
	WebHookMethodPOST WebHookMethod = "POST"
	WebHookMethodPUT  WebHookMethod = "PUT"
)

// Defines values for WebHookMode.
const (
	Parallel WebHookMode = "parallel"
	Serial   WebHookMode = "serial"
)

// Defines values for WebHookBasicAuthAuthMethod.
const (
	Basic WebHookBasicAuthAuthMethod = "Basic"
)

// Defines values for WebHookHeaderAuthAuthMethod.
const (
	Header WebHookHeaderAuthAuthMethod = "Header"
)

// Defines values for ApiListFormat.
const (
	Compact  ApiListFormat = "compact"
	Extended ApiListFormat = "extended"
	Summary  ApiListFormat = "summary"
)

// Defines values for CreateMode.
const (
	Test  CreateMode = "test"
	Write CreateMode = "write"
)

// Defines values for SortDirection.
const (
	Asc  SortDirection = "asc"
	Desc SortDirection = "desc"
)

// ACLAction defines model for ACLAction.
type ACLAction string

// APIImport defines model for APIImport.
type APIImport struct {
	// id of the entity in the source system
	Id *string `json:"id,omitempty"`

	// indicates if an existing API entity shall be replaced
	Overwrite *bool `json:"overwrite,omitempty"`

	// source system for loading the Async API
	Source *APIImportSource `json:"source,omitempty"`
}

// source system for loading the Async API
type APIImportSource string

// APIInfo defines model for APIInfo.
type APIInfo struct {
	ApiParameters *[]APIParameter `json:"apiParameters,omitempty"`

	// Arbitrary name/value pairs associated with an API product, team, developer or app.
	Attributes  *Attributes            `json:"attributes,omitempty"`
	CreatedBy   CommonUserName         `json:"createdBy"`
	CreatedTime CommonTimestampInteger `json:"createdTime"`

	// indicates that this API is marked as deprecated
	Deprecated *bool `json:"deprecated,omitempty"`

	// An overview of the object. Include key information about the object that is not captured by other fields..
	DeprecatedDescription *CommonDescription `json:"deprecatedDescription,omitempty"`

	// An overview of the object. Include key information about the object that is not captured by other fields..
	Description CommonDescription `json:"description"`

	// meta information of an object. Will be returned by some resources. Can be set when patching or creating an object. Auto generated if not set.
	Meta *Meta `json:"meta,omitempty"`

	// The internal name of an object. Characters you can use in the name are restricted to: A-Z0-9._-. Once the object is created the internal name can not be changed
	Name CommonName `json:"name"`

	// source of the API spec
	Source APIInfoSource `json:"source"`

	// id of the entity in the source system
	SourceId *string `json:"sourceId,omitempty"`

	// any metadata as returned by the external System (if applicable)
	SourceMetadata *APIInfo_SourceMetadata `json:"sourceMetadata,omitempty"`

	// An overview of the object. Include key information about the object that is not captured by other fields..
	Summary     CommonDescription       `json:"summary"`
	UpdatedTime *CommonTimestampInteger `json:"updatedTime,omitempty"`
	Version     CommonVersion           `json:"version"`
}

// source of the API spec
type APIInfoSource string

// any metadata as returned by the external System (if applicable)
type APIInfo_SourceMetadata struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// APIInfoList defines model for APIInfoList.
type APIInfoList = []APIInfo

// APIInfoPatch defines model for APIInfoPatch.
type APIInfoPatch struct {
	// Arbitrary name/value pairs associated with an API product, team, developer or app.
	Attributes *Attributes `json:"attributes,omitempty"`

	// indicates that this API is marked as deprecated
	Deprecated *bool `json:"deprecated,omitempty"`

	// An overview of the object. Include key information about the object that is not captured by other fields..
	DeprecatedDescription *CommonDescription `json:"deprecatedDescription,omitempty"`

	// meta information of an object. Will be returned by some resources. Can be set when patching or creating an object. Auto generated if not set.
	Meta *Meta `json:"meta,omitempty"`
}

// APIKeyAuthentication defines model for APIKeyAuthentication.
type APIKeyAuthentication struct {
	// the api key value
	Key      string                       `json:"key"`
	Location APIKeyAuthenticationLocation `json:"location"`

	// the name of the query parameter or HTTP header for submitting the API Key
	Name string `json:"name"`
}

// APIKeyAuthenticationLocation defines model for APIKeyAuthentication.Location.
type APIKeyAuthenticationLocation string

// APIList defines model for APIList.
type APIList = []CommonName

// APIParameter defines model for APIParameter.
type APIParameter struct {
	// any allowed enumerated values for the parameter
	Enum *[]string `json:"enum,omitempty"`

	// name of the parameter as defined in the AsyncAPI Spec
	Name string `json:"name"`

	// type of the parameter
	Type APIParameterType `json:"type"`
}

// type of the parameter
type APIParameterType string

// An API product consists of a list of API resources (URIs) and custom metadata required by the API provider. API products enable you to bundle and distribute your APIs to multiple developer groups simultaneously
type APIProduct struct {
	AccessLevel *APIProductAccessLevel `json:"accessLevel,omitempty"`

	// APIs associated with this product.
	Apis []CommonName `json:"apis"`

	// manual or auto. If manual, credetials will only be activated on manual approval
	ApprovalType *APIProductApprovalType `json:"approvalType,omitempty"`

	// Arbitrary name/value pairs associated with an API product, team, developer or app.
	Attributes    Attributes     `json:"attributes"`
	ClientOptions *ClientOptions `json:"clientOptions,omitempty"`

	// An overview of the object. Include key information about the object that is not captured by other fields..
	Description *CommonDescription `json:"description,omitempty"`

	// Friendly name of an object for display in UIs, Developer Portals. Can be changed after object creation
	DisplayName CommonDisplayName `json:"displayName"`

	// An array of environment names in an organization. Requests to environments not listed are rejected.
	Environments []CommonName `json:"environments"`

	// meta information of an object. Will be returned by some resources. Can be set when patching or creating an object. Auto generated if not set.
	Meta *Meta `json:"meta,omitempty"`

	// The internal name of an object. Characters you can use in the name are restricted to: A-Z0-9._-. Once the object is created the internal name can not be changed
	Name      CommonName `json:"name"`
	Protocols []Protocol `json:"protocols"`

	// An array of Publish API resources to be bundled in the API Product.
	PubResources []CommonTopic `json:"pubResources"`

	// An array of Subscribe API resources to be bundled in the API Product.
	SubResources []CommonTopic `json:"subResources"`
}

// manual or auto. If manual, credetials will only be activated on manual approval
type APIProductApprovalType string

// APIProductAccessLevel defines model for APIProductAccessLevel.
type APIProductAccessLevel string

// Used for PATCH operation, An API product consists of a list of API resources (URIs) and custom metadata required by the API provider. API products enable you to bundle and distribute your APIs to multiple developer groups simultaneously
type APIProductPatch struct {
	AccessLevel *APIProductAccessLevel `json:"accessLevel,omitempty"`

	// APIs associated with this product.
	Apis *[]CommonName `json:"apis,omitempty"`

	// manual or auto. If manual, credentials will only be activated on manual approval
	ApprovalType *APIProductPatchApprovalType `json:"approvalType,omitempty"`

	// Arbitrary name/value pairs associated with an API product, team, developer or app.
	Attributes    *Attributes    `json:"attributes,omitempty"`
	ClientOptions *ClientOptions `json:"clientOptions,omitempty"`

	// An overview of the object. Include key information about the object that is not captured by other fields..
	Description *CommonDescription `json:"description,omitempty"`

	// Friendly name of an object for display in UIs, Developer Portals. Can be changed after object creation
	DisplayName *CommonDisplayName `json:"displayName,omitempty"`

	// A list of environment name in an organization. Requests to environments not listed are rejected.
	Environments *[]CommonName `json:"environments,omitempty"`

	// meta information of an object. Will be returned by some resources. Can be set when patching or creating an object. Auto generated if not set.
	Meta      *Meta       `json:"meta,omitempty"`
	Protocols *[]Protocol `json:"protocols,omitempty"`

	// A comma separated list of Publish API resources to be bundled in the API Product.
	PubResources *[]CommonTopic `json:"pubResources,omitempty"`

	// A comma separated list of Publish API resources to be bundled in the API Product.
	SubResources *[]CommonTopic `json:"subResources,omitempty"`
}

// manual or auto. If manual, credentials will only be activated on manual approval
type APIProductPatchApprovalType string

// APISummary defines model for APISummary.
type APISummary struct {
	CreatedBy *CommonUserName `json:"createdBy,omitempty"`

	// An overview of the object. Include key information about the object that is not captured by other fields..
	Description *CommonDescription `json:"description,omitempty"`

	// The internal name of an object. Characters you can use in the name are restricted to: A-Z0-9._-. Once the object is created the internal name can not be changed
	Name   *CommonName       `json:"name,omitempty"`
	Source *APISummarySource `json:"source,omitempty"`
}

// APISummarySource defines model for APISummary.Source.
type APISummarySource string

// APISummaryList defines model for APISummaryList.
type APISummaryList = []APISummary

// APIVersionInfoPatch defines model for APIVersionInfoPatch.
type APIVersionInfoPatch struct {
	// indicates that this API is marked as deprecated
	Deprecated *bool `json:"deprecated,omitempty"`

	// An overview of the object. Include key information about the object that is not captured by other fields..
	DeprecatedDescription *CommonDescription `json:"deprecatedDescription,omitempty"`

	// meta information of an object. Will be returned by some resources. Can be set when patching or creating an object. Auto generated if not set.
	Meta *Meta `json:"meta,omitempty"`
}

// About defines model for About.
type About struct {
	// indicates if the Connector is running in Proxy Mode. In this mode all published Event API Products in Event Portal are automatically available as APIs in the connector
	APISPROXYMODE *bool `json:"APIS_PROXY_MODE,omitempty"`

	// indicates if the Connector is running in Event Portal 1 or Event Portal 2.0 mode
	EVENTPORTALVERSION *AboutEVENTPORTALVERSION `json:"EVENT_PORTAL_VERSION,omitempty"`

	// version information
	Version *About_Version `json:"version,omitempty"`
}

// indicates if the Connector is running in Event Portal 1 or Event Portal 2.0 mode
type AboutEVENTPORTALVERSION string

// version information
type About_Version struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AccountingLimit defines model for AccountingLimit.
type AccountingLimit struct {
	// id as used/issued by the back end apis, alphanumeric characters only
	Id         CommonSolaceCloudObjectId `json:"id"`
	Thresholds []Threshold               `json:"thresholds"`
	Unit       string                    `json:"unit"`
	Value      string                    `json:"value"`
}

// An app associated with an owner (developer, team etc). Associates the app with an API product, and auto-generates an API credentials for the app to use
type App struct {
	ApiProducts AppApiProducts `json:"apiProducts"`

	// Arbitrary name/value pairs associated with an API product, team, developer or app.
	Attributes  *Attributes `json:"attributes,omitempty"`
	CallbackUrl *CommonURL  `json:"callbackUrl,omitempty"`
	Credentials interface{} `json:"credentials"`

	// Friendly name of an object for display in UIs, Developer Portals. Can be changed after object creation
	DisplayName *CommonDisplayName `json:"displayName,omitempty"`

	// A setting, in milliseconds, for the lifetime of the consumer key that will be  generated for the developer app. The default value, -1, indicates an infinite validity period. Once set, the expiration can't be updated.
	ExpiresIn *int64 `json:"expiresIn,omitempty"`

	// the internal name of the app used within the connector. This name is auto generated by default. Warning - should ONLY be set if a naming convention for broker objects must be imposed. This value can not be updated.
	InternalName *string `json:"internalName,omitempty"`

	// The internal name of an object. Characters you can use in the name are restricted to: A-Z0-9._-. Once the object is created the internal name can not be changed
	Name     CommonName `json:"name"`
	WebHooks *[]WebHook `json:"webHooks,omitempty"`
}

// AppApiProducts defines model for AppApiProducts.
type AppApiProducts = []interface{}

// AppApiProductsComplex defines model for AppApiProductsComplex.
type AppApiProductsComplex struct {
	// The internal name of an object. Characters you can use in the name are restricted to: A-Z0-9._-. Once the object is created the internal name can not be changed
	Apiproduct CommonName `json:"apiproduct"`
	Status     *AppStatus `json:"status,omitempty"`
}

// AppConfigSet defines model for AppConfigSet.
type AppConfigSet struct {
	AclProfile MsgVpnAclProfile `json:"aclProfile"`

	// Arbitrary name/value pairs associated with an API product, team, developer or app.
	Attributes         *Attributes               `json:"attributes,omitempty"`
	AuthorizationGroup MsgVpnAuthorizationGroup  `json:"authorizationGroup"`
	ClientProfile      MsgVpnClientProfile       `json:"clientProfile"`
	ClientUsernames    MsgVpnClientUsernameArray `json:"clientUsernames"`

	// Friendly name of an object for display in UIs, Developer Portals. Can be changed after object creation
	DisplayName CommonDisplayName  `json:"displayName"`
	MqttSession *MsgVpnMqttSession `json:"mqttSession,omitempty"`

	// The internal name of an object. Characters you can use in the name are restricted to: A-Z0-9._-. Once the object is created the internal name can not be changed
	Name               CommonName                 `json:"name"`
	Queues             *[]MsgVpnQueue             `json:"queues,omitempty"`
	RestDeliveryPoints *[]MsgVpnRestDeliveryPoint `json:"restDeliveryPoints,omitempty"`
	Services           []EnvironmentService       `json:"services"`
	State              *ConfigState               `json:"state,omitempty"`

	// Set of tags
	Tags *Tags `json:"tags,omitempty"`
}

// AppConnection defines model for AppConnection.
type AppConnection struct {
	// client IP address and port
	ClientAddress *string   `json:"clientAddress,omitempty"`
	Protocol      *Protocol `json:"protocol,omitempty"`

	// connection latency in nanoseconds
	RoundtripTime *int `json:"roundtripTime,omitempty"`

	// State of the connection (ESTABLISHED if up)
	State *string `json:"state,omitempty"`

	// uptime of connection in seconds
	Uptime *int `json:"uptime,omitempty"`
}

// provides status information on the app's connections to the Gateway Broker
type AppConnectionStatus struct {
	Environments *[]AppEnvironmentStatus `json:"environments,omitempty"`
}

// AppEnvironment defines model for AppEnvironment.
type AppEnvironment struct {
	// Friendly name of an object for display in UIs, Developer Portals. Can be changed after object creation
	DisplayName        *CommonDisplayName `json:"displayName,omitempty"`
	MessagingProtocols *[]Endpoint        `json:"messagingProtocols,omitempty"`

	// The internal name of an object. Characters you can use in the name are restricted to: A-Z0-9._-. Once the object is created the internal name can not be changed
	Name *CommonName `json:"name,omitempty"`

	// lists all the publish and subscribe topics an app has access to. Restrictions on   topic elements are taken into account.
	Permissions *Permissions `json:"permissions,omitempty"`
}

// provides status information on the app's connections to the Gateway Broker
type AppEnvironmentStatus struct {
	Connections *[]AppConnection `json:"connections,omitempty"`

	// Friendly name of an object for display in UIs, Developer Portals. Can be changed after object creation
	DisplayName *CommonDisplayName `json:"displayName,omitempty"`

	// The internal name of an object. Characters you can use in the name are restricted to: A-Z0-9._-. Once the object is created the internal name can not be changed
	Name     *CommonName      `json:"name,omitempty"`
	Queues   *[]QueueStatus   `json:"queues,omitempty"`
	WebHooks *[]WebHookStatus `json:"webHooks,omitempty"`
}

// AppListItem defines model for AppListItem.
type AppListItem struct {
	ApiProducts *AppApiProducts     `json:"apiProducts,omitempty"`
	AppType     *AppListItemAppType `json:"appType,omitempty"`

	// Friendly name of an object for display in UIs, Developer Portals. Can be changed after object creation
	DisplayName *CommonDisplayName `json:"displayName,omitempty"`

	// The internal name of an object. Characters you can use in the name are restricted to: A-Z0-9._-. Once the object is created the internal name can not be changed
	Name    *CommonName `json:"name,omitempty"`
	OwnerId *string     `json:"ownerId,omitempty"`
	Status  *AppStatus  `json:"status,omitempty"`
}

// AppListItemAppType defines model for AppListItem.AppType.
type AppListItemAppType string

// Used for PATCH operation. An app associated with a developer. Associates the app with an API product, and auto-generates an API credentials for the app to use
type AppPatch struct {
	ApiProducts *AppApiProducts `json:"apiProducts,omitempty"`

	// Arbitrary name/value pairs associated with an API product, team, developer or app.
	Attributes  *Attributes  `json:"attributes,omitempty"`
	CallbackUrl *CommonURL   `json:"callbackUrl,omitempty"`
	Credentials *interface{} `json:"credentials,omitempty"`

	// Friendly name of an object for display in UIs, Developer Portals. Can be changed after object creation
	DisplayName *CommonDisplayName `json:"displayName,omitempty"`

	// A setting, in milliseconds, for the lifetime of the consumer key that will be  generated for the developer app. The default value, -1, indicates an infinite validity period. Once set, the expiration can't be updated.
	ExpiresIn *int64     `json:"expiresIn,omitempty"`
	Status    *AppStatus `json:"status,omitempty"`
	WebHooks  *[]WebHook `json:"webHooks,omitempty"`
}

// App Response Object - includes protocol binding information and app premissions. An app associated with a developer. Associates the app with an API product, and auto-generates an API credentials for the app to use.
type AppResponse struct {
	ApiProducts AppApiProducts `json:"apiProducts"`

	// Arbitrary name/value pairs associated with an API product, team, developer or app.
	Attributes        *Attributes          `json:"attributes,omitempty"`
	CallbackUrl       *CommonURL           `json:"callbackUrl,omitempty"`
	ClientInformation *[]ClientInformation `json:"clientInformation,omitempty"`
	Credentials       interface{}          `json:"credentials"`

	// Friendly name of an object for display in UIs, Developer Portals. Can be changed after object creation
	DisplayName  *CommonDisplayName `json:"displayName,omitempty"`
	Environments *[]AppEnvironment  `json:"environments,omitempty"`

	// A setting, in milliseconds, for the lifetime of the consumer key that will be  generated for the developer app. The default value, -1, indicates an infinite validity period. Once set, the expiration can't be updated.
	ExpiresIn *int64 `json:"expiresIn,omitempty"`

	// the internal name of the app used within the connector. This name is auto generated by default. Warning - should ONLY be set if a naming convention for broker objects must be imposed. This value can not be updated.
	InternalName *string `json:"internalName,omitempty"`

	// The internal name of an object. Characters you can use in the name are restricted to: A-Z0-9._-. Once the object is created the internal name can not be changed
	Name     CommonName `json:"name"`
	Status   *AppStatus `json:"status,omitempty"`
	WebHooks *[]WebHook `json:"webHooks,omitempty"`
}

// App Response Object - includes protocol binding information and app premissions. An app associated with a developer. Associates the app with an API product, and auto-generates an API credentials for the app to use.
type AppResponseGeneric struct {
	ApiProducts AppApiProducts             `json:"apiProducts"`
	AppType     *AppResponseGenericAppType `json:"appType,omitempty"`

	// Arbitrary name/value pairs associated with an API product, team, developer or app.
	Attributes        *Attributes          `json:"attributes,omitempty"`
	CallbackUrl       *CommonURL           `json:"callbackUrl,omitempty"`
	ClientInformation *[]ClientInformation `json:"clientInformation,omitempty"`
	Credentials       interface{}          `json:"credentials"`

	// Friendly name of an object for display in UIs, Developer Portals. Can be changed after object creation
	DisplayName  *CommonDisplayName `json:"displayName,omitempty"`
	Environments *[]AppEnvironment  `json:"environments,omitempty"`

	// A setting, in milliseconds, for the lifetime of the consumer key that will be  generated for the developer app. The default value, -1, indicates an infinite validity period. Once set, the expiration can't be updated.
	ExpiresIn *int64 `json:"expiresIn,omitempty"`

	// the internal name of the app used within the connector. This name is auto generated by default. Warning - should ONLY be set if a naming convention for broker objects must be imposed. This value can not be updated.
	InternalName *string `json:"internalName,omitempty"`

	// The internal name of an object. Characters you can use in the name are restricted to: A-Z0-9._-. Once the object is created the internal name can not be changed
	Name     CommonName `json:"name"`
	OwnerId  *string    `json:"ownerId,omitempty"`
	Status   *AppStatus `json:"status,omitempty"`
	WebHooks *[]WebHook `json:"webHooks,omitempty"`
}

// AppResponseGenericAppType defines model for AppResponseGeneric.AppType.
type AppResponseGenericAppType string

// AppStatus defines model for AppStatus.
type AppStatus string

// ApplicationDomain defines model for ApplicationDomain.
type ApplicationDomain struct {
	ChangedBy   *string `json:"changedBy,omitempty"`
	CreatedBy   *string `json:"createdBy,omitempty"`
	CreatedTime *string `json:"createdTime,omitempty"`
	Description *string `json:"description,omitempty"`
	Id          *string `json:"id,omitempty"`
	Name        string  `json:"name"`

	// Forces all topic addresses within the application domain to be prefixed with one of the application domain’s configured topic domains.
	TopicDomainEnforcementEnabled *bool   `json:"topicDomainEnforcementEnabled,omitempty"`
	Type                          *string `json:"type,omitempty"`

	// Forces all topic addresses within the application domain to be unique.
	UniqueTopicAddressEnforcementEnabled *bool   `json:"uniqueTopicAddressEnforcementEnabled,omitempty"`
	UpdatedTime                          *string `json:"updatedTime,omitempty"`
}

// ApplicationDomainList defines model for ApplicationDomainList.
type ApplicationDomainList = []ApplicationDomain

// Value of the attribute.
type AttributeValue = string

// BasicAuthentication defines model for BasicAuthentication.
type BasicAuthentication struct {
	Password string `json:"password"`
	UserName string `json:"userName"`
}

// BearerTokenAuthentication defines model for BearerTokenAuthentication.
type BearerTokenAuthentication struct {
	Token string `json:"token"`
}

// a permission and its associated channel
type ChannelPermission struct {
	ChannelId   *string       `json:"channelId,omitempty"`
	IsChannel   *bool         `json:"isChannel,omitempty"`
	Permissions []CommonTopic `json:"permissions"`
}

// ClientInformation defines model for ClientInformation.
type ClientInformation struct {
	GuaranteedMessaging *ClientInformationGuaranteedMessaging `json:"guaranteedMessaging,omitempty"`
}

// ClientInformationGuaranteedMessaging defines model for ClientInformationGuaranteedMessaging.
type ClientInformationGuaranteedMessaging struct {
	// access mode for the queue
	AccessType *ClientInformationGuaranteedMessagingAccessType `json:"accessType,omitempty"`

	// The internal name of an object. Characters you can use in the name are restricted to: A-Z0-9._-. Once the object is created the internal name can not be changed
	ApiProduct *CommonName `json:"apiProduct,omitempty"`

	// The maximum message spool usage allowed by the Queue, in megabytes (MB). A value of 0 only allows spooling of the last message received and disables quota checking
	MaxMsgSpoolUsage *int64 `json:"maxMsgSpoolUsage,omitempty"`

	// retention policy for message on the queue, in seconds
	MaxTtl *int64 `json:"maxTtl,omitempty"`

	// The name of the queue that is available for this app's API Product subcription
	Name *string `json:"name,omitempty"`
}

// access mode for the queue
type ClientInformationGuaranteedMessagingAccessType string

// ClientOptions defines model for ClientOptions.
type ClientOptions struct {
	GuaranteedMessaging        *ClientOptionsGuaranteedMessaging `json:"guaranteedMessaging,omitempty"`
	GuaranteedMessagingEnabled *bool                             `json:"guaranteedMessagingEnabled,omitempty"`
}

// ClientOptionsGuaranteedMessaging defines model for ClientOptionsGuaranteedMessaging.
type ClientOptionsGuaranteedMessaging struct {
	// access mode for the queue
	AccessType *ClientOptionsGuaranteedMessagingAccessType `json:"accessType,omitempty"`

	// The maximum message spool usage allowed by the Queue, in megabytes (MB). A value of 0 only allows spooling of the last message received and disables quota checking
	MaxMsgSpoolUsage *int64 `json:"maxMsgSpoolUsage,omitempty"`

	// retention policy for message on the queue, default to 24 hours. Set to 0 if messages are to be kept indefinitely
	MaxTtl *int64 `json:"maxTtl,omitempty"`

	// Queue can be applied at api level (one queue per API) or at API Product level (one queue per product, aggregating the subscriptions of all associated APIs), defaults to apiProduct if not supplied
	QueueGranularity *ClientOptionsGuaranteedMessagingQueueGranularity `json:"queueGranularity,omitempty"`

	// Automatically provision a queue with all subscriptions permitted for this app attached
	RequireQueue *bool `json:"requireQueue,omitempty"`
}

// access mode for the queue
type ClientOptionsGuaranteedMessagingAccessType string

// Queue can be applied at api level (one queue per API) or at API Product level (one queue per product, aggregating the subscriptions of all associated APIs), defaults to apiProduct if not supplied
type ClientOptionsGuaranteedMessagingQueueGranularity string

// CloudToken defines model for CloudToken.
type CloudToken struct {
	Cloud                CustomCloudEndpoint    `json:"cloud"`
	EventPortal          CustomCloudEndpoint    `json:"eventPortal"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// An overview of the object. Include key information about the object that is not captured by other fields..
type CommonDescription = string

// Friendly name of an object for display in UIs, Developer Portals. Can be changed after object creation
type CommonDisplayName = string

// Friendly name of an object for display in UIs, Developer Portals. Can be changed after object creation
type CommonDisplayNameReadOnly = string

// Name and display name attribute of an entity
type CommonEntityNameList = []CommonEntityNames

// Name and display name attribute of an entity
type CommonEntityNames struct {
	// Friendly name of an object for display in UIs, Developer Portals. Can be changed after object creation
	DisplayName *CommonDisplayName `json:"displayName,omitempty"`

	// The internal name of an object. Characters you can use in the name are restricted to: A-Z0-9._-. Once the object is created the internal name can not be changed
	Name *CommonName `json:"name,omitempty"`
}

// The internal name of an object. Characters you can use in the name are restricted to: A-Z0-9._-. Once the object is created the internal name can not be changed
type CommonName = string

// id as used/issued by the back end apis, alphanumeric characters only
type CommonSolaceCloudObjectId = string

// CommonTimestampInteger defines model for CommonTimestampInteger.
type CommonTimestampInteger = int64

// CommonTopic defines model for CommonTopic.
type CommonTopic = string

// CommonURL defines model for CommonURL.
type CommonURL = string

// CommonUserName defines model for CommonUserName.
type CommonUserName = string

// CommonVersion defines model for CommonVersion.
type CommonVersion = string

// ConfigSnapshot defines model for ConfigSnapshot.
type ConfigSnapshot struct {
	Applied    *bool                  `json:"applied,omitempty"`
	AppliedAt  CommonTimestampInteger `json:"appliedAt"`
	AppliedBy  CommonUserName         `json:"appliedBy"`
	ArchivedAt CommonTimestampInteger `json:"archivedAt"`
	ArchivedBy CommonUserName         `json:"archivedBy"`
	Config     AppConfigSet           `json:"config"`

	// The internal name of an object. Characters you can use in the name are restricted to: A-Z0-9._-. Once the object is created the internal name can not be changed
	Name     CommonName `json:"name"`
	Revision int        `json:"revision"`
}

// ConfigState defines model for ConfigState.
type ConfigState struct {
	Applied   bool                   `json:"applied"`
	AppliedAt CommonTimestampInteger `json:"appliedAt"`
	AppliedBy CommonUserName         `json:"appliedBy"`
	Errors    *[]CommonDescription   `json:"errors,omitempty"`
}

// Credentials object associated with an app
type Credentials struct {
	ExpiresAt *int64                  `json:"expiresAt,omitempty"`
	IssuedAt  *CommonTimestampInteger `json:"issuedAt,omitempty"`

	// The internal name of an object. Characters you can use in the name are restricted to: A-Z0-9._-. Once the object is created the internal name can not be changed
	Name   *CommonName `json:"name,omitempty"`
	Secret *Secret     `json:"secret,omitempty"`
}

// Credentials object array associated with an app
type CredentialsArray = []Credentials

// CustomCloudEndpoint defines model for CustomCloudEndpoint.
type CustomCloudEndpoint struct {
	BaseUrl string  `json:"baseUrl"`
	Token   *string `json:"token,omitempty"`
}

// A profile for a developer. After the developer is created, they can register an app and receive API credentials
type Developer struct {
	// Arbitrary name/value pairs associated with an API product, team, developer or app.
	Attributes *Attributes         `json:"attributes,omitempty"`
	Email      openapi_types.Email `json:"email"`
	FirstName  string              `json:"firstName"`
	LastName   string              `json:"lastName"`
	UserName   CommonUserName      `json:"userName"`
}

// Used for PATCH operation, A profile for a developer. After the developer is created, they can register an app and receive API credentials
type DeveloperPatch struct {
	// Arbitrary name/value pairs associated with an API product, team, developer or app.
	Attributes *Attributes          `json:"attributes,omitempty"`
	Email      *openapi_types.Email `json:"email,omitempty"`
	FirstName  *string              `json:"firstName,omitempty"`
	LastName   *string              `json:"lastName,omitempty"`
}

// Endpoint defines model for Endpoint.
type Endpoint struct {
	Compressed *EndpointCompressed `json:"compressed,omitempty"`
	MsgVpn     *string             `json:"msgVpn,omitempty"`
	Protocol   *Protocol           `json:"protocol,omitempty"`
	Secure     *EndpointSecure     `json:"secure,omitempty"`

	// The protocol transport
	Transport *string `json:"transport,omitempty"`
	Uri       *string `json:"uri,omitempty"`
}

// EndpointCompressed defines model for Endpoint.Compressed.
type EndpointCompressed string

// EndpointSecure defines model for Endpoint.Secure.
type EndpointSecure string

// Request to derive a new entity from an existing entity (clone). Meta object allows to pass in current user name to override the logged in user context in the Connector
type EntityDeriveRequest struct {
	// meta information of an object. Will be returned by some resources. Can be set when patching or creating an object. Auto generated if not set.
	Meta *Meta `json:"meta,omitempty"`

	// Name and display name attribute of an entity
	Names CommonEntityNames `json:"names"`
}

// an environment
type Environment struct {
	// An overview of the object. Include key information about the object that is not captured by other fields..
	Description CommonDescription `json:"description"`

	// Friendly name of an object for display in UIs, Developer Portals. Can be changed after object creation
	DisplayName      *CommonDisplayName `json:"displayName,omitempty"`
	ExposedProtocols []Protocol         `json:"exposedProtocols"`

	// The internal name of an object. Characters you can use in the name are restricted to: A-Z0-9._-. Once the object is created the internal name can not be changed
	Name                 CommonName             `json:"name"`
	ServiceId            string                 `json:"serviceId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// EnvironmentListItem defines model for EnvironmentListItem.
type EnvironmentListItem struct {
	// An overview of the object. Include key information about the object that is not captured by other fields..
	Description CommonDescription `json:"description"`

	// Friendly name of an object for display in UIs, Developer Portals. Can be changed after object creation
	DisplayName      *CommonDisplayName `json:"displayName,omitempty"`
	ExposedProtocols []Protocol         `json:"exposedProtocols"`

	// The internal name of an object. Characters you can use in the name are restricted to: A-Z0-9._-. Once the object is created the internal name can not be changed
	Name      CommonName `json:"name"`
	ServiceId string     `json:"serviceId"`
}

// used for PATCH operation, an environment
type EnvironmentPatch struct {
	// An overview of the object. Include key information about the object that is not captured by other fields..
	Description *CommonDescription `json:"description,omitempty"`

	// Friendly name of an object for display in UIs, Developer Portals. Can be changed after object creation
	DisplayName *CommonDisplayName `json:"displayName,omitempty"`

	// The protocols that can be exposed for use with APIs
	ExposedProtocols *[]Protocol `json:"exposedProtocols,omitempty"`
	ServiceId        *string     `json:"serviceId,omitempty"`
}

// an environment
type EnvironmentResponse struct {
	CreationState      *string `json:"creationState,omitempty"`
	DatacenterId       *string `json:"datacenterId,omitempty"`
	DatacenterProvider *string `json:"datacenterProvider,omitempty"`

	// An overview of the object. Include key information about the object that is not captured by other fields..
	Description CommonDescription `json:"description"`

	// Friendly name of an object for display in UIs, Developer Portals. Can be changed after object creation
	DisplayName *CommonDisplayName `json:"displayName,omitempty"`

	// The protocols that can be exposed for use with APIs
	ExposedProtocols *[]Protocol `json:"exposedProtocols,omitempty"`

	// All of the protocols that the broker service exposes
	MessagingProtocols *[]Endpoint `json:"messagingProtocols,omitempty"`
	MsgVpnName         *MsgVpnName `json:"msgVpnName,omitempty"`

	// The internal name of an object. Characters you can use in the name are restricted to: A-Z0-9._-. Once the object is created the internal name can not be changed
	Name                            CommonName                       `json:"name"`
	ServiceClassDisplayedAttributes *ServiceClassDisplayedAttributes `json:"serviceClassDisplayedAttributes,omitempty"`
	ServiceClassId                  *string                          `json:"serviceClassId,omitempty"`

	// id as used/issued by the back end apis, alphanumeric characters only
	ServiceId     CommonSolaceCloudObjectId `json:"serviceId"`
	ServiceName   *string                   `json:"serviceName,omitempty"`
	ServiceTypeId *string                   `json:"serviceTypeId,omitempty"`
}

// EnvironmentService defines model for EnvironmentService.
type EnvironmentService struct {
	// The internal name of an object. Characters you can use in the name are restricted to: A-Z0-9._-. Once the object is created the internal name can not be changed
	Environment *CommonName `json:"environment,omitempty"`

	// provides information about a service in the Solace Cloud account.
	Service *Service `json:"service,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	ErrorId *string             `json:"errorId,omitempty"`
	Message *string             `json:"message,omitempty"`
	Meta    *ErrorResponse_Meta `json:"meta,omitempty"`
}

// ErrorResponse_Meta defines model for ErrorResponse.Meta.
type ErrorResponse_Meta struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// EventAPIProduct defines model for EventAPIProduct.
type EventAPIProduct struct {
	// id as used/issued by the back end apis, alphanumeric characters only
	ChangedBy *CommonSolaceCloudObjectId `json:"changedBy,omitempty"`

	// id as used/issued by the back end apis, alphanumeric characters only
	CreatedBy   *CommonSolaceCloudObjectId `json:"createdBy,omitempty"`
	CreatedTime *CommonTimestampInteger    `json:"createdTime,omitempty"`

	// An overview of the object. Include key information about the object that is not captured by other fields..
	Description *CommonDescription `json:"description,omitempty"`

	// id as used/issued by the back end apis, alphanumeric characters only
	Id             CommonSolaceCloudObjectId `json:"id"`
	Name           string                    `json:"name"`
	NumberOfEvents *int64                    `json:"numberOfEvents,omitempty"`
	Published      *bool                     `json:"published,omitempty"`
	PublishedTime  *CommonTimestampInteger   `json:"publishedTime,omitempty"`
	RestUrlJson    *CommonURL                `json:"restUrlJson,omitempty"`
	RestUrlYaml    *CommonURL                `json:"restUrlYaml,omitempty"`
	ServerProtocol *string                   `json:"serverProtocol,omitempty"`
	ServerUrl      *CommonURL                `json:"serverUrl,omitempty"`

	// An overview of the object. Include key information about the object that is not captured by other fields..
	Summary         *CommonDescription      `json:"summary,omitempty"`
	Type            *string                 `json:"type,omitempty"`
	UnpublishedTime *CommonTimestampInteger `json:"unpublishedTime,omitempty"`
	UpdatedTime     *CommonTimestampInteger `json:"updatedTime,omitempty"`
	Version         *CommonVersion          `json:"version,omitempty"`

	// id as used/issued by the back end apis, alphanumeric characters only
	VirtualBrokerId *CommonSolaceCloudObjectId `json:"virtualBrokerId,omitempty"`
	WebsiteUrl      *CommonURL                 `json:"websiteUrl,omitempty"`
}

// EventAPIProductList defines model for EventAPIProductList.
type EventAPIProductList = []EventAPIProduct

// History defines model for History.
type History struct {
	// UNIX timestamp when auditable event occurred
	At          *float32          `json:"at,omitempty"`
	Operation   *HistoryOperation `json:"operation,omitempty"`
	RequestBody *interface{}      `json:"requestBody,omitempty"`

	// the request URI
	RequestURI   *string `json:"requestURI,omitempty"`
	ResponseCode *int64  `json:"responseCode,omitempty"`
	Title        *string `json:"title,omitempty"`
	User         *string `json:"user,omitempty"`
}

// HistoryOperation defines model for History.Operation.
type HistoryOperation string

// ImporterConfiguration defines model for ImporterConfiguration.
type ImporterConfiguration struct {
	AttributeMap *[]struct {
		// Arbitrary name/value pairs associated with an API product, team, developer or app.
		Attributes *Attributes `json:"attributes,omitempty"`

		// The internal name of an object. Characters you can use in the name are restricted to: A-Z0-9._-. Once the object is created the internal name can not be changed
		Name *CommonName `json:"name,omitempty"`
	} `json:"attributeMap,omitempty"`

	// Friendly name of an object for display in UIs, Developer Portals. Can be changed after object creation
	DisplayName CommonDisplayName `json:"displayName"`

	// an array of ids that an importer will apply to the issues against theexternal system
	Filter *[]CommonName `json:"filter,omitempty"`

	// The internal name of an object. Characters you can use in the name are restricted to: A-Z0-9._-. Once the object is created the internal name can not be changed
	ImporterType *CommonName `json:"importerType,omitempty"`

	// The internal name of an object. Characters you can use in the name are restricted to: A-Z0-9._-. Once the object is created the internal name can not be changed
	Name CommonName `json:"name"`
}

// ImporterInfo defines model for ImporterInfo.
type ImporterInfo struct {
	// An overview of the object. Include key information about the object that is not captured by other fields..
	AttributeMapDescription *CommonDescription `json:"attributeMapDescription,omitempty"`

	// An overview of the object. Include key information about the object that is not captured by other fields..
	Description *CommonDescription `json:"description,omitempty"`

	// An overview of the object. Include key information about the object that is not captured by other fields..
	FilterDescription *CommonDescription `json:"filterDescription,omitempty"`

	// The internal name of an object. Characters you can use in the name are restricted to: A-Z0-9._-. Once the object is created the internal name can not be changed
	Name *CommonName `json:"name,omitempty"`
}

// Job defines model for Job.
type Job struct {
	// App Response Object - includes protocol binding information and app premissions. An app associated with a developer. Associates the app with an API product, and auto-generates an API credentials for the app to use.
	App            *AppResponse `json:"app,omitempty"`
	Id             string       `json:"id"`
	InstanceName   *string      `json:"instanceName,omitempty"`
	LastFinishedAt *time.Time   `json:"lastFinishedAt,omitempty"`
	LastRunAt      *time.Time   `json:"lastRunAt,omitempty"`
	Name           string       `json:"name"`
	NextRunAt      *time.Time   `json:"nextRunAt,omitempty"`
	Result         *interface{} `json:"result,omitempty"`
	Status         *JobStatus   `json:"status,omitempty"`
}

// JobStatus defines model for Job.Status.
type JobStatus string

// meta information of an object. Will be returned by some resources. Can be set when patching or creating an object. Auto generated if not set.
type Meta struct {
	// Arbitrary name/value pairs associated with an API product, team, developer or app.
	Attributes *Attributes `json:"attributes,omitempty"`

	// The date and time the object was last modified
	Created     *float32             `json:"created,omitempty"`
	CreatedBy   *CommonUserName      `json:"createdBy,omitempty"`
	DerivedFrom *MetaEntityReference `json:"derivedFrom,omitempty"`

	// The date and time the object was last modified
	LastModified   *float32        `json:"lastModified,omitempty"`
	LastModifiedBy *CommonUserName `json:"lastModifiedBy,omitempty"`

	// The lifecycle stage of the entity - from draft to released to deprecated to retired. New entities default to 'released' stage if the stage is omitted. Entitites in 'draft' stage can not be referenced by other entities. Entities can transition from 'draft' to 'released' by providing the new stage in an update and once 'released' can be referenced by other entities. Once 'released' an entity can not go back to 'draft' stage. 'released' entities can be 'depcrecated' which means existing references are still valid however new referenceds to this entity can not be created. 'deprecated' stage can be moved back to 'released' stage. An entity in 'deprecated' stagecan be moved to 'retired' which means all references to this entity will be removed. 'once' retired the stage of the entity can no longer be changed.
	Stage   *MetaEntityStage `json:"stage,omitempty"`
	Version *CommonVersion   `json:"version,omitempty"`
}

// MetaEntityReference defines model for MetaEntityReference.
type MetaEntityReference struct {
	// Friendly name of an object for display in UIs, Developer Portals. Can be changed after object creation
	DisplayName *CommonDisplayNameReadOnly `json:"displayName,omitempty"`
	Name        *string                    `json:"name,omitempty"`

	// a version number in semver (Semantic Versioning) format
	Revision *SemVerReadOnly `json:"revision,omitempty"`
}

// The lifecycle stage of the entity - from draft to released to deprecated to retired. New entities default to 'released' stage if the stage is omitted. Entitites in 'draft' stage can not be referenced by other entities. Entities can transition from 'draft' to 'released' by providing the new stage in an update and once 'released' can be referenced by other entities. Once 'released' an entity can not go back to 'draft' stage. 'released' entities can be 'depcrecated' which means existing references are still valid however new referenceds to this entity can not be created. 'deprecated' stage can be moved back to 'released' stage. An entity in 'deprecated' stagecan be moved to 'retired' which means all references to this entity will be removed. 'once' retired the stage of the entity can no longer be changed.
type MetaEntityStage string

// MsgVpnAclProfile defines model for MsgVpnAclProfile.
type MsgVpnAclProfile struct {
	// The internal name of an object. Characters you can use in the name are restricted to: A-Z0-9._-. Once the object is created the internal name can not be changed
	AclProfileName CommonName `json:"aclProfileName"`

	// Arbitrary name/value pairs associated with an API product, team, developer or app.
	Attributes                  *Attributes                               `json:"attributes,omitempty"`
	ClientConnectDefaultAction  ACLAction                                 `json:"clientConnectDefaultAction"`
	ClientConnectExceptions     *[]MsgVpnAclProfileClientConnectException `json:"clientConnectExceptions,omitempty"`
	Environments                []CommonName                              `json:"environments"`
	PublishExceptions           *[]MsgVpnAclProfilePublishException       `json:"publishExceptions,omitempty"`
	PublishTopicDefaultAction   ACLAction                                 `json:"publishTopicDefaultAction"`
	SubscribeExceptions         *[]MsgVpnAclProfileSubscribeException     `json:"subscribeExceptions,omitempty"`
	SubscribeTopicDefaultAction ACLAction                                 `json:"subscribeTopicDefaultAction"`

	// Set of tags
	Tags *Tags `json:"tags,omitempty"`
}

// MsgVpnAclProfileClientConnectException defines model for MsgVpnAclProfileClientConnectException.
type MsgVpnAclProfileClientConnectException struct {
	// Arbitrary name/value pairs associated with an API product, team, developer or app.
	Attributes                    *Attributes  `json:"attributes,omitempty"`
	ClientConnectExceptionAddress string       `json:"clientConnectExceptionAddress"`
	Environments                  []CommonName `json:"environments"`

	// Set of tags
	Tags *Tags `json:"tags,omitempty"`
}

// MsgVpnAclProfilePublishException defines model for MsgVpnAclProfilePublishException.
type MsgVpnAclProfilePublishException struct {
	// Arbitrary name/value pairs associated with an API product, team, developer or app.
	Attributes                  *Attributes  `json:"attributes,omitempty"`
	Environments                []CommonName `json:"environments"`
	PublishTopicException       CommonTopic  `json:"publishTopicException"`
	PublishTopicExceptionSyntax TopicSyntax  `json:"publishTopicExceptionSyntax"`

	// Set of tags
	Tags *Tags `json:"tags,omitempty"`
}

// MsgVpnAclProfileSubscribeException defines model for MsgVpnAclProfileSubscribeException.
type MsgVpnAclProfileSubscribeException struct {
	// Arbitrary name/value pairs associated with an API product, team, developer or app.
	Attributes                    *Attributes  `json:"attributes,omitempty"`
	Environments                  []CommonName `json:"environments"`
	SubscribeTopicException       CommonTopic  `json:"subscribeTopicException"`
	SubscribeTopicExceptionSyntax TopicSyntax  `json:"subscribeTopicExceptionSyntax"`

	// Set of tags
	Tags *Tags `json:"tags,omitempty"`
}

// MsgVpnAttributes defines model for MsgVpnAttributes.
type MsgVpnAttributes struct {
	AuthenticationBasicEnabled      string `json:"authenticationBasicEnabled"`
	AuthenticationClientCertEnabled string `json:"authenticationClientCertEnabled"`
}

// MsgVpnAuthorizationGroup defines model for MsgVpnAuthorizationGroup.
type MsgVpnAuthorizationGroup struct {
	// The internal name of an object. Characters you can use in the name are restricted to: A-Z0-9._-. Once the object is created the internal name can not be changed
	AclProfileName CommonName `json:"aclProfileName"`

	// Arbitrary name/value pairs associated with an API product, team, developer or app.
	Attributes *Attributes `json:"attributes,omitempty"`

	// The internal name of an object. Characters you can use in the name are restricted to: A-Z0-9._-. Once the object is created the internal name can not be changed
	AuthorizationGroupName CommonName `json:"authorizationGroupName"`

	// The internal name of an object. Characters you can use in the name are restricted to: A-Z0-9._-. Once the object is created the internal name can not be changed
	ClientProfileName CommonName   `json:"clientProfileName"`
	Enabled           bool         `json:"enabled"`
	Environments      []CommonName `json:"environments"`

	// Set of tags
	Tags *Tags `json:"tags,omitempty"`
}

// MsgVpnClientProfile defines model for MsgVpnClientProfile.
type MsgVpnClientProfile struct {
	AllowGuaranteedEndpointCreateEnabled bool `json:"allowGuaranteedEndpointCreateEnabled"`
	AllowGuaranteedMsgReceiveEnabled     bool `json:"allowGuaranteedMsgReceiveEnabled"`
	AllowGuaranteedMsgSendEnabled        bool `json:"allowGuaranteedMsgSendEnabled"`
	AllowTransactedSessionsEnabled       bool `json:"allowTransactedSessionsEnabled"`

	// Arbitrary name/value pairs associated with an API product, team, developer or app.
	Attributes *Attributes `json:"attributes,omitempty"`

	// The internal name of an object. Characters you can use in the name are restricted to: A-Z0-9._-. Once the object is created the internal name can not be changed
	ClientProfileName  CommonName   `json:"clientProfileName"`
	CompressionEnabled bool         `json:"compressionEnabled"`
	Environments       []CommonName `json:"environments"`

	// Set of tags
	Tags *Tags `json:"tags,omitempty"`
}

// MsgVpnClientUsername defines model for MsgVpnClientUsername.
type MsgVpnClientUsername struct {
	// The internal name of an object. Characters you can use in the name are restricted to: A-Z0-9._-. Once the object is created the internal name can not be changed
	AclProfileName CommonName `json:"aclProfileName"`

	// The internal name of an object. Characters you can use in the name are restricted to: A-Z0-9._-. Once the object is created the internal name can not be changed
	ClientProfileName CommonName `json:"clientProfileName"`

	// The internal name of an object. Characters you can use in the name are restricted to: A-Z0-9._-. Once the object is created the internal name can not be changed
	ClientUsername CommonName   `json:"clientUsername"`
	Enabled        bool         `json:"enabled"`
	Environments   []CommonName `json:"environments"`

	// The internal name of an object. Characters you can use in the name are restricted to: A-Z0-9._-. Once the object is created the internal name can not be changed
	Password CommonName `json:"password"`
}

// MsgVpnClientUsernameArray defines model for MsgVpnClientUsernameArray.
type MsgVpnClientUsernameArray = []MsgVpnClientUsername

// MsgVpnMqttSession defines model for MsgVpnMqttSession.
type MsgVpnMqttSession struct {
	// Arbitrary name/value pairs associated with an API product, team, developer or app.
	Attributes   *Attributes  `json:"attributes,omitempty"`
	Enabled      bool         `json:"enabled"`
	Environments []CommonName `json:"environments"`

	// The internal name of an object. Characters you can use in the name are restricted to: A-Z0-9._-. Once the object is created the internal name can not be changed
	MqttSessionClientId      CommonName                                `json:"mqttSessionClientId"`
	MqttSessionVirtualRouter MsgVpnMqttSessionMqttSessionVirtualRouter `json:"mqttSessionVirtualRouter"`

	// The internal name of an object. Characters you can use in the name are restricted to: A-Z0-9._-. Once the object is created the internal name can not be changed
	Owner                  *CommonName `json:"owner,omitempty"`
	QueueMaxMsgSpoolUsage  *float32    `json:"queueMaxMsgSpoolUsage,omitempty"`
	QueueMaxTtl            *float32    `json:"queueMaxTtl,omitempty"`
	QueueRespectTtlEnabled *bool       `json:"queueRespectTtlEnabled,omitempty"`

	// Set of tags
	Tags *Tags `json:"tags,omitempty"`
}

// MsgVpnMqttSessionMqttSessionVirtualRouter defines model for MsgVpnMqttSession.MqttSessionVirtualRouter.
type MsgVpnMqttSessionMqttSessionVirtualRouter string

// MsgVpnName defines model for MsgVpnName.
type MsgVpnName = string

// MsgVpnQueue defines model for MsgVpnQueue.
type MsgVpnQueue struct {
	AccessType MsgVpnQueueAccessType `json:"accessType"`

	// Arbitrary name/value pairs associated with an API product, team, developer or app.
	Attributes       *Attributes  `json:"attributes,omitempty"`
	EgressEnabled    bool         `json:"egressEnabled"`
	Environments     []CommonName `json:"environments"`
	IngressEnabled   bool         `json:"ingressEnabled"`
	MaxMsgSpoolUsage *float32     `json:"maxMsgSpoolUsage,omitempty"`
	MaxTtl           *float32     `json:"maxTtl,omitempty"`

	// The internal name of an object. Characters you can use in the name are restricted to: A-Z0-9._-. Once the object is created the internal name can not be changed
	Owner      CommonName            `json:"owner"`
	Permission MsgVpnQueuePermission `json:"permission"`

	// The internal name of an object. Characters you can use in the name are restricted to: A-Z0-9._-. Once the object is created the internal name can not be changed
	QueueName          CommonName                `json:"queueName"`
	QueueSubscriptions []MsgVpnQueueSubscription `json:"queueSubscriptions"`
	RespectTtlEnabled  *bool                     `json:"respectTtlEnabled,omitempty"`

	// Set of tags
	Tags *Tags `json:"tags,omitempty"`
}

// MsgVpnQueueAccessType defines model for MsgVpnQueue.AccessType.
type MsgVpnQueueAccessType string

// MsgVpnQueuePermission defines model for MsgVpnQueue.Permission.
type MsgVpnQueuePermission string

// MsgVpnQueueSubscription defines model for MsgVpnQueueSubscription.
type MsgVpnQueueSubscription struct {
	// Arbitrary name/value pairs associated with an API product, team, developer or app.
	Attributes        *Attributes  `json:"attributes,omitempty"`
	Environments      []CommonName `json:"environments"`
	SubscriptionTopic CommonTopic  `json:"subscriptionTopic"`

	// Set of tags
	Tags *Tags `json:"tags,omitempty"`
}

// MsgVpnRestDeliveryPoint defines model for MsgVpnRestDeliveryPoint.
type MsgVpnRestDeliveryPoint struct {
	// Arbitrary name/value pairs associated with an API product, team, developer or app.
	Attributes    *Attributes                           `json:"attributes,omitempty"`
	ClientProfile *MsgVpnClientProfile                  `json:"clientProfile,omitempty"`
	Enabled       bool                                  `json:"enabled"`
	Environments  []CommonName                          `json:"environments"`
	QueueBindings []MsgVpnRestDeliveryPointQueueBinding `json:"queueBindings"`
	Queues        []MsgVpnQueue                         `json:"queues"`
	RestConsumers []MsgVpnRestDeliveryPointRestConsumer `json:"restConsumers"`

	// The internal name of an object. Characters you can use in the name are restricted to: A-Z0-9._-. Once the object is created the internal name can not be changed
	RestDeliveryPointName CommonName `json:"restDeliveryPointName"`

	// Set of tags
	Tags *Tags `json:"tags,omitempty"`
}

// MsgVpnRestDeliveryPointQueueBinding defines model for MsgVpnRestDeliveryPointQueueBinding.
type MsgVpnRestDeliveryPointQueueBinding struct {
	// Arbitrary name/value pairs associated with an API product, team, developer or app.
	Attributes        *Attributes `json:"attributes,omitempty"`
	PostRequestTarget string      `json:"postRequestTarget"`

	// The internal name of an object. Characters you can use in the name are restricted to: A-Z0-9._-. Once the object is created the internal name can not be changed
	QueueBindingName CommonName                                   `json:"queueBindingName"`
	RequestHeaders   *[]MsgVpnRestDeliveryPointQueueBindingHeader `json:"requestHeaders,omitempty"`

	// Set of tags
	Tags *Tags `json:"tags,omitempty"`
}

// MsgVpnRestDeliveryPointQueueBindingHeader defines model for MsgVpnRestDeliveryPointQueueBindingHeader.
type MsgVpnRestDeliveryPointQueueBindingHeader struct {
	// Arbitrary name/value pairs associated with an API product, team, developer or app.
	Attributes  *Attributes `json:"attributes,omitempty"`
	HeaderName  string      `json:"headerName"`
	HeaderValue string      `json:"headerValue"`

	// Set of tags
	Tags *Tags `json:"tags,omitempty"`
}

// MsgVpnRestDeliveryPointRestConsumer defines model for MsgVpnRestDeliveryPointRestConsumer.
type MsgVpnRestDeliveryPointRestConsumer struct {
	// Arbitrary name/value pairs associated with an API product, team, developer or app.
	Attributes                      *Attributes                                              `json:"attributes,omitempty"`
	AuthenticationHttpBasicPassword *string                                                  `json:"authenticationHttpBasicPassword,omitempty"`
	AuthenticationHttpBasicUsername *string                                                  `json:"authenticationHttpBasicUsername,omitempty"`
	AuthenticationHttpHeaderName    *string                                                  `json:"authenticationHttpHeaderName,omitempty"`
	AuthenticationHttpHeaderValue   *string                                                  `json:"authenticationHttpHeaderValue,omitempty"`
	AuthenticationScheme            *MsgVpnRestDeliveryPointRestConsumerAuthenticationScheme `json:"authenticationScheme,omitempty"`
	Enabled                         bool                                                     `json:"enabled"`
	HttpMethod                      *MsgVpnRestDeliveryPointRestConsumerHttpMethod           `json:"httpMethod,omitempty"`
	MaxPostWaitTime                 *int                                                     `json:"maxPostWaitTime,omitempty"`
	OutgoingConnectionCount         *int                                                     `json:"outgoingConnectionCount,omitempty"`
	RemoteHost                      *string                                                  `json:"remoteHost,omitempty"`
	RemotePort                      *int                                                     `json:"remotePort,omitempty"`

	// The internal name of an object. Characters you can use in the name are restricted to: A-Z0-9._-. Once the object is created the internal name can not be changed
	RestConsumerName CommonName `json:"restConsumerName"`
	RetryDelay       *int       `json:"retryDelay,omitempty"`

	// Set of tags
	Tags       *Tags                                                      `json:"tags,omitempty"`
	TlsEnabled *bool                                                      `json:"tlsEnabled,omitempty"`
	TrustedCNs *[]MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonName `json:"trustedCNs,omitempty"`
}

// MsgVpnRestDeliveryPointRestConsumerAuthenticationScheme defines model for MsgVpnRestDeliveryPointRestConsumerAuthenticationScheme.
type MsgVpnRestDeliveryPointRestConsumerAuthenticationScheme string

// MsgVpnRestDeliveryPointRestConsumerHttpMethod defines model for MsgVpnRestDeliveryPointRestConsumerHttpMethod.
type MsgVpnRestDeliveryPointRestConsumerHttpMethod string

// MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonName defines model for MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonName.
type MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonName struct {
	// Arbitrary name/value pairs associated with an API product, team, developer or app.
	Attributes *Attributes `json:"attributes,omitempty"`

	// Set of tags
	Tags                 *Tags  `json:"tags,omitempty"`
	TlsTrustedCommonName string `json:"tlsTrustedCommonName"`
}

// OrganizationImporter defines model for OrganizationImporter.
type OrganizationImporter = map[string]interface{}

// OrganizationIntegrations defines model for OrganizationIntegrations.
type OrganizationIntegrations struct {
	Importers     *[]OrganizationImporter `json:"importers,omitempty"`
	Notifications *OrganizationNotifier   `json:"notifications,omitempty"`
}

// OrganizationNotifier defines model for OrganizationNotifier.
type OrganizationNotifier struct {
	Authentication interface{} `json:"authentication"`
	BaseUrl        CommonURL   `json:"baseUrl"`
}

// OrganizationRepresentation defines model for OrganizationRepresentation.
type OrganizationRepresentation struct {
	CloudToken   *interface{}              `json:"cloud-token,omitempty"`
	Integrations *OrganizationIntegrations `json:"integrations,omitempty"`

	// The internal name of an object. Characters you can use in the name are restricted to: A-Z0-9._-. Once the object is created the internal name can not be changed
	Name CommonName `json:"name"`

	// Specifies how requests to the SEMPv2 Management API are authenticated, defaults to BasicAuth. If APIKey is specified the username returned in the Services/Environments response is used as API Key.
	SempV2Authentication *SempV2Authentication `json:"sempV2Authentication,omitempty"`

	// The type of PS+ service registry that is used to look up broker configuration endpoints and capabilities. Defaults to "platform" if omitted which means PS+ services are looked up directly via the Solace Cloud Platform API. "eventportal" uses the messaging services configured in Event Portal 2.0 which allows addition of self-managed brokers.
	ServiceRegistry      *ServiceRegistryType   `json:"serviceRegistry,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// OrganizationResponse defines model for OrganizationResponse.
type OrganizationResponse struct {
	CloudToken   *interface{}              `json:"cloud-token,omitempty"`
	Integrations *OrganizationIntegrations `json:"integrations,omitempty"`

	// The internal name of an object. Characters you can use in the name are restricted to: A-Z0-9._-. Once the object is created the internal name can not be changed
	Name CommonName `json:"name"`

	// Specifies how requests to the SEMPv2 Management API are authenticated, defaults to BasicAuth. If APIKey is specified the username returned in the Services/Environments response is used as API Key.
	SempV2Authentication *SempV2Authentication `json:"sempV2Authentication,omitempty"`

	// The type of PS+ service registry that is used to look up broker configuration endpoints and capabilities. Defaults to "platform" if omitted which means PS+ services are looked up directly via the Solace Cloud Platform API. "eventportal" uses the messaging services configured in Event Portal 2.0 which allows addition of self-managed brokers.
	ServiceRegistry *ServiceRegistryType `json:"serviceRegistry,omitempty"`
}

// OrganizationStatus defines model for OrganizationStatus.
type OrganizationStatus struct {
	CloudConnectivity       *bool `json:"cloudConnectivity,omitempty"`
	EventPortalConnectivity *bool `json:"eventPortalConnectivity,omitempty"`
}

// lists all the publish and subscribe topics an app has access to. Restrictions on   topic elements are taken into account.
type Permissions struct {
	Publish *[]map[string]struct {
		ChannelId   *string       `json:"channelId,omitempty"`
		IsChannel   *bool         `json:"isChannel,omitempty"`
		Permissions []CommonTopic `json:"permissions"`
	}
	Subscribe *[]map[string]struct {
		ChannelId   *string       `json:"channelId,omitempty"`
		IsChannel   *bool         `json:"isChannel,omitempty"`
		Permissions []CommonTopic `json:"permissions"`
	}
}

// Protocol defines model for Protocol.
type Protocol struct {
	Name    ProtocolName   `json:"name"`
	Version *CommonVersion `json:"version,omitempty"`
}

// ProtocolName defines model for Protocol.Name.
type ProtocolName string

// QueueStatus defines model for QueueStatus.
type QueueStatus struct {
	ConsumerCount    *float32 `json:"consumerCount,omitempty"`
	MessagesQueued   *int     `json:"messagesQueued,omitempty"`
	MessagesQueuedMB *float32 `json:"messagesQueuedMB,omitempty"`

	// The internal name of an object. Characters you can use in the name are restricted to: A-Z0-9._-. Once the object is created the internal name can not be changed
	Name *CommonName `json:"name,omitempty"`
}

// Secret defines model for Secret.
type Secret struct {
	ConsumerKey    string  `json:"consumerKey"`
	ConsumerSecret *string `json:"consumerSecret,omitempty"`
}

// a version number in semver (Semantic Versioning) format
type SemVer = string

// a version number in semver (Semantic Versioning) format
type SemVerReadOnly = string

// Specifies how requests to the SEMPv2 Management API are authenticated, defaults to BasicAuth. If APIKey is specified the username returned in the Services/Environments response is used as API Key.
type SempV2Authentication struct {
	ApiKeyLocation *SempV2AuthenticationApiKeyLocation `json:"apiKeyLocation,omitempty"`

	// the name of the query parameter or HTTP header for submitting the API Key
	ApiKeyName *string                      `json:"apiKeyName,omitempty"`
	AuthType   SempV2AuthenticationAuthType `json:"authType"`
}

// SempV2AuthenticationApiKeyLocation defines model for SempV2Authentication.ApiKeyLocation.
type SempV2AuthenticationApiKeyLocation string

// SempV2AuthenticationAuthType defines model for SempV2Authentication.AuthType.
type SempV2AuthenticationAuthType string

// provides information about a service in the Solace Cloud account.
type Service struct {
	AccountingLimits   *[]AccountingLimit      `json:"accountingLimits,omitempty"`
	AdminProgress      *string                 `json:"adminProgress,omitempty"`
	AdminState         *string                 `json:"adminState,omitempty"`
	Created            *CommonTimestampInteger `json:"created,omitempty"`
	CreationState      *string                 `json:"creationState,omitempty"`
	DatacenterId       *string                 `json:"datacenterId,omitempty"`
	DatacenterProvider *string                 `json:"datacenterProvider,omitempty"`

	// id as used/issued by the back end apis, alphanumeric characters only
	InfrastructureId *CommonSolaceCloudObjectId `json:"infrastructureId,omitempty"`
	Locked           *bool                      `json:"locked,omitempty"`

	// The protocols supported by this service
	MessagingProtocols              *[]Endpoint                      `json:"messagingProtocols,omitempty"`
	MessagingStorage                *int64                           `json:"messagingStorage,omitempty"`
	MsgVpnAttributes                *MsgVpnAttributes                `json:"msgVpnAttributes,omitempty"`
	MsgVpnName                      *MsgVpnName                      `json:"msgVpnName,omitempty"`
	Name                            *string                          `json:"name,omitempty"`
	ServiceClassDisplayedAttributes *ServiceClassDisplayedAttributes `json:"serviceClassDisplayedAttributes,omitempty"`
	ServiceClassId                  *string                          `json:"serviceClassId,omitempty"`

	// id as used/issued by the back end apis, alphanumeric characters only
	ServiceId        *CommonSolaceCloudObjectId `json:"serviceId,omitempty"`
	ServicePackageId *string                    `json:"servicePackageId,omitempty"`
	ServiceStage     *string                    `json:"serviceStage,omitempty"`
	ServiceTypeId    *string                    `json:"serviceTypeId,omitempty"`
	Timestamp        *CommonTimestampInteger    `json:"timestamp,omitempty"`
	Type             *string                    `json:"type,omitempty"`

	// id as used/issued by the back end apis, alphanumeric characters only
	UserId *CommonSolaceCloudObjectId `json:"userId,omitempty"`
}

// ServiceClassDisplayedAttributes defines model for ServiceClassDisplayedAttributes.
type ServiceClassDisplayedAttributes struct {
	Clients              string `json:"Clients"`
	HighAvailability     string `json:"High Availability"`
	MessageBrokerTenancy string `json:"Message Broker Tenancy"`
	NetworkSpeed         string `json:"Network Speed"`
	NetworkUsage         string `json:"Network Usage"`
	Queues               string `json:"Queues"`
	Storage              string `json:"Storage"`
}

// The type of PS+ service registry that is used to look up broker configuration endpoints and capabilities. Defaults to "platform" if omitted which means PS+ services are looked up directly via the Solace Cloud Platform API. "eventportal" uses the messaging services configured in Event Portal 2.0 which allows addition of self-managed brokers.
type ServiceRegistryType string

// String2MB defines model for String2MB.
type String2MB = string

// SuccessResponse defines model for SuccessResponse.
type SuccessResponse struct {
	Id      *string `json:"id,omitempty"`
	Message *string `json:"message,omitempty"`
}

// A tag on an entity
type Tag = interface{}

// Set of tags
type Tags = []Tag

// A profile of a team. After the team is created, an app can be registered and API credentials are created
type Team struct {
	// Arbitrary name/value pairs associated with an API product, team, developer or app.
	Attributes *Attributes `json:"attributes,omitempty"`

	// Friendly name of an object for display in UIs, Developer Portals. Can be changed after object creation
	DisplayName CommonDisplayName `json:"displayName"`

	// The internal name of an object. Characters you can use in the name are restricted to: A-Z0-9._-. Once the object is created the internal name can not be changed
	Name CommonName `json:"name"`
}

// Used for PATCH operation, A profile of a team. After the team is created, an app can be registered and API credentials are created
type TeamPatch struct {
	// Arbitrary name/value pairs associated with an API product, team, developer or app.
	Attributes *Attributes `json:"attributes,omitempty"`

	// Friendly name of an object for display in UIs, Developer Portals. Can be changed after object creation
	DisplayName *CommonDisplayName `json:"displayName,omitempty"`
}

// Threshold defines model for Threshold.
type Threshold struct {
	Type  string `json:"type"`
	Value string `json:"value"`
}

// TopicSyntax defines model for TopicSyntax.
type TopicSyntax string

// Version defines model for Version.
type Version = string

// WebHook defines model for WebHook.
type WebHook struct {
	Authentication *WebHookAuth `json:"authentication,omitempty"`

	// environments that this webhook serves, if absent webhook will be used for all environments
	Environments *[]CommonName `json:"environments,omitempty"`
	Method       WebHookMethod `json:"method"`
	Mode         *WebHookMode  `json:"mode,omitempty"`

	// The internal name of an object. Characters you can use in the name are restricted to: A-Z0-9._-. Once the object is created the internal name can not be changed
	Name           *CommonName      `json:"name,omitempty"`
	RequestHeaders *[]WebHookHeader `json:"requestHeaders,omitempty"`

	// TLS options required to support older PS+ brokers.
	TlsOptions *WebHookTLSOptions `json:"tlsOptions,omitempty"`
	Uri        string             `json:"uri"`
}

// WebHookMethod defines model for WebHook.Method.
type WebHookMethod string

// WebHookMode defines model for WebHook.Mode.
type WebHookMode string

// WebHookAuth defines model for WebHookAuth.
type WebHookAuth interface{}

// WebHookBasicAuth defines model for WebHookBasicAuth.
type WebHookBasicAuth struct {
	AuthMethod *WebHookBasicAuthAuthMethod `json:"authMethod,omitempty"`
	Password   string                      `json:"password"`
	Username   CommonUserName              `json:"username"`
}

// WebHookBasicAuthAuthMethod defines model for WebHookBasicAuth.AuthMethod.
type WebHookBasicAuthAuthMethod string

// An arbitrary HTTP header applied to the WebHook
type WebHookHeader struct {
	HeaderName  string `json:"headerName"`
	HeaderValue string `json:"headerValue"`
}

// A HTTP header used for authentication
type WebHookHeaderAuth struct {
	AuthMethod  *WebHookHeaderAuthAuthMethod `json:"authMethod,omitempty"`
	HeaderName  string                       `json:"headerName"`
	HeaderValue string                       `json:"headerValue"`
}

// WebHookHeaderAuthAuthMethod defines model for WebHookHeaderAuth.AuthMethod.
type WebHookHeaderAuthAuthMethod string

// Name and display name attribute of a webhook
type WebHookNameList = []WebHookNames

// Name and display name attribute of a webhook
type WebHookNames struct {
	Name *string    `json:"name,omitempty"`
	Uri  *CommonURL `json:"uri,omitempty"`
}

// WebHookStatus defines model for WebHookStatus.
type WebHookStatus struct {
	// description if the webhook is down, otherwise empty string
	FailureReason *string `json:"failureReason,omitempty"`

	// time of last failure (seconds from epoch)
	LastFailureTime  *int     `json:"lastFailureTime,omitempty"`
	MessagesQueued   *int     `json:"messagesQueued,omitempty"`
	MessagesQueuedMB *float32 `json:"messagesQueuedMB,omitempty"`
	Name             *string  `json:"name,omitempty"`

	// indicates if the webhook is up and running
	Up  *bool   `json:"up,omitempty"`
	Uri *string `json:"uri,omitempty"`
}

// TLS options required to support older PS+ brokers.
type WebHookTLSOptions struct {
	// The Trusted Common Names for the REST Consumer are used by encrypted transports to verify the name in the certificate presented by the remote REST consumer. They must include the common name of the remote REST consumer's server certificate.
	TlsTrustedCommonNames *[]string `json:"tlsTrustedCommonNames,omitempty"`
}

// Arbitrary name/value pairs associated with an API product, team, developer or app.
type Attributes = []struct {
	// Attribute name, access is a special value as it governs access control to the product.
	Name string `json:"name"`

	// Value of the attribute.
	Value string `json:"value"`
}

// ApiListFormat defines model for api_list_format.
type ApiListFormat string

// The internal name of an object. Characters you can use in the name are restricted to: A-Z0-9._-. Once the object is created the internal name can not be changed
type ApiName = CommonName

// ApiProductName defines model for api_product_name.
type ApiProductName = string

// AppName defines model for app_name.
type AppName = string

// ApplicationDomainId defines model for application_domain_id.
type ApplicationDomainId = string

// Attribute name, access is a special value as it governs access control to the product.
type AttributeName = string

// The internal name of an object. Characters you can use in the name are restricted to: A-Z0-9._-. Once the object is created the internal name can not be changed
type ConfigSetName = CommonName

// ConfigSnapshotRevision defines model for config_snapshot_revision.
type ConfigSnapshotRevision = int

// ConsumerKey defines model for consumer_key.
type ConsumerKey = string

// CreateMode defines model for create_mode.
type CreateMode string

// DeveloperUsername defines model for developer_username.
type DeveloperUsername = CommonUserName

// EnvName defines model for env_name.
type EnvName = string

// EventApiProductId defines model for event_api_product_id.
type EventApiProductId = string

// Filter defines model for filter.
type Filter = string

// IfMatchHeader defines model for ifMatchHeader.
type IfMatchHeader = string

// ImporterJobName defines model for importer_job_name.
type ImporterJobName = string

// Organization defines model for organization.
type Organization = string

// PageNumber defines model for page_number.
type PageNumber = int32

// PageSize defines model for page_size.
type PageSize = int32

// a version number in semver (Semantic Versioning) format
type Semver = SemVer

// SortDirection defines model for sort_direction.
type SortDirection string

// SortFieldName defines model for sort_field_name.
type SortFieldName = string

// TeamName defines model for team_name.
type TeamName = string

// WebhookName defines model for webhook_name.
type WebhookName = string

// BadRequest defines model for BadRequest.
type BadRequest = ErrorResponse

// Conflict defines model for Conflict.
type Conflict = ErrorResponse

// Forbidden defines model for Forbidden.
type Forbidden = ErrorResponse

// GatewayTimeout defines model for GatewayTimeout.
type GatewayTimeout = ErrorResponse

// InternalServerError defines model for InternalServerError.
type InternalServerError = ErrorResponse

// NotAcceptable defines model for NotAcceptable.
type NotAcceptable = ErrorResponse

// NotFound defines model for NotFound.
type NotFound = ErrorResponse

// PreconditionFailed defines model for PreconditionFailed.
type PreconditionFailed = ErrorResponse

// ServiceUnavailable defines model for ServiceUnavailable.
type ServiceUnavailable = ErrorResponse

// TooManyRequests defines model for TooManyRequests.
type TooManyRequests = ErrorResponse

// Unauthorized defines model for Unauthorized.
type Unauthorized = ErrorResponse

// UnsupportedMediaType defines model for UnsupportedMediaType.
type UnsupportedMediaType = ErrorResponse

// ListOrganizationsParams defines parameters for ListOrganizations.
type ListOrganizationsParams struct {
	// The number of items to get per page. Min: 1 Max: 100
	PageSize *PageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// The page number to get. Min: 1
	PageNumber *PageNumber `form:"pageNumber,omitempty" json:"pageNumber,omitempty"`

	// name of a field to sort on
	SortFieldName *SortFieldName `form:"sortFieldName,omitempty" json:"sortFieldName,omitempty"`

	// sort direction
	SortDirection *ListOrganizationsParamsSortDirection `form:"sortDirection,omitempty" json:"sortDirection,omitempty"`
}

// ListOrganizationsParamsSortDirection defines parameters for ListOrganizations.
type ListOrganizationsParamsSortDirection string

// CreateOrganizationJSONBody defines parameters for CreateOrganization.
type CreateOrganizationJSONBody = OrganizationRepresentation

// UpdateOrganizationJSONBody defines parameters for UpdateOrganization.
type UpdateOrganizationJSONBody = OrganizationRepresentation

// UpdateOrganizationParams defines parameters for UpdateOrganization.
type UpdateOrganizationParams struct {
	// Provide the etag value for a previous GET request of a resource on update (PATCH) in order to avoid "lost updates"
	IfMatch *IfMatchHeader `json:"If-Match,omitempty"`
}

// ListApiProductsParams defines parameters for ListApiProducts.
type ListApiProductsParams struct {
	// The number of items to get per page. Min: 1 Max: 100
	PageSize *PageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// The page number to get. Min: 1
	PageNumber *PageNumber `form:"pageNumber,omitempty" json:"pageNumber,omitempty"`

	// name of a field to sort on
	SortFieldName *SortFieldName `form:"sortFieldName,omitempty" json:"sortFieldName,omitempty"`

	// sort direction
	SortDirection *ListApiProductsParamsSortDirection `form:"sortDirection,omitempty" json:"sortDirection,omitempty"`

	// specify search terms to filter results on, multiple search terms can be supplied. Search will return results matching any of the terms (OR). Enclose search terms in quotes to limit results to recoirds matching ALL terms (AND).)
	Filter *Filter `form:"filter,omitempty" json:"filter,omitempty"`
}

// ListApiProductsParamsSortDirection defines parameters for ListApiProducts.
type ListApiProductsParamsSortDirection string

// CreateApiProductJSONBody defines parameters for CreateApiProduct.
type CreateApiProductJSONBody = APIProduct

// UpdateApiProductJSONBody defines parameters for UpdateApiProduct.
type UpdateApiProductJSONBody = APIProductPatch

// UpdateApiProductParams defines parameters for UpdateApiProduct.
type UpdateApiProductParams struct {
	// Provide the etag value for a previous GET request of a resource on update (PATCH) in order to avoid "lost updates"
	IfMatch *IfMatchHeader `json:"If-Match,omitempty"`
}

// ListApiProductApisParams defines parameters for ListApiProductApis.
type ListApiProductApisParams struct {
	// The number of items to get per page. Min: 1 Max: 100
	PageSize *PageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// The page number to get. Min: 1
	PageNumber *PageNumber `form:"pageNumber,omitempty" json:"pageNumber,omitempty"`

	// name of a field to sort on
	SortFieldName *SortFieldName `form:"sortFieldName,omitempty" json:"sortFieldName,omitempty"`

	// sort direction
	SortDirection *ListApiProductApisParamsSortDirection `form:"sortDirection,omitempty" json:"sortDirection,omitempty"`
}

// ListApiProductApisParamsSortDirection defines parameters for ListApiProductApis.
type ListApiProductApisParamsSortDirection string

// GetApiProductApiSpecificationParams defines parameters for GetApiProductApiSpecification.
type GetApiProductApiSpecificationParams struct {
	Format *GetApiProductApiSpecificationParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// GetApiProductApiSpecificationParamsFormat defines parameters for GetApiProductApiSpecification.
type GetApiProductApiSpecificationParamsFormat string

// ListAppReferencesToAPIProductsParams defines parameters for ListAppReferencesToAPIProducts.
type ListAppReferencesToAPIProductsParams struct {
	// The number of items to get per page. Min: 1 Max: 100
	PageSize *PageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// The page number to get. Min: 1
	PageNumber *PageNumber `form:"pageNumber,omitempty" json:"pageNumber,omitempty"`

	// name of a field to sort on
	SortFieldName *SortFieldName `form:"sortFieldName,omitempty" json:"sortFieldName,omitempty"`

	// sort direction
	SortDirection *ListAppReferencesToAPIProductsParamsSortDirection `form:"sortDirection,omitempty" json:"sortDirection,omitempty"`
}

// ListAppReferencesToAPIProductsParamsSortDirection defines parameters for ListAppReferencesToAPIProducts.
type ListAppReferencesToAPIProductsParamsSortDirection string

// UpdateApiProductAttributeParams defines parameters for UpdateApiProductAttribute.
type UpdateApiProductAttributeParams struct {
	// Provide the etag value for a previous GET request of a resource on update (PATCH) in order to avoid "lost updates"
	IfMatch *IfMatchHeader `json:"If-Match,omitempty"`
}

// CreateApiProductAttributeParams defines parameters for CreateApiProductAttribute.
type CreateApiProductAttributeParams struct {
	// Provide the etag value for a previous GET request of a resource on update (PATCH) in order to avoid "lost updates"
	IfMatch *IfMatchHeader `json:"If-Match,omitempty"`
}

// ListDerivedApiProductsParams defines parameters for ListDerivedApiProducts.
type ListDerivedApiProductsParams struct {
	// The number of items to get per page. Min: 1 Max: 100
	PageSize *PageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// The page number to get. Min: 1
	PageNumber *PageNumber `form:"pageNumber,omitempty" json:"pageNumber,omitempty"`

	// name of a field to sort on
	SortFieldName *SortFieldName `form:"sortFieldName,omitempty" json:"sortFieldName,omitempty"`

	// sort direction
	SortDirection *ListDerivedApiProductsParamsSortDirection `form:"sortDirection,omitempty" json:"sortDirection,omitempty"`
}

// ListDerivedApiProductsParamsSortDirection defines parameters for ListDerivedApiProducts.
type ListDerivedApiProductsParamsSortDirection string

// CreateDerivedApiProductJSONBody defines parameters for CreateDerivedApiProduct.
type CreateDerivedApiProductJSONBody = EntityDeriveRequest

// UpdateApiProductMetaAttributeParams defines parameters for UpdateApiProductMetaAttribute.
type UpdateApiProductMetaAttributeParams struct {
	// Provide the etag value for a previous GET request of a resource on update (PATCH) in order to avoid "lost updates"
	IfMatch *IfMatchHeader `json:"If-Match,omitempty"`
}

// CreateApiProductMetaAttributeParams defines parameters for CreateApiProductMetaAttribute.
type CreateApiProductMetaAttributeParams struct {
	// Provide the etag value for a previous GET request of a resource on update (PATCH) in order to avoid "lost updates"
	IfMatch *IfMatchHeader `json:"If-Match,omitempty"`
}

// ListApiProductRevisionsParams defines parameters for ListApiProductRevisions.
type ListApiProductRevisionsParams struct {
	// The number of items to get per page. Min: 1 Max: 100
	PageSize *PageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// The page number to get. Min: 1
	PageNumber *PageNumber `form:"pageNumber,omitempty" json:"pageNumber,omitempty"`

	// name of a field to sort on
	SortFieldName *SortFieldName `form:"sortFieldName,omitempty" json:"sortFieldName,omitempty"`

	// sort direction
	SortDirection *ListApiProductRevisionsParamsSortDirection `form:"sortDirection,omitempty" json:"sortDirection,omitempty"`
}

// ListApiProductRevisionsParamsSortDirection defines parameters for ListApiProductRevisions.
type ListApiProductRevisionsParamsSortDirection string

// ListApisParams defines parameters for ListApis.
type ListApisParams struct {
	// The number of items to get per page. Min: 1 Max: 100
	PageSize *PageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// The page number to get. Min: 1
	PageNumber *PageNumber `form:"pageNumber,omitempty" json:"pageNumber,omitempty"`

	// name of a field to sort on
	SortFieldName *SortFieldName `form:"sortFieldName,omitempty" json:"sortFieldName,omitempty"`

	// sort direction
	SortDirection *ListApisParamsSortDirection `form:"sortDirection,omitempty" json:"sortDirection,omitempty"`

	// the format of the API List returned, compact returns the API names, summary and extended return additional API metadata
	Format *ListApisParamsFormat `form:"format,omitempty" json:"format,omitempty"`

	// specify search terms to filter results on, multiple search terms can be supplied. Search will return results matching any of the terms (OR). Enclose search terms in quotes to limit results to recoirds matching ALL terms (AND).)
	Filter *Filter `form:"filter,omitempty" json:"filter,omitempty"`
}

// ListApisParamsSortDirection defines parameters for ListApis.
type ListApisParamsSortDirection string

// ListApisParamsFormat defines parameters for ListApis.
type ListApisParamsFormat string

// ImportApiJSONBody defines parameters for ImportApi.
type ImportApiJSONBody = APIImport

// GetApiParams defines parameters for GetApi.
type GetApiParams struct {
	Format *GetApiParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// GetApiParamsFormat defines parameters for GetApi.
type GetApiParamsFormat string

// UpdateApiParams defines parameters for UpdateApi.
type UpdateApiParams struct {
	// Provide the etag value for a previous GET request of a resource on update (PATCH) in order to avoid "lost updates"
	IfMatch *IfMatchHeader `json:"If-Match,omitempty"`
}

// CreateApiParams defines parameters for CreateApi.
type CreateApiParams struct {
	// Set the mode that applies to a create (POST or PUT) operation, in test mode the data is validated but not persisted, any validation results are returned to the client. The server defaults to write mode itf parameter is omitted
	Mode *CreateApiParamsMode `form:"mode,omitempty" json:"mode,omitempty"`
}

// CreateApiParamsMode defines parameters for CreateApi.
type CreateApiParamsMode string

// UpdateApiAttributeParams defines parameters for UpdateApiAttribute.
type UpdateApiAttributeParams struct {
	// Provide the etag value for a previous GET request of a resource on update (PATCH) in order to avoid "lost updates"
	IfMatch *IfMatchHeader `json:"If-Match,omitempty"`
}

// CreateApiAttributeParams defines parameters for CreateApiAttribute.
type CreateApiAttributeParams struct {
	// Provide the etag value for a previous GET request of a resource on update (PATCH) in order to avoid "lost updates"
	IfMatch *IfMatchHeader `json:"If-Match,omitempty"`
}

// UpdateApiInfoJSONBody defines parameters for UpdateApiInfo.
type UpdateApiInfoJSONBody = APIInfoPatch

// UpdateApiInfoParams defines parameters for UpdateApiInfo.
type UpdateApiInfoParams struct {
	// Provide the etag value for a previous GET request of a resource on update (PATCH) in order to avoid "lost updates"
	IfMatch *IfMatchHeader `json:"If-Match,omitempty"`
}

// UpdateApiMetaAttributeParams defines parameters for UpdateApiMetaAttribute.
type UpdateApiMetaAttributeParams struct {
	// Provide the etag value for a previous GET request of a resource on update (PATCH) in order to avoid "lost updates"
	IfMatch *IfMatchHeader `json:"If-Match,omitempty"`
}

// CreateApiMetaAttributeParams defines parameters for CreateApiMetaAttribute.
type CreateApiMetaAttributeParams struct {
	// Provide the etag value for a previous GET request of a resource on update (PATCH) in order to avoid "lost updates"
	IfMatch *IfMatchHeader `json:"If-Match,omitempty"`
}

// ListApiRevisionsParams defines parameters for ListApiRevisions.
type ListApiRevisionsParams struct {
	// The number of items to get per page. Min: 1 Max: 100
	PageSize *PageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// The page number to get. Min: 1
	PageNumber *PageNumber `form:"pageNumber,omitempty" json:"pageNumber,omitempty"`

	// name of a field to sort on
	SortFieldName *SortFieldName `form:"sortFieldName,omitempty" json:"sortFieldName,omitempty"`

	// sort direction
	SortDirection *ListApiRevisionsParamsSortDirection `form:"sortDirection,omitempty" json:"sortDirection,omitempty"`
}

// ListApiRevisionsParamsSortDirection defines parameters for ListApiRevisions.
type ListApiRevisionsParamsSortDirection string

// GetApiRevisionParams defines parameters for GetApiRevision.
type GetApiRevisionParams struct {
	Format *GetApiRevisionParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// GetApiRevisionParamsFormat defines parameters for GetApiRevision.
type GetApiRevisionParamsFormat string

// UpdateApiVersionInfoJSONBody defines parameters for UpdateApiVersionInfo.
type UpdateApiVersionInfoJSONBody = APIVersionInfoPatch

// UpdateApiVersionInfoParams defines parameters for UpdateApiVersionInfo.
type UpdateApiVersionInfoParams struct {
	// Provide the etag value for a previous GET request of a resource on update (PATCH) in order to avoid "lost updates"
	IfMatch *IfMatchHeader `json:"If-Match,omitempty"`
}

// ListEPApplicationDomainsParams defines parameters for ListEPApplicationDomains.
type ListEPApplicationDomainsParams struct {
	// The number of items to get per page. Min: 1 Max: 100
	PageSize *PageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// The page number to get. Min: 1
	PageNumber *PageNumber `form:"pageNumber,omitempty" json:"pageNumber,omitempty"`
}

// ListAppsParams defines parameters for ListApps.
type ListAppsParams struct {
	Status *AppStatus `form:"status,omitempty" json:"status,omitempty"`

	// The number of items to get per page. Min: 1 Max: 100
	PageSize *PageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// The page number to get. Min: 1
	PageNumber *PageNumber `form:"pageNumber,omitempty" json:"pageNumber,omitempty"`

	// name of a field to sort on
	SortFieldName *SortFieldName `form:"sortFieldName,omitempty" json:"sortFieldName,omitempty"`

	// sort direction
	SortDirection *ListAppsParamsSortDirection `form:"sortDirection,omitempty" json:"sortDirection,omitempty"`

	// specify search terms to filter results on, multiple search terms can be supplied. Search will return results matching any of the terms (OR). Enclose search terms in quotes to limit results to recoirds matching ALL terms (AND).)
	Filter *Filter `form:"filter,omitempty" json:"filter,omitempty"`
}

// ListAppsParamsSortDirection defines parameters for ListApps.
type ListAppsParamsSortDirection string

// GetAppParams defines parameters for GetApp.
type GetAppParams struct {
	TopicSyntax *GetAppParamsTopicSyntax `form:"topicSyntax,omitempty" json:"topicSyntax,omitempty"`
}

// GetAppParamsTopicSyntax defines parameters for GetApp.
type GetAppParamsTopicSyntax string

// ListAppApiSpecificationsParams defines parameters for ListAppApiSpecifications.
type ListAppApiSpecificationsParams struct {
	// The number of items to get per page. Min: 1 Max: 100
	PageSize *PageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// The page number to get. Min: 1
	PageNumber *PageNumber `form:"pageNumber,omitempty" json:"pageNumber,omitempty"`

	// name of a field to sort on
	SortFieldName *SortFieldName `form:"sortFieldName,omitempty" json:"sortFieldName,omitempty"`

	// sort direction
	SortDirection *ListAppApiSpecificationsParamsSortDirection `form:"sortDirection,omitempty" json:"sortDirection,omitempty"`
}

// ListAppApiSpecificationsParamsSortDirection defines parameters for ListAppApiSpecifications.
type ListAppApiSpecificationsParamsSortDirection string

// GetAppApiSpecificationParams defines parameters for GetAppApiSpecification.
type GetAppApiSpecificationParams struct {
	Format *GetAppApiSpecificationParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// GetAppApiSpecificationParamsFormat defines parameters for GetAppApiSpecification.
type GetAppApiSpecificationParamsFormat string

// ListDevelopersParams defines parameters for ListDevelopers.
type ListDevelopersParams struct {
	// The number of items to get per page. Min: 1 Max: 100
	PageSize *PageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// The page number to get. Min: 1
	PageNumber *PageNumber `form:"pageNumber,omitempty" json:"pageNumber,omitempty"`

	// name of a field to sort on
	SortFieldName *SortFieldName `form:"sortFieldName,omitempty" json:"sortFieldName,omitempty"`

	// sort direction
	SortDirection *ListDevelopersParamsSortDirection `form:"sortDirection,omitempty" json:"sortDirection,omitempty"`
}

// ListDevelopersParamsSortDirection defines parameters for ListDevelopers.
type ListDevelopersParamsSortDirection string

// CreateDeveloperJSONBody defines parameters for CreateDeveloper.
type CreateDeveloperJSONBody = Developer

// UpdateDeveloperJSONBody defines parameters for UpdateDeveloper.
type UpdateDeveloperJSONBody = DeveloperPatch

// UpdateDeveloperParams defines parameters for UpdateDeveloper.
type UpdateDeveloperParams struct {
	// Provide the etag value for a previous GET request of a resource on update (PATCH) in order to avoid "lost updates"
	IfMatch *IfMatchHeader `json:"If-Match,omitempty"`
}

// ListDeveloperAppsParams defines parameters for ListDeveloperApps.
type ListDeveloperAppsParams struct {
	Status *AppStatus `form:"status,omitempty" json:"status,omitempty"`

	// The number of items to get per page. Min: 1 Max: 100
	PageSize *PageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// The page number to get. Min: 1
	PageNumber *PageNumber `form:"pageNumber,omitempty" json:"pageNumber,omitempty"`

	// name of a field to sort on
	SortFieldName *SortFieldName `form:"sortFieldName,omitempty" json:"sortFieldName,omitempty"`

	// sort direction
	SortDirection *ListDeveloperAppsParamsSortDirection `form:"sortDirection,omitempty" json:"sortDirection,omitempty"`
}

// ListDeveloperAppsParamsSortDirection defines parameters for ListDeveloperApps.
type ListDeveloperAppsParamsSortDirection string

// CreateDeveloperAppJSONBody defines parameters for CreateDeveloperApp.
type CreateDeveloperAppJSONBody = App

// GetDeveloperAppParams defines parameters for GetDeveloperApp.
type GetDeveloperAppParams struct {
	TopicSyntax *GetDeveloperAppParamsTopicSyntax `form:"topicSyntax,omitempty" json:"topicSyntax,omitempty"`
}

// GetDeveloperAppParamsTopicSyntax defines parameters for GetDeveloperApp.
type GetDeveloperAppParamsTopicSyntax string

// UpdateDeveloperAppJSONBody defines parameters for UpdateDeveloperApp.
type UpdateDeveloperAppJSONBody = AppPatch

// UpdateDeveloperAppParams defines parameters for UpdateDeveloperApp.
type UpdateDeveloperAppParams struct {
	// Provide the etag value for a previous GET request of a resource on update (PATCH) in order to avoid "lost updates"
	IfMatch *IfMatchHeader `json:"If-Match,omitempty"`
}

// UpdateDeveloperAppAttributeParams defines parameters for UpdateDeveloperAppAttribute.
type UpdateDeveloperAppAttributeParams struct {
	// Provide the etag value for a previous GET request of a resource on update (PATCH) in order to avoid "lost updates"
	IfMatch *IfMatchHeader `json:"If-Match,omitempty"`
}

// CreateDeveloperAppAttributeParams defines parameters for CreateDeveloperAppAttribute.
type CreateDeveloperAppAttributeParams struct {
	// Provide the etag value for a previous GET request of a resource on update (PATCH) in order to avoid "lost updates"
	IfMatch *IfMatchHeader `json:"If-Match,omitempty"`
}

// CreateDeveloperAppCredentialsJSONBody defines parameters for CreateDeveloperAppCredentials.
type CreateDeveloperAppCredentialsJSONBody = Credentials

// UpdateDeveloperAppCredentialsJSONBody defines parameters for UpdateDeveloperAppCredentials.
type UpdateDeveloperAppCredentialsJSONBody = Credentials

// UpdateDeveloperAppCredentialsParams defines parameters for UpdateDeveloperAppCredentials.
type UpdateDeveloperAppCredentialsParams struct {
	// Provide the etag value for a previous GET request of a resource on update (PATCH) in order to avoid "lost updates"
	IfMatch *IfMatchHeader `json:"If-Match,omitempty"`
}

// CreateDeveloperAppWebHookJSONBody defines parameters for CreateDeveloperAppWebHook.
type CreateDeveloperAppWebHookJSONBody = WebHook

// UpdateDeveloperAppWebHookJSONBody defines parameters for UpdateDeveloperAppWebHook.
type UpdateDeveloperAppWebHookJSONBody = WebHook

// UpdateDeveloperAppWebHookParams defines parameters for UpdateDeveloperAppWebHook.
type UpdateDeveloperAppWebHookParams struct {
	// Provide the etag value for a previous GET request of a resource on update (PATCH) in order to avoid "lost updates"
	IfMatch *IfMatchHeader `json:"If-Match,omitempty"`
}

// ListEnvironmentsParams defines parameters for ListEnvironments.
type ListEnvironmentsParams struct {
	// The number of items to get per page. Min: 1 Max: 100
	PageSize *PageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// The page number to get. Min: 1
	PageNumber *PageNumber `form:"pageNumber,omitempty" json:"pageNumber,omitempty"`

	// name of a field to sort on
	SortFieldName *SortFieldName `form:"sortFieldName,omitempty" json:"sortFieldName,omitempty"`

	// sort direction
	SortDirection *ListEnvironmentsParamsSortDirection `form:"sortDirection,omitempty" json:"sortDirection,omitempty"`
	Format        *ListEnvironmentsParamsFormat        `form:"format,omitempty" json:"format,omitempty"`
}

// ListEnvironmentsParamsSortDirection defines parameters for ListEnvironments.
type ListEnvironmentsParamsSortDirection string

// ListEnvironmentsParamsFormat defines parameters for ListEnvironments.
type ListEnvironmentsParamsFormat string

// CreateEnvironmentJSONBody defines parameters for CreateEnvironment.
type CreateEnvironmentJSONBody = Environment

// UpdateEnvironmentJSONBody defines parameters for UpdateEnvironment.
type UpdateEnvironmentJSONBody = EnvironmentPatch

// UpdateEnvironmentParams defines parameters for UpdateEnvironment.
type UpdateEnvironmentParams struct {
	// Provide the etag value for a previous GET request of a resource on update (PATCH) in order to avoid "lost updates"
	IfMatch *IfMatchHeader `json:"If-Match,omitempty"`
}

// ListEventAPIProductsParams defines parameters for ListEventAPIProducts.
type ListEventAPIProductsParams struct {
	// The number of items to get per page. Min: 1 Max: 100
	PageSize *PageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// The page number to get. Min: 1
	PageNumber *PageNumber `form:"pageNumber,omitempty" json:"pageNumber,omitempty"`
}

// GetEventAPIProductAsyncAPIParams defines parameters for GetEventAPIProductAsyncAPI.
type GetEventAPIProductAsyncAPIParams struct {
	Format *GetEventAPIProductAsyncAPIParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// GetEventAPIProductAsyncAPIParamsFormat defines parameters for GetEventAPIProductAsyncAPI.
type GetEventAPIProductAsyncAPIParamsFormat string

// ListHistoryParams defines parameters for ListHistory.
type ListHistoryParams struct {
	// The number of items to get per page. Min: 1 Max: 100
	PageSize *PageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// The page number to get. Min: 1
	PageNumber *PageNumber `form:"pageNumber,omitempty" json:"pageNumber,omitempty"`

	// name of a field to sort on
	SortFieldName *SortFieldName `form:"sortFieldName,omitempty" json:"sortFieldName,omitempty"`

	// sort direction
	SortDirection *ListHistoryParamsSortDirection `form:"sortDirection,omitempty" json:"sortDirection,omitempty"`
}

// ListHistoryParamsSortDirection defines parameters for ListHistory.
type ListHistoryParamsSortDirection string

// CreateImporterJobJSONBody defines parameters for CreateImporterJob.
type CreateImporterJobJSONBody = ImporterConfiguration

// UpdateImporterJobJSONBody defines parameters for UpdateImporterJob.
type UpdateImporterJobJSONBody = ImporterConfiguration

// ListJobsParams defines parameters for ListJobs.
type ListJobsParams struct {
	// The number of items to get per page. Min: 1 Max: 100
	PageSize *PageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// The page number to get. Min: 1
	PageNumber *PageNumber `form:"pageNumber,omitempty" json:"pageNumber,omitempty"`

	// name of a field to sort on
	SortFieldName *SortFieldName `form:"sortFieldName,omitempty" json:"sortFieldName,omitempty"`

	// sort direction
	SortDirection *ListJobsParamsSortDirection `form:"sortDirection,omitempty" json:"sortDirection,omitempty"`
	Status        *ListJobsParamsStatus        `form:"status,omitempty" json:"status,omitempty"`
}

// ListJobsParamsSortDirection defines parameters for ListJobs.
type ListJobsParamsSortDirection string

// ListJobsParamsStatus defines parameters for ListJobs.
type ListJobsParamsStatus string

// ListServicesParams defines parameters for ListServices.
type ListServicesParams struct {
	// The number of items to get per page. Min: 1 Max: 100
	PageSize *PageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// The page number to get. Min: 1
	PageNumber *PageNumber `form:"pageNumber,omitempty" json:"pageNumber,omitempty"`

	// name of a field to sort on
	SortFieldName *SortFieldName `form:"sortFieldName,omitempty" json:"sortFieldName,omitempty"`

	// sort direction
	SortDirection *ListServicesParamsSortDirection `form:"sortDirection,omitempty" json:"sortDirection,omitempty"`
}

// ListServicesParamsSortDirection defines parameters for ListServices.
type ListServicesParamsSortDirection string

// ListTeamsParams defines parameters for ListTeams.
type ListTeamsParams struct {
	// The number of items to get per page. Min: 1 Max: 100
	PageSize *PageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// The page number to get. Min: 1
	PageNumber *PageNumber `form:"pageNumber,omitempty" json:"pageNumber,omitempty"`

	// name of a field to sort on
	SortFieldName *SortFieldName `form:"sortFieldName,omitempty" json:"sortFieldName,omitempty"`

	// sort direction
	SortDirection *ListTeamsParamsSortDirection `form:"sortDirection,omitempty" json:"sortDirection,omitempty"`
}

// ListTeamsParamsSortDirection defines parameters for ListTeams.
type ListTeamsParamsSortDirection string

// CreateTeamJSONBody defines parameters for CreateTeam.
type CreateTeamJSONBody = Team

// UpdateTeamJSONBody defines parameters for UpdateTeam.
type UpdateTeamJSONBody = TeamPatch

// UpdateTeamParams defines parameters for UpdateTeam.
type UpdateTeamParams struct {
	// Provide the etag value for a previous GET request of a resource on update (PATCH) in order to avoid "lost updates"
	IfMatch *IfMatchHeader `json:"If-Match,omitempty"`
}

// ListTeamAppsParams defines parameters for ListTeamApps.
type ListTeamAppsParams struct {
	Status *AppStatus `form:"status,omitempty" json:"status,omitempty"`

	// The number of items to get per page. Min: 1 Max: 100
	PageSize *PageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// The page number to get. Min: 1
	PageNumber *PageNumber `form:"pageNumber,omitempty" json:"pageNumber,omitempty"`

	// name of a field to sort on
	SortFieldName *SortFieldName `form:"sortFieldName,omitempty" json:"sortFieldName,omitempty"`

	// sort direction
	SortDirection *ListTeamAppsParamsSortDirection `form:"sortDirection,omitempty" json:"sortDirection,omitempty"`
}

// ListTeamAppsParamsSortDirection defines parameters for ListTeamApps.
type ListTeamAppsParamsSortDirection string

// CreateTeamAppJSONBody defines parameters for CreateTeamApp.
type CreateTeamAppJSONBody = App

// GetTeamAppParams defines parameters for GetTeamApp.
type GetTeamAppParams struct {
	TopicSyntax *GetTeamAppParamsTopicSyntax `form:"topicSyntax,omitempty" json:"topicSyntax,omitempty"`
}

// GetTeamAppParamsTopicSyntax defines parameters for GetTeamApp.
type GetTeamAppParamsTopicSyntax string

// UpdateTeamAppJSONBody defines parameters for UpdateTeamApp.
type UpdateTeamAppJSONBody = AppPatch

// UpdateTeamAppParams defines parameters for UpdateTeamApp.
type UpdateTeamAppParams struct {
	// Provide the etag value for a previous GET request of a resource on update (PATCH) in order to avoid "lost updates"
	IfMatch *IfMatchHeader `json:"If-Match,omitempty"`
}

// UpdateTeamAppAttributeParams defines parameters for UpdateTeamAppAttribute.
type UpdateTeamAppAttributeParams struct {
	// Provide the etag value for a previous GET request of a resource on update (PATCH) in order to avoid "lost updates"
	IfMatch *IfMatchHeader `json:"If-Match,omitempty"`
}

// CreateTeamAppAttributeParams defines parameters for CreateTeamAppAttribute.
type CreateTeamAppAttributeParams struct {
	// Provide the etag value for a previous GET request of a resource on update (PATCH) in order to avoid "lost updates"
	IfMatch *IfMatchHeader `json:"If-Match,omitempty"`
}

// CreateTeamAppCredentialsJSONBody defines parameters for CreateTeamAppCredentials.
type CreateTeamAppCredentialsJSONBody = Credentials

// UpdateTeamAppCredentialsJSONBody defines parameters for UpdateTeamAppCredentials.
type UpdateTeamAppCredentialsJSONBody = Credentials

// UpdateTeamAppCredentialsParams defines parameters for UpdateTeamAppCredentials.
type UpdateTeamAppCredentialsParams struct {
	// Provide the etag value for a previous GET request of a resource on update (PATCH) in order to avoid "lost updates"
	IfMatch *IfMatchHeader `json:"If-Match,omitempty"`
}

// CreateTeamAppWebHookJSONBody defines parameters for CreateTeamAppWebHook.
type CreateTeamAppWebHookJSONBody = WebHook

// UpdateTeamAppWebHookJSONBody defines parameters for UpdateTeamAppWebHook.
type UpdateTeamAppWebHookJSONBody = WebHook

// UpdateTeamAppWebHookParams defines parameters for UpdateTeamAppWebHook.
type UpdateTeamAppWebHookParams struct {
	// Provide the etag value for a previous GET request of a resource on update (PATCH) in order to avoid "lost updates"
	IfMatch *IfMatchHeader `json:"If-Match,omitempty"`
}

// UpdateTokenJSONBody defines parameters for UpdateToken.
type UpdateTokenJSONBody = CloudToken

// CreateOrganizationJSONRequestBody defines body for CreateOrganization for application/json ContentType.
type CreateOrganizationJSONRequestBody = CreateOrganizationJSONBody

// UpdateOrganizationJSONRequestBody defines body for UpdateOrganization for application/json ContentType.
type UpdateOrganizationJSONRequestBody = UpdateOrganizationJSONBody

// CreateApiProductJSONRequestBody defines body for CreateApiProduct for application/json ContentType.
type CreateApiProductJSONRequestBody = CreateApiProductJSONBody

// UpdateApiProductJSONRequestBody defines body for UpdateApiProduct for application/json ContentType.
type UpdateApiProductJSONRequestBody = UpdateApiProductJSONBody

// CreateDerivedApiProductJSONRequestBody defines body for CreateDerivedApiProduct for application/json ContentType.
type CreateDerivedApiProductJSONRequestBody = CreateDerivedApiProductJSONBody

// ImportApiJSONRequestBody defines body for ImportApi for application/json ContentType.
type ImportApiJSONRequestBody = ImportApiJSONBody

// UpdateApiInfoJSONRequestBody defines body for UpdateApiInfo for application/json ContentType.
type UpdateApiInfoJSONRequestBody = UpdateApiInfoJSONBody

// UpdateApiVersionInfoJSONRequestBody defines body for UpdateApiVersionInfo for application/json ContentType.
type UpdateApiVersionInfoJSONRequestBody = UpdateApiVersionInfoJSONBody

// CreateDeveloperJSONRequestBody defines body for CreateDeveloper for application/json ContentType.
type CreateDeveloperJSONRequestBody = CreateDeveloperJSONBody

// UpdateDeveloperJSONRequestBody defines body for UpdateDeveloper for application/json ContentType.
type UpdateDeveloperJSONRequestBody = UpdateDeveloperJSONBody

// CreateDeveloperAppJSONRequestBody defines body for CreateDeveloperApp for application/json ContentType.
type CreateDeveloperAppJSONRequestBody = CreateDeveloperAppJSONBody

// UpdateDeveloperAppJSONRequestBody defines body for UpdateDeveloperApp for application/json ContentType.
type UpdateDeveloperAppJSONRequestBody = UpdateDeveloperAppJSONBody

// CreateDeveloperAppCredentialsJSONRequestBody defines body for CreateDeveloperAppCredentials for application/json ContentType.
type CreateDeveloperAppCredentialsJSONRequestBody = CreateDeveloperAppCredentialsJSONBody

// UpdateDeveloperAppCredentialsJSONRequestBody defines body for UpdateDeveloperAppCredentials for application/json ContentType.
type UpdateDeveloperAppCredentialsJSONRequestBody = UpdateDeveloperAppCredentialsJSONBody

// CreateDeveloperAppWebHookJSONRequestBody defines body for CreateDeveloperAppWebHook for application/json ContentType.
type CreateDeveloperAppWebHookJSONRequestBody = CreateDeveloperAppWebHookJSONBody

// UpdateDeveloperAppWebHookJSONRequestBody defines body for UpdateDeveloperAppWebHook for application/json ContentType.
type UpdateDeveloperAppWebHookJSONRequestBody = UpdateDeveloperAppWebHookJSONBody

// CreateEnvironmentJSONRequestBody defines body for CreateEnvironment for application/json ContentType.
type CreateEnvironmentJSONRequestBody = CreateEnvironmentJSONBody

// UpdateEnvironmentJSONRequestBody defines body for UpdateEnvironment for application/json ContentType.
type UpdateEnvironmentJSONRequestBody = UpdateEnvironmentJSONBody

// CreateImporterJobJSONRequestBody defines body for CreateImporterJob for application/json ContentType.
type CreateImporterJobJSONRequestBody = CreateImporterJobJSONBody

// UpdateImporterJobJSONRequestBody defines body for UpdateImporterJob for application/json ContentType.
type UpdateImporterJobJSONRequestBody = UpdateImporterJobJSONBody

// CreateTeamJSONRequestBody defines body for CreateTeam for application/json ContentType.
type CreateTeamJSONRequestBody = CreateTeamJSONBody

// UpdateTeamJSONRequestBody defines body for UpdateTeam for application/json ContentType.
type UpdateTeamJSONRequestBody = UpdateTeamJSONBody

// CreateTeamAppJSONRequestBody defines body for CreateTeamApp for application/json ContentType.
type CreateTeamAppJSONRequestBody = CreateTeamAppJSONBody

// UpdateTeamAppJSONRequestBody defines body for UpdateTeamApp for application/json ContentType.
type UpdateTeamAppJSONRequestBody = UpdateTeamAppJSONBody

// CreateTeamAppCredentialsJSONRequestBody defines body for CreateTeamAppCredentials for application/json ContentType.
type CreateTeamAppCredentialsJSONRequestBody = CreateTeamAppCredentialsJSONBody

// UpdateTeamAppCredentialsJSONRequestBody defines body for UpdateTeamAppCredentials for application/json ContentType.
type UpdateTeamAppCredentialsJSONRequestBody = UpdateTeamAppCredentialsJSONBody

// CreateTeamAppWebHookJSONRequestBody defines body for CreateTeamAppWebHook for application/json ContentType.
type CreateTeamAppWebHookJSONRequestBody = CreateTeamAppWebHookJSONBody

// UpdateTeamAppWebHookJSONRequestBody defines body for UpdateTeamAppWebHook for application/json ContentType.
type UpdateTeamAppWebHookJSONRequestBody = UpdateTeamAppWebHookJSONBody

// UpdateTokenJSONRequestBody defines body for UpdateToken for application/json ContentType.
type UpdateTokenJSONRequestBody = UpdateTokenJSONBody

// Getter for additional properties for APIInfo_SourceMetadata. Returns the specified
// element and whether it was found
func (a APIInfo_SourceMetadata) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for APIInfo_SourceMetadata
func (a *APIInfo_SourceMetadata) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for APIInfo_SourceMetadata to handle AdditionalProperties
func (a *APIInfo_SourceMetadata) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for APIInfo_SourceMetadata to handle AdditionalProperties
func (a APIInfo_SourceMetadata) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for About_Version. Returns the specified
// element and whether it was found
func (a About_Version) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for About_Version
func (a *About_Version) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for About_Version to handle AdditionalProperties
func (a *About_Version) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for About_Version to handle AdditionalProperties
func (a About_Version) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CloudToken. Returns the specified
// element and whether it was found
func (a CloudToken) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CloudToken
func (a *CloudToken) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CloudToken to handle AdditionalProperties
func (a *CloudToken) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cloud"]; found {
		err = json.Unmarshal(raw, &a.Cloud)
		if err != nil {
			return fmt.Errorf("error reading 'cloud': %w", err)
		}
		delete(object, "cloud")
	}

	if raw, found := object["eventPortal"]; found {
		err = json.Unmarshal(raw, &a.EventPortal)
		if err != nil {
			return fmt.Errorf("error reading 'eventPortal': %w", err)
		}
		delete(object, "eventPortal")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CloudToken to handle AdditionalProperties
func (a CloudToken) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["cloud"], err = json.Marshal(a.Cloud)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'cloud': %w", err)
	}

	object["eventPortal"], err = json.Marshal(a.EventPortal)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'eventPortal': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Environment. Returns the specified
// element and whether it was found
func (a Environment) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Environment
func (a *Environment) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Environment to handle AdditionalProperties
func (a *Environment) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return fmt.Errorf("error reading 'description': %w", err)
		}
		delete(object, "description")
	}

	if raw, found := object["displayName"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return fmt.Errorf("error reading 'displayName': %w", err)
		}
		delete(object, "displayName")
	}

	if raw, found := object["exposedProtocols"]; found {
		err = json.Unmarshal(raw, &a.ExposedProtocols)
		if err != nil {
			return fmt.Errorf("error reading 'exposedProtocols': %w", err)
		}
		delete(object, "exposedProtocols")
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
		delete(object, "name")
	}

	if raw, found := object["serviceId"]; found {
		err = json.Unmarshal(raw, &a.ServiceId)
		if err != nil {
			return fmt.Errorf("error reading 'serviceId': %w", err)
		}
		delete(object, "serviceId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Environment to handle AdditionalProperties
func (a Environment) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["description"], err = json.Marshal(a.Description)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'description': %w", err)
	}

	if a.DisplayName != nil {
		object["displayName"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'displayName': %w", err)
		}
	}

	object["exposedProtocols"], err = json.Marshal(a.ExposedProtocols)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'exposedProtocols': %w", err)
	}

	object["name"], err = json.Marshal(a.Name)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'name': %w", err)
	}

	object["serviceId"], err = json.Marshal(a.ServiceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'serviceId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ErrorResponse_Meta. Returns the specified
// element and whether it was found
func (a ErrorResponse_Meta) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ErrorResponse_Meta
func (a *ErrorResponse_Meta) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ErrorResponse_Meta to handle AdditionalProperties
func (a *ErrorResponse_Meta) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ErrorResponse_Meta to handle AdditionalProperties
func (a ErrorResponse_Meta) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for OrganizationRepresentation. Returns the specified
// element and whether it was found
func (a OrganizationRepresentation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for OrganizationRepresentation
func (a *OrganizationRepresentation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for OrganizationRepresentation to handle AdditionalProperties
func (a *OrganizationRepresentation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cloud-token"]; found {
		err = json.Unmarshal(raw, &a.CloudToken)
		if err != nil {
			return fmt.Errorf("error reading 'cloud-token': %w", err)
		}
		delete(object, "cloud-token")
	}

	if raw, found := object["integrations"]; found {
		err = json.Unmarshal(raw, &a.Integrations)
		if err != nil {
			return fmt.Errorf("error reading 'integrations': %w", err)
		}
		delete(object, "integrations")
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
		delete(object, "name")
	}

	if raw, found := object["sempV2Authentication"]; found {
		err = json.Unmarshal(raw, &a.SempV2Authentication)
		if err != nil {
			return fmt.Errorf("error reading 'sempV2Authentication': %w", err)
		}
		delete(object, "sempV2Authentication")
	}

	if raw, found := object["serviceRegistry"]; found {
		err = json.Unmarshal(raw, &a.ServiceRegistry)
		if err != nil {
			return fmt.Errorf("error reading 'serviceRegistry': %w", err)
		}
		delete(object, "serviceRegistry")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for OrganizationRepresentation to handle AdditionalProperties
func (a OrganizationRepresentation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.CloudToken != nil {
		object["cloud-token"], err = json.Marshal(a.CloudToken)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cloud-token': %w", err)
		}
	}

	if a.Integrations != nil {
		object["integrations"], err = json.Marshal(a.Integrations)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'integrations': %w", err)
		}
	}

	object["name"], err = json.Marshal(a.Name)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'name': %w", err)
	}

	if a.SempV2Authentication != nil {
		object["sempV2Authentication"], err = json.Marshal(a.SempV2Authentication)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sempV2Authentication': %w", err)
		}
	}

	if a.ServiceRegistry != nil {
		object["serviceRegistry"], err = json.Marshal(a.ServiceRegistry)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'serviceRegistry': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// About request
	About(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOrganizations request
	ListOrganizations(ctx context.Context, params *ListOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrganization request with any body
	CreateOrganizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrganization(ctx context.Context, body CreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrganization request
	DeleteOrganization(ctx context.Context, organizationName Organization, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganization request
	GetOrganization(ctx context.Context, organizationName Organization, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateOrganization request with any body
	UpdateOrganizationWithBody(ctx context.Context, organizationName Organization, params *UpdateOrganizationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateOrganization(ctx context.Context, organizationName Organization, params *UpdateOrganizationParams, body UpdateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListApiProducts request
	ListApiProducts(ctx context.Context, organizationName Organization, params *ListApiProductsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateApiProduct request with any body
	CreateApiProductWithBody(ctx context.Context, organizationName Organization, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateApiProduct(ctx context.Context, organizationName Organization, body CreateApiProductJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiProduct request
	DeleteApiProduct(ctx context.Context, organizationName Organization, apiProductName ApiProductName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiProduct request
	GetApiProduct(ctx context.Context, organizationName Organization, apiProductName ApiProductName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateApiProduct request with any body
	UpdateApiProductWithBody(ctx context.Context, organizationName Organization, apiProductName ApiProductName, params *UpdateApiProductParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateApiProduct(ctx context.Context, organizationName Organization, apiProductName ApiProductName, params *UpdateApiProductParams, body UpdateApiProductJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListApiProductApis request
	ListApiProductApis(ctx context.Context, organizationName Organization, apiProductName ApiProductName, params *ListApiProductApisParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiProductApiSpecification request
	GetApiProductApiSpecification(ctx context.Context, organizationName Organization, apiProductName ApiProductName, apiName ApiName, params *GetApiProductApiSpecificationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAppReferencesToAPIProducts request
	ListAppReferencesToAPIProducts(ctx context.Context, organizationName Organization, apiProductName ApiProductName, params *ListAppReferencesToAPIProductsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiProductAttribute request
	DeleteApiProductAttribute(ctx context.Context, organizationName Organization, apiProductName ApiProductName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiProductAttribute request
	GetApiProductAttribute(ctx context.Context, organizationName Organization, apiProductName ApiProductName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateApiProductAttribute request with any body
	UpdateApiProductAttributeWithBody(ctx context.Context, organizationName Organization, apiProductName ApiProductName, attributeName AttributeName, params *UpdateApiProductAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateApiProductAttribute request with any body
	CreateApiProductAttributeWithBody(ctx context.Context, organizationName Organization, apiProductName ApiProductName, attributeName AttributeName, params *CreateApiProductAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDerivedApiProducts request
	ListDerivedApiProducts(ctx context.Context, organizationName Organization, apiProductName ApiProductName, params *ListDerivedApiProductsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDerivedApiProduct request with any body
	CreateDerivedApiProductWithBody(ctx context.Context, organizationName Organization, apiProductName ApiProductName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDerivedApiProduct(ctx context.Context, organizationName Organization, apiProductName ApiProductName, body CreateDerivedApiProductJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiProductMetaAttribute request
	DeleteApiProductMetaAttribute(ctx context.Context, organizationName Organization, apiProductName ApiProductName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiProductMetaAttribute request
	GetApiProductMetaAttribute(ctx context.Context, organizationName Organization, apiProductName ApiProductName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateApiProductMetaAttribute request with any body
	UpdateApiProductMetaAttributeWithBody(ctx context.Context, organizationName Organization, apiProductName ApiProductName, attributeName AttributeName, params *UpdateApiProductMetaAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateApiProductMetaAttribute request with any body
	CreateApiProductMetaAttributeWithBody(ctx context.Context, organizationName Organization, apiProductName ApiProductName, attributeName AttributeName, params *CreateApiProductMetaAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListApiProductRevisions request
	ListApiProductRevisions(ctx context.Context, organizationName Organization, apiProductName ApiProductName, params *ListApiProductRevisionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiProductRevision request
	GetApiProductRevision(ctx context.Context, organizationName Organization, apiProductName ApiProductName, semver Semver, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListApis request
	ListApis(ctx context.Context, organizationName Organization, params *ListApisParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ImportApi request with any body
	ImportApiWithBody(ctx context.Context, organizationName Organization, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ImportApi(ctx context.Context, organizationName Organization, body ImportApiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApi request
	DeleteApi(ctx context.Context, organizationName Organization, apiName ApiName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApi request
	GetApi(ctx context.Context, organizationName Organization, apiName ApiName, params *GetApiParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateApi request with any body
	UpdateApiWithBody(ctx context.Context, organizationName Organization, apiName ApiName, params *UpdateApiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateApi request with any body
	CreateApiWithBody(ctx context.Context, organizationName Organization, apiName ApiName, params *CreateApiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiReferencedByAPIProducts request
	GetApiReferencedByAPIProducts(ctx context.Context, organizationName Organization, apiName ApiName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiAttribute request
	DeleteApiAttribute(ctx context.Context, organizationName Organization, apiName ApiName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiAttribute request
	GetApiAttribute(ctx context.Context, organizationName Organization, apiName ApiName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateApiAttribute request with any body
	UpdateApiAttributeWithBody(ctx context.Context, organizationName Organization, apiName ApiName, attributeName AttributeName, params *UpdateApiAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateApiAttribute request with any body
	CreateApiAttributeWithBody(ctx context.Context, organizationName Organization, apiName ApiName, attributeName AttributeName, params *CreateApiAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiInfo request
	GetApiInfo(ctx context.Context, organizationName Organization, apiName ApiName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateApiInfo request with any body
	UpdateApiInfoWithBody(ctx context.Context, organizationName Organization, apiName ApiName, params *UpdateApiInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateApiInfo(ctx context.Context, organizationName Organization, apiName ApiName, params *UpdateApiInfoParams, body UpdateApiInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiMetaAttribute request
	DeleteApiMetaAttribute(ctx context.Context, organizationName Organization, apiName ApiName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiMetaAttribute request
	GetApiMetaAttribute(ctx context.Context, organizationName Organization, apiName ApiName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateApiMetaAttribute request with any body
	UpdateApiMetaAttributeWithBody(ctx context.Context, organizationName Organization, apiName ApiName, attributeName AttributeName, params *UpdateApiMetaAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateApiMetaAttribute request with any body
	CreateApiMetaAttributeWithBody(ctx context.Context, organizationName Organization, apiName ApiName, attributeName AttributeName, params *CreateApiMetaAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListApiRevisions request
	ListApiRevisions(ctx context.Context, organizationName Organization, apiName ApiName, params *ListApiRevisionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiRevision request
	GetApiRevision(ctx context.Context, organizationName Organization, apiName ApiName, version Version, params *GetApiRevisionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiRevisionAPIProductReferences request
	GetApiRevisionAPIProductReferences(ctx context.Context, organizationName Organization, apiName ApiName, version Version, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiVersionInfo request
	GetApiVersionInfo(ctx context.Context, organizationName Organization, apiName ApiName, version Version, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateApiVersionInfo request with any body
	UpdateApiVersionInfoWithBody(ctx context.Context, organizationName Organization, apiName ApiName, version Version, params *UpdateApiVersionInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateApiVersionInfo(ctx context.Context, organizationName Organization, apiName ApiName, version Version, params *UpdateApiVersionInfoParams, body UpdateApiVersionInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListEPApplicationDomains request
	ListEPApplicationDomains(ctx context.Context, organizationName Organization, params *ListEPApplicationDomainsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEPApplicationDomain request
	GetEPApplicationDomain(ctx context.Context, organizationName Organization, applicationDomainId ApplicationDomainId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListApps request
	ListApps(ctx context.Context, organizationName Organization, params *ListAppsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApp request
	GetApp(ctx context.Context, organizationName Organization, appName AppName, params *GetAppParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAppApiSpecifications request
	ListAppApiSpecifications(ctx context.Context, organizationName Organization, appName AppName, params *ListAppApiSpecificationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAppApiSpecification request
	GetAppApiSpecification(ctx context.Context, organizationName Organization, appName AppName, apiName ApiName, params *GetAppApiSpecificationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAppStatus request
	GetAppStatus(ctx context.Context, organizationName Organization, appName AppName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAppConfigSets request
	ListAppConfigSets(ctx context.Context, organizationName Organization, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAppConfigSet request
	GetAppConfigSet(ctx context.Context, organizationName Organization, configSetName ConfigSetName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAppConfigSetSnapshots request
	ListAppConfigSetSnapshots(ctx context.Context, organizationName Organization, configSetName ConfigSetName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAppConfigSnapshot request
	GetAppConfigSnapshot(ctx context.Context, organizationName Organization, configSetName ConfigSetName, configSnapshotRevision ConfigSnapshotRevision, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDevelopers request
	ListDevelopers(ctx context.Context, organizationName Organization, params *ListDevelopersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDeveloper request with any body
	CreateDeveloperWithBody(ctx context.Context, organizationName Organization, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDeveloper(ctx context.Context, organizationName Organization, body CreateDeveloperJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDeveloper request
	DeleteDeveloper(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeveloper request
	GetDeveloper(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateDeveloper request with any body
	UpdateDeveloperWithBody(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, params *UpdateDeveloperParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateDeveloper(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, params *UpdateDeveloperParams, body UpdateDeveloperJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDeveloperApps request
	ListDeveloperApps(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, params *ListDeveloperAppsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDeveloperApp request with any body
	CreateDeveloperAppWithBody(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDeveloperApp(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, body CreateDeveloperAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDeveloperApp request
	DeleteDeveloperApp(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeveloperApp request
	GetDeveloperApp(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, params *GetDeveloperAppParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateDeveloperApp request with any body
	UpdateDeveloperAppWithBody(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, params *UpdateDeveloperAppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateDeveloperApp(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, params *UpdateDeveloperAppParams, body UpdateDeveloperAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDeveloperAppAttribute request
	DeleteDeveloperAppAttribute(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeveloperAppAttribute request
	GetDeveloperAppAttribute(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateDeveloperAppAttribute request with any body
	UpdateDeveloperAppAttributeWithBody(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, attributeName AttributeName, params *UpdateDeveloperAppAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDeveloperAppAttribute request with any body
	CreateDeveloperAppAttributeWithBody(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, attributeName AttributeName, params *CreateDeveloperAppAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDeveloperAppCredentials request
	ListDeveloperAppCredentials(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDeveloperAppCredentials request with any body
	CreateDeveloperAppCredentialsWithBody(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDeveloperAppCredentials(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, body CreateDeveloperAppCredentialsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDeveloperAppCredentials request
	DeleteDeveloperAppCredentials(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, consumerKey ConsumerKey, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateDeveloperAppCredentials request with any body
	UpdateDeveloperAppCredentialsWithBody(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, consumerKey ConsumerKey, params *UpdateDeveloperAppCredentialsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateDeveloperAppCredentials(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, consumerKey ConsumerKey, params *UpdateDeveloperAppCredentialsParams, body UpdateDeveloperAppCredentialsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDeveloperAppWebHooks request
	ListDeveloperAppWebHooks(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDeveloperAppWebHook request with any body
	CreateDeveloperAppWebHookWithBody(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDeveloperAppWebHook(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, body CreateDeveloperAppWebHookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDeveloperAppWebHook request
	DeleteDeveloperAppWebHook(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, webhookName WebhookName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeveloperAppWebHook request
	GetDeveloperAppWebHook(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, webhookName WebhookName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateDeveloperAppWebHook request with any body
	UpdateDeveloperAppWebHookWithBody(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, webhookName WebhookName, params *UpdateDeveloperAppWebHookParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateDeveloperAppWebHook(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, webhookName WebhookName, params *UpdateDeveloperAppWebHookParams, body UpdateDeveloperAppWebHookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListEnvironments request
	ListEnvironments(ctx context.Context, organizationName Organization, params *ListEnvironmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEnvironment request with any body
	CreateEnvironmentWithBody(ctx context.Context, organizationName Organization, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateEnvironment(ctx context.Context, organizationName Organization, body CreateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEnvironment request
	DeleteEnvironment(ctx context.Context, organizationName Organization, envName EnvName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnvironment request
	GetEnvironment(ctx context.Context, organizationName Organization, envName EnvName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateEnvironment request with any body
	UpdateEnvironmentWithBody(ctx context.Context, organizationName Organization, envName EnvName, params *UpdateEnvironmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateEnvironment(ctx context.Context, organizationName Organization, envName EnvName, params *UpdateEnvironmentParams, body UpdateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnvironmentReferencedByAPIProducts request
	GetEnvironmentReferencedByAPIProducts(ctx context.Context, organizationName Organization, envName EnvName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListEventAPIProducts request
	ListEventAPIProducts(ctx context.Context, organizationName Organization, params *ListEventAPIProductsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEventAPIProduct request
	GetEventAPIProduct(ctx context.Context, organizationName Organization, eventApiProductId EventApiProductId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEventAPIProductAsyncAPI request
	GetEventAPIProductAsyncAPI(ctx context.Context, organizationName Organization, eventApiProductId EventApiProductId, params *GetEventAPIProductAsyncAPIParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListHistory request
	ListHistory(ctx context.Context, organizationName Organization, params *ListHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllImporterTypes request
	GetAllImporterTypes(ctx context.Context, organizationName Organization, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllImporters request
	GetAllImporters(ctx context.Context, organizationName Organization, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateImporterJob request with any body
	CreateImporterJobWithBody(ctx context.Context, organizationName Organization, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateImporterJob(ctx context.Context, organizationName Organization, body CreateImporterJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteImporterJob request
	DeleteImporterJob(ctx context.Context, organizationName Organization, importerJobName ImporterJobName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetImporterJob request
	GetImporterJob(ctx context.Context, organizationName Organization, importerJobName ImporterJobName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateImporterJob request with any body
	UpdateImporterJobWithBody(ctx context.Context, organizationName Organization, importerJobName ImporterJobName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateImporterJob(ctx context.Context, organizationName Organization, importerJobName ImporterJobName, body UpdateImporterJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RunImporterJob request
	RunImporterJob(ctx context.Context, organizationName Organization, importerJobName ImporterJobName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListJobs request
	ListJobs(ctx context.Context, organizationName Organization, params *ListJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListServices request
	ListServices(ctx context.Context, organizationName Organization, params *ListServicesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListTeams request
	ListTeams(ctx context.Context, organizationName Organization, params *ListTeamsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTeam request with any body
	CreateTeamWithBody(ctx context.Context, organizationName Organization, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTeam(ctx context.Context, organizationName Organization, body CreateTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTeam request
	DeleteTeam(ctx context.Context, organizationName Organization, teamName TeamName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeam request
	GetTeam(ctx context.Context, organizationName Organization, teamName TeamName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTeam request with any body
	UpdateTeamWithBody(ctx context.Context, organizationName Organization, teamName TeamName, params *UpdateTeamParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateTeam(ctx context.Context, organizationName Organization, teamName TeamName, params *UpdateTeamParams, body UpdateTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListTeamApps request
	ListTeamApps(ctx context.Context, organizationName Organization, teamName TeamName, params *ListTeamAppsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTeamApp request with any body
	CreateTeamAppWithBody(ctx context.Context, organizationName Organization, teamName TeamName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTeamApp(ctx context.Context, organizationName Organization, teamName TeamName, body CreateTeamAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTeamApp request
	DeleteTeamApp(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeamApp request
	GetTeamApp(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, params *GetTeamAppParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTeamApp request with any body
	UpdateTeamAppWithBody(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, params *UpdateTeamAppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateTeamApp(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, params *UpdateTeamAppParams, body UpdateTeamAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTeamAppAttribute request
	DeleteTeamAppAttribute(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeamAppAttribute request
	GetTeamAppAttribute(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTeamAppAttribute request with any body
	UpdateTeamAppAttributeWithBody(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, attributeName AttributeName, params *UpdateTeamAppAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTeamAppAttribute request with any body
	CreateTeamAppAttributeWithBody(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, attributeName AttributeName, params *CreateTeamAppAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListTeamAppCredentials request
	ListTeamAppCredentials(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTeamAppCredentials request with any body
	CreateTeamAppCredentialsWithBody(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTeamAppCredentials(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, body CreateTeamAppCredentialsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTeamAppCredentials request
	DeleteTeamAppCredentials(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, consumerKey ConsumerKey, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTeamAppCredentials request with any body
	UpdateTeamAppCredentialsWithBody(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, consumerKey ConsumerKey, params *UpdateTeamAppCredentialsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateTeamAppCredentials(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, consumerKey ConsumerKey, params *UpdateTeamAppCredentialsParams, body UpdateTeamAppCredentialsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListTeamAppWebHooks request
	ListTeamAppWebHooks(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTeamAppWebHook request with any body
	CreateTeamAppWebHookWithBody(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTeamAppWebHook(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, body CreateTeamAppWebHookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTeamAppWebHook request
	DeleteTeamAppWebHook(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, webhookName WebhookName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeamAppWebHook request
	GetTeamAppWebHook(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, webhookName WebhookName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTeamAppWebHook request with any body
	UpdateTeamAppWebHookWithBody(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, webhookName WebhookName, params *UpdateTeamAppWebHookParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateTeamAppWebHook(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, webhookName WebhookName, params *UpdateTeamAppWebHookParams, body UpdateTeamAppWebHookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetToken request
	GetToken(ctx context.Context, organizationName Organization, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateToken request with any body
	UpdateTokenWithBody(ctx context.Context, organizationName Organization, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateToken(ctx context.Context, organizationName Organization, body UpdateTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) About(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAboutRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOrganizations(ctx context.Context, params *ListOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOrganizationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganization(ctx context.Context, body CreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganization(ctx context.Context, organizationName Organization, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrganizationRequest(c.Server, organizationName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganization(ctx context.Context, organizationName Organization, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationRequest(c.Server, organizationName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganizationWithBody(ctx context.Context, organizationName Organization, params *UpdateOrganizationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganizationRequestWithBody(c.Server, organizationName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganization(ctx context.Context, organizationName Organization, params *UpdateOrganizationParams, body UpdateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganizationRequest(c.Server, organizationName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListApiProducts(ctx context.Context, organizationName Organization, params *ListApiProductsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListApiProductsRequest(c.Server, organizationName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApiProductWithBody(ctx context.Context, organizationName Organization, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApiProductRequestWithBody(c.Server, organizationName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApiProduct(ctx context.Context, organizationName Organization, body CreateApiProductJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApiProductRequest(c.Server, organizationName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiProduct(ctx context.Context, organizationName Organization, apiProductName ApiProductName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiProductRequest(c.Server, organizationName, apiProductName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiProduct(ctx context.Context, organizationName Organization, apiProductName ApiProductName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiProductRequest(c.Server, organizationName, apiProductName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateApiProductWithBody(ctx context.Context, organizationName Organization, apiProductName ApiProductName, params *UpdateApiProductParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateApiProductRequestWithBody(c.Server, organizationName, apiProductName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateApiProduct(ctx context.Context, organizationName Organization, apiProductName ApiProductName, params *UpdateApiProductParams, body UpdateApiProductJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateApiProductRequest(c.Server, organizationName, apiProductName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListApiProductApis(ctx context.Context, organizationName Organization, apiProductName ApiProductName, params *ListApiProductApisParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListApiProductApisRequest(c.Server, organizationName, apiProductName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiProductApiSpecification(ctx context.Context, organizationName Organization, apiProductName ApiProductName, apiName ApiName, params *GetApiProductApiSpecificationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiProductApiSpecificationRequest(c.Server, organizationName, apiProductName, apiName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAppReferencesToAPIProducts(ctx context.Context, organizationName Organization, apiProductName ApiProductName, params *ListAppReferencesToAPIProductsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAppReferencesToAPIProductsRequest(c.Server, organizationName, apiProductName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiProductAttribute(ctx context.Context, organizationName Organization, apiProductName ApiProductName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiProductAttributeRequest(c.Server, organizationName, apiProductName, attributeName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiProductAttribute(ctx context.Context, organizationName Organization, apiProductName ApiProductName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiProductAttributeRequest(c.Server, organizationName, apiProductName, attributeName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateApiProductAttributeWithBody(ctx context.Context, organizationName Organization, apiProductName ApiProductName, attributeName AttributeName, params *UpdateApiProductAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateApiProductAttributeRequestWithBody(c.Server, organizationName, apiProductName, attributeName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApiProductAttributeWithBody(ctx context.Context, organizationName Organization, apiProductName ApiProductName, attributeName AttributeName, params *CreateApiProductAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApiProductAttributeRequestWithBody(c.Server, organizationName, apiProductName, attributeName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDerivedApiProducts(ctx context.Context, organizationName Organization, apiProductName ApiProductName, params *ListDerivedApiProductsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDerivedApiProductsRequest(c.Server, organizationName, apiProductName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDerivedApiProductWithBody(ctx context.Context, organizationName Organization, apiProductName ApiProductName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDerivedApiProductRequestWithBody(c.Server, organizationName, apiProductName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDerivedApiProduct(ctx context.Context, organizationName Organization, apiProductName ApiProductName, body CreateDerivedApiProductJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDerivedApiProductRequest(c.Server, organizationName, apiProductName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiProductMetaAttribute(ctx context.Context, organizationName Organization, apiProductName ApiProductName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiProductMetaAttributeRequest(c.Server, organizationName, apiProductName, attributeName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiProductMetaAttribute(ctx context.Context, organizationName Organization, apiProductName ApiProductName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiProductMetaAttributeRequest(c.Server, organizationName, apiProductName, attributeName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateApiProductMetaAttributeWithBody(ctx context.Context, organizationName Organization, apiProductName ApiProductName, attributeName AttributeName, params *UpdateApiProductMetaAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateApiProductMetaAttributeRequestWithBody(c.Server, organizationName, apiProductName, attributeName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApiProductMetaAttributeWithBody(ctx context.Context, organizationName Organization, apiProductName ApiProductName, attributeName AttributeName, params *CreateApiProductMetaAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApiProductMetaAttributeRequestWithBody(c.Server, organizationName, apiProductName, attributeName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListApiProductRevisions(ctx context.Context, organizationName Organization, apiProductName ApiProductName, params *ListApiProductRevisionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListApiProductRevisionsRequest(c.Server, organizationName, apiProductName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiProductRevision(ctx context.Context, organizationName Organization, apiProductName ApiProductName, semver Semver, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiProductRevisionRequest(c.Server, organizationName, apiProductName, semver)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListApis(ctx context.Context, organizationName Organization, params *ListApisParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListApisRequest(c.Server, organizationName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImportApiWithBody(ctx context.Context, organizationName Organization, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImportApiRequestWithBody(c.Server, organizationName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImportApi(ctx context.Context, organizationName Organization, body ImportApiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImportApiRequest(c.Server, organizationName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApi(ctx context.Context, organizationName Organization, apiName ApiName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiRequest(c.Server, organizationName, apiName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApi(ctx context.Context, organizationName Organization, apiName ApiName, params *GetApiParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiRequest(c.Server, organizationName, apiName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateApiWithBody(ctx context.Context, organizationName Organization, apiName ApiName, params *UpdateApiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateApiRequestWithBody(c.Server, organizationName, apiName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApiWithBody(ctx context.Context, organizationName Organization, apiName ApiName, params *CreateApiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApiRequestWithBody(c.Server, organizationName, apiName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiReferencedByAPIProducts(ctx context.Context, organizationName Organization, apiName ApiName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiReferencedByAPIProductsRequest(c.Server, organizationName, apiName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiAttribute(ctx context.Context, organizationName Organization, apiName ApiName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiAttributeRequest(c.Server, organizationName, apiName, attributeName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiAttribute(ctx context.Context, organizationName Organization, apiName ApiName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiAttributeRequest(c.Server, organizationName, apiName, attributeName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateApiAttributeWithBody(ctx context.Context, organizationName Organization, apiName ApiName, attributeName AttributeName, params *UpdateApiAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateApiAttributeRequestWithBody(c.Server, organizationName, apiName, attributeName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApiAttributeWithBody(ctx context.Context, organizationName Organization, apiName ApiName, attributeName AttributeName, params *CreateApiAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApiAttributeRequestWithBody(c.Server, organizationName, apiName, attributeName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiInfo(ctx context.Context, organizationName Organization, apiName ApiName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiInfoRequest(c.Server, organizationName, apiName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateApiInfoWithBody(ctx context.Context, organizationName Organization, apiName ApiName, params *UpdateApiInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateApiInfoRequestWithBody(c.Server, organizationName, apiName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateApiInfo(ctx context.Context, organizationName Organization, apiName ApiName, params *UpdateApiInfoParams, body UpdateApiInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateApiInfoRequest(c.Server, organizationName, apiName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiMetaAttribute(ctx context.Context, organizationName Organization, apiName ApiName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiMetaAttributeRequest(c.Server, organizationName, apiName, attributeName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiMetaAttribute(ctx context.Context, organizationName Organization, apiName ApiName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiMetaAttributeRequest(c.Server, organizationName, apiName, attributeName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateApiMetaAttributeWithBody(ctx context.Context, organizationName Organization, apiName ApiName, attributeName AttributeName, params *UpdateApiMetaAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateApiMetaAttributeRequestWithBody(c.Server, organizationName, apiName, attributeName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApiMetaAttributeWithBody(ctx context.Context, organizationName Organization, apiName ApiName, attributeName AttributeName, params *CreateApiMetaAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApiMetaAttributeRequestWithBody(c.Server, organizationName, apiName, attributeName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListApiRevisions(ctx context.Context, organizationName Organization, apiName ApiName, params *ListApiRevisionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListApiRevisionsRequest(c.Server, organizationName, apiName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiRevision(ctx context.Context, organizationName Organization, apiName ApiName, version Version, params *GetApiRevisionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiRevisionRequest(c.Server, organizationName, apiName, version, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiRevisionAPIProductReferences(ctx context.Context, organizationName Organization, apiName ApiName, version Version, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiRevisionAPIProductReferencesRequest(c.Server, organizationName, apiName, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiVersionInfo(ctx context.Context, organizationName Organization, apiName ApiName, version Version, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiVersionInfoRequest(c.Server, organizationName, apiName, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateApiVersionInfoWithBody(ctx context.Context, organizationName Organization, apiName ApiName, version Version, params *UpdateApiVersionInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateApiVersionInfoRequestWithBody(c.Server, organizationName, apiName, version, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateApiVersionInfo(ctx context.Context, organizationName Organization, apiName ApiName, version Version, params *UpdateApiVersionInfoParams, body UpdateApiVersionInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateApiVersionInfoRequest(c.Server, organizationName, apiName, version, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListEPApplicationDomains(ctx context.Context, organizationName Organization, params *ListEPApplicationDomainsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListEPApplicationDomainsRequest(c.Server, organizationName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEPApplicationDomain(ctx context.Context, organizationName Organization, applicationDomainId ApplicationDomainId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEPApplicationDomainRequest(c.Server, organizationName, applicationDomainId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListApps(ctx context.Context, organizationName Organization, params *ListAppsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAppsRequest(c.Server, organizationName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApp(ctx context.Context, organizationName Organization, appName AppName, params *GetAppParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAppRequest(c.Server, organizationName, appName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAppApiSpecifications(ctx context.Context, organizationName Organization, appName AppName, params *ListAppApiSpecificationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAppApiSpecificationsRequest(c.Server, organizationName, appName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAppApiSpecification(ctx context.Context, organizationName Organization, appName AppName, apiName ApiName, params *GetAppApiSpecificationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAppApiSpecificationRequest(c.Server, organizationName, appName, apiName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAppStatus(ctx context.Context, organizationName Organization, appName AppName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAppStatusRequest(c.Server, organizationName, appName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAppConfigSets(ctx context.Context, organizationName Organization, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAppConfigSetsRequest(c.Server, organizationName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAppConfigSet(ctx context.Context, organizationName Organization, configSetName ConfigSetName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAppConfigSetRequest(c.Server, organizationName, configSetName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAppConfigSetSnapshots(ctx context.Context, organizationName Organization, configSetName ConfigSetName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAppConfigSetSnapshotsRequest(c.Server, organizationName, configSetName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAppConfigSnapshot(ctx context.Context, organizationName Organization, configSetName ConfigSetName, configSnapshotRevision ConfigSnapshotRevision, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAppConfigSnapshotRequest(c.Server, organizationName, configSetName, configSnapshotRevision)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDevelopers(ctx context.Context, organizationName Organization, params *ListDevelopersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDevelopersRequest(c.Server, organizationName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDeveloperWithBody(ctx context.Context, organizationName Organization, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDeveloperRequestWithBody(c.Server, organizationName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDeveloper(ctx context.Context, organizationName Organization, body CreateDeveloperJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDeveloperRequest(c.Server, organizationName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDeveloper(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDeveloperRequest(c.Server, organizationName, developerUsername)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeveloper(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeveloperRequest(c.Server, organizationName, developerUsername)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDeveloperWithBody(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, params *UpdateDeveloperParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDeveloperRequestWithBody(c.Server, organizationName, developerUsername, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDeveloper(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, params *UpdateDeveloperParams, body UpdateDeveloperJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDeveloperRequest(c.Server, organizationName, developerUsername, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDeveloperApps(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, params *ListDeveloperAppsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDeveloperAppsRequest(c.Server, organizationName, developerUsername, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDeveloperAppWithBody(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDeveloperAppRequestWithBody(c.Server, organizationName, developerUsername, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDeveloperApp(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, body CreateDeveloperAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDeveloperAppRequest(c.Server, organizationName, developerUsername, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDeveloperApp(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDeveloperAppRequest(c.Server, organizationName, developerUsername, appName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeveloperApp(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, params *GetDeveloperAppParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeveloperAppRequest(c.Server, organizationName, developerUsername, appName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDeveloperAppWithBody(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, params *UpdateDeveloperAppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDeveloperAppRequestWithBody(c.Server, organizationName, developerUsername, appName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDeveloperApp(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, params *UpdateDeveloperAppParams, body UpdateDeveloperAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDeveloperAppRequest(c.Server, organizationName, developerUsername, appName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDeveloperAppAttribute(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDeveloperAppAttributeRequest(c.Server, organizationName, developerUsername, appName, attributeName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeveloperAppAttribute(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeveloperAppAttributeRequest(c.Server, organizationName, developerUsername, appName, attributeName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDeveloperAppAttributeWithBody(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, attributeName AttributeName, params *UpdateDeveloperAppAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDeveloperAppAttributeRequestWithBody(c.Server, organizationName, developerUsername, appName, attributeName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDeveloperAppAttributeWithBody(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, attributeName AttributeName, params *CreateDeveloperAppAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDeveloperAppAttributeRequestWithBody(c.Server, organizationName, developerUsername, appName, attributeName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDeveloperAppCredentials(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDeveloperAppCredentialsRequest(c.Server, organizationName, developerUsername, appName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDeveloperAppCredentialsWithBody(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDeveloperAppCredentialsRequestWithBody(c.Server, organizationName, developerUsername, appName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDeveloperAppCredentials(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, body CreateDeveloperAppCredentialsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDeveloperAppCredentialsRequest(c.Server, organizationName, developerUsername, appName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDeveloperAppCredentials(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, consumerKey ConsumerKey, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDeveloperAppCredentialsRequest(c.Server, organizationName, developerUsername, appName, consumerKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDeveloperAppCredentialsWithBody(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, consumerKey ConsumerKey, params *UpdateDeveloperAppCredentialsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDeveloperAppCredentialsRequestWithBody(c.Server, organizationName, developerUsername, appName, consumerKey, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDeveloperAppCredentials(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, consumerKey ConsumerKey, params *UpdateDeveloperAppCredentialsParams, body UpdateDeveloperAppCredentialsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDeveloperAppCredentialsRequest(c.Server, organizationName, developerUsername, appName, consumerKey, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDeveloperAppWebHooks(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDeveloperAppWebHooksRequest(c.Server, organizationName, developerUsername, appName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDeveloperAppWebHookWithBody(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDeveloperAppWebHookRequestWithBody(c.Server, organizationName, developerUsername, appName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDeveloperAppWebHook(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, body CreateDeveloperAppWebHookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDeveloperAppWebHookRequest(c.Server, organizationName, developerUsername, appName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDeveloperAppWebHook(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, webhookName WebhookName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDeveloperAppWebHookRequest(c.Server, organizationName, developerUsername, appName, webhookName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeveloperAppWebHook(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, webhookName WebhookName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeveloperAppWebHookRequest(c.Server, organizationName, developerUsername, appName, webhookName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDeveloperAppWebHookWithBody(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, webhookName WebhookName, params *UpdateDeveloperAppWebHookParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDeveloperAppWebHookRequestWithBody(c.Server, organizationName, developerUsername, appName, webhookName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDeveloperAppWebHook(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, webhookName WebhookName, params *UpdateDeveloperAppWebHookParams, body UpdateDeveloperAppWebHookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDeveloperAppWebHookRequest(c.Server, organizationName, developerUsername, appName, webhookName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListEnvironments(ctx context.Context, organizationName Organization, params *ListEnvironmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListEnvironmentsRequest(c.Server, organizationName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEnvironmentWithBody(ctx context.Context, organizationName Organization, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEnvironmentRequestWithBody(c.Server, organizationName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEnvironment(ctx context.Context, organizationName Organization, body CreateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEnvironmentRequest(c.Server, organizationName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEnvironment(ctx context.Context, organizationName Organization, envName EnvName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEnvironmentRequest(c.Server, organizationName, envName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnvironment(ctx context.Context, organizationName Organization, envName EnvName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnvironmentRequest(c.Server, organizationName, envName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEnvironmentWithBody(ctx context.Context, organizationName Organization, envName EnvName, params *UpdateEnvironmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEnvironmentRequestWithBody(c.Server, organizationName, envName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEnvironment(ctx context.Context, organizationName Organization, envName EnvName, params *UpdateEnvironmentParams, body UpdateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEnvironmentRequest(c.Server, organizationName, envName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnvironmentReferencedByAPIProducts(ctx context.Context, organizationName Organization, envName EnvName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnvironmentReferencedByAPIProductsRequest(c.Server, organizationName, envName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListEventAPIProducts(ctx context.Context, organizationName Organization, params *ListEventAPIProductsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListEventAPIProductsRequest(c.Server, organizationName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEventAPIProduct(ctx context.Context, organizationName Organization, eventApiProductId EventApiProductId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEventAPIProductRequest(c.Server, organizationName, eventApiProductId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEventAPIProductAsyncAPI(ctx context.Context, organizationName Organization, eventApiProductId EventApiProductId, params *GetEventAPIProductAsyncAPIParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEventAPIProductAsyncAPIRequest(c.Server, organizationName, eventApiProductId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListHistory(ctx context.Context, organizationName Organization, params *ListHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListHistoryRequest(c.Server, organizationName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllImporterTypes(ctx context.Context, organizationName Organization, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllImporterTypesRequest(c.Server, organizationName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllImporters(ctx context.Context, organizationName Organization, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllImportersRequest(c.Server, organizationName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateImporterJobWithBody(ctx context.Context, organizationName Organization, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateImporterJobRequestWithBody(c.Server, organizationName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateImporterJob(ctx context.Context, organizationName Organization, body CreateImporterJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateImporterJobRequest(c.Server, organizationName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteImporterJob(ctx context.Context, organizationName Organization, importerJobName ImporterJobName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteImporterJobRequest(c.Server, organizationName, importerJobName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetImporterJob(ctx context.Context, organizationName Organization, importerJobName ImporterJobName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetImporterJobRequest(c.Server, organizationName, importerJobName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateImporterJobWithBody(ctx context.Context, organizationName Organization, importerJobName ImporterJobName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateImporterJobRequestWithBody(c.Server, organizationName, importerJobName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateImporterJob(ctx context.Context, organizationName Organization, importerJobName ImporterJobName, body UpdateImporterJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateImporterJobRequest(c.Server, organizationName, importerJobName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RunImporterJob(ctx context.Context, organizationName Organization, importerJobName ImporterJobName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRunImporterJobRequest(c.Server, organizationName, importerJobName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListJobs(ctx context.Context, organizationName Organization, params *ListJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListJobsRequest(c.Server, organizationName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListServices(ctx context.Context, organizationName Organization, params *ListServicesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListServicesRequest(c.Server, organizationName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListTeams(ctx context.Context, organizationName Organization, params *ListTeamsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListTeamsRequest(c.Server, organizationName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTeamWithBody(ctx context.Context, organizationName Organization, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTeamRequestWithBody(c.Server, organizationName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTeam(ctx context.Context, organizationName Organization, body CreateTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTeamRequest(c.Server, organizationName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTeam(ctx context.Context, organizationName Organization, teamName TeamName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTeamRequest(c.Server, organizationName, teamName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeam(ctx context.Context, organizationName Organization, teamName TeamName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamRequest(c.Server, organizationName, teamName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTeamWithBody(ctx context.Context, organizationName Organization, teamName TeamName, params *UpdateTeamParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTeamRequestWithBody(c.Server, organizationName, teamName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTeam(ctx context.Context, organizationName Organization, teamName TeamName, params *UpdateTeamParams, body UpdateTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTeamRequest(c.Server, organizationName, teamName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListTeamApps(ctx context.Context, organizationName Organization, teamName TeamName, params *ListTeamAppsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListTeamAppsRequest(c.Server, organizationName, teamName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTeamAppWithBody(ctx context.Context, organizationName Organization, teamName TeamName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTeamAppRequestWithBody(c.Server, organizationName, teamName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTeamApp(ctx context.Context, organizationName Organization, teamName TeamName, body CreateTeamAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTeamAppRequest(c.Server, organizationName, teamName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTeamApp(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTeamAppRequest(c.Server, organizationName, teamName, appName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeamApp(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, params *GetTeamAppParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamAppRequest(c.Server, organizationName, teamName, appName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTeamAppWithBody(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, params *UpdateTeamAppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTeamAppRequestWithBody(c.Server, organizationName, teamName, appName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTeamApp(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, params *UpdateTeamAppParams, body UpdateTeamAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTeamAppRequest(c.Server, organizationName, teamName, appName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTeamAppAttribute(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTeamAppAttributeRequest(c.Server, organizationName, teamName, appName, attributeName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeamAppAttribute(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamAppAttributeRequest(c.Server, organizationName, teamName, appName, attributeName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTeamAppAttributeWithBody(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, attributeName AttributeName, params *UpdateTeamAppAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTeamAppAttributeRequestWithBody(c.Server, organizationName, teamName, appName, attributeName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTeamAppAttributeWithBody(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, attributeName AttributeName, params *CreateTeamAppAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTeamAppAttributeRequestWithBody(c.Server, organizationName, teamName, appName, attributeName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListTeamAppCredentials(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListTeamAppCredentialsRequest(c.Server, organizationName, teamName, appName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTeamAppCredentialsWithBody(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTeamAppCredentialsRequestWithBody(c.Server, organizationName, teamName, appName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTeamAppCredentials(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, body CreateTeamAppCredentialsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTeamAppCredentialsRequest(c.Server, organizationName, teamName, appName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTeamAppCredentials(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, consumerKey ConsumerKey, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTeamAppCredentialsRequest(c.Server, organizationName, teamName, appName, consumerKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTeamAppCredentialsWithBody(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, consumerKey ConsumerKey, params *UpdateTeamAppCredentialsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTeamAppCredentialsRequestWithBody(c.Server, organizationName, teamName, appName, consumerKey, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTeamAppCredentials(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, consumerKey ConsumerKey, params *UpdateTeamAppCredentialsParams, body UpdateTeamAppCredentialsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTeamAppCredentialsRequest(c.Server, organizationName, teamName, appName, consumerKey, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListTeamAppWebHooks(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListTeamAppWebHooksRequest(c.Server, organizationName, teamName, appName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTeamAppWebHookWithBody(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTeamAppWebHookRequestWithBody(c.Server, organizationName, teamName, appName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTeamAppWebHook(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, body CreateTeamAppWebHookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTeamAppWebHookRequest(c.Server, organizationName, teamName, appName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTeamAppWebHook(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, webhookName WebhookName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTeamAppWebHookRequest(c.Server, organizationName, teamName, appName, webhookName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeamAppWebHook(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, webhookName WebhookName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamAppWebHookRequest(c.Server, organizationName, teamName, appName, webhookName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTeamAppWebHookWithBody(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, webhookName WebhookName, params *UpdateTeamAppWebHookParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTeamAppWebHookRequestWithBody(c.Server, organizationName, teamName, appName, webhookName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTeamAppWebHook(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, webhookName WebhookName, params *UpdateTeamAppWebHookParams, body UpdateTeamAppWebHookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTeamAppWebHookRequest(c.Server, organizationName, teamName, appName, webhookName, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetToken(ctx context.Context, organizationName Organization, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTokenRequest(c.Server, organizationName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTokenWithBody(ctx context.Context, organizationName Organization, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTokenRequestWithBody(c.Server, organizationName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateToken(ctx context.Context, organizationName Organization, body UpdateTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTokenRequest(c.Server, organizationName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAboutRequest generates requests for About
func NewAboutRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/about")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListOrganizationsRequest generates requests for ListOrganizations
func NewListOrganizationsRequest(server string, params *ListOrganizationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNumber", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortFieldName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortFieldName", runtime.ParamLocationQuery, *params.SortFieldName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortDirection != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortDirection", runtime.ParamLocationQuery, *params.SortDirection); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrganizationRequest calls the generic CreateOrganization builder with application/json body
func NewCreateOrganizationRequest(server string, body CreateOrganizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrganizationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateOrganizationRequestWithBody generates requests for CreateOrganization with any type of body
func NewCreateOrganizationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrganizationRequest generates requests for DeleteOrganization
func NewDeleteOrganizationRequest(server string, organizationName Organization) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationRequest generates requests for GetOrganization
func NewGetOrganizationRequest(server string, organizationName Organization) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateOrganizationRequest calls the generic UpdateOrganization builder with application/json body
func NewUpdateOrganizationRequest(server string, organizationName Organization, params *UpdateOrganizationParams, body UpdateOrganizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateOrganizationRequestWithBody(server, organizationName, params, "application/json", bodyReader)
}

// NewUpdateOrganizationRequestWithBody generates requests for UpdateOrganization with any type of body
func NewUpdateOrganizationRequestWithBody(server string, organizationName Organization, params *UpdateOrganizationParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.IfMatch != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
		if err != nil {
			return nil, err
		}

		req.Header.Set("If-Match", headerParam0)
	}

	return req, nil
}

// NewListApiProductsRequest generates requests for ListApiProducts
func NewListApiProductsRequest(server string, organizationName Organization, params *ListApiProductsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/apiProducts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNumber", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortFieldName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortFieldName", runtime.ParamLocationQuery, *params.SortFieldName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortDirection != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortDirection", runtime.ParamLocationQuery, *params.SortDirection); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateApiProductRequest calls the generic CreateApiProduct builder with application/json body
func NewCreateApiProductRequest(server string, organizationName Organization, body CreateApiProductJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateApiProductRequestWithBody(server, organizationName, "application/json", bodyReader)
}

// NewCreateApiProductRequestWithBody generates requests for CreateApiProduct with any type of body
func NewCreateApiProductRequestWithBody(server string, organizationName Organization, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/apiProducts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiProductRequest generates requests for DeleteApiProduct
func NewDeleteApiProductRequest(server string, organizationName Organization, apiProductName ApiProductName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "api_product_name", runtime.ParamLocationPath, apiProductName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/apiProducts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiProductRequest generates requests for GetApiProduct
func NewGetApiProductRequest(server string, organizationName Organization, apiProductName ApiProductName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "api_product_name", runtime.ParamLocationPath, apiProductName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/apiProducts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateApiProductRequest calls the generic UpdateApiProduct builder with application/json body
func NewUpdateApiProductRequest(server string, organizationName Organization, apiProductName ApiProductName, params *UpdateApiProductParams, body UpdateApiProductJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateApiProductRequestWithBody(server, organizationName, apiProductName, params, "application/json", bodyReader)
}

// NewUpdateApiProductRequestWithBody generates requests for UpdateApiProduct with any type of body
func NewUpdateApiProductRequestWithBody(server string, organizationName Organization, apiProductName ApiProductName, params *UpdateApiProductParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "api_product_name", runtime.ParamLocationPath, apiProductName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/apiProducts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.IfMatch != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
		if err != nil {
			return nil, err
		}

		req.Header.Set("If-Match", headerParam0)
	}

	return req, nil
}

// NewListApiProductApisRequest generates requests for ListApiProductApis
func NewListApiProductApisRequest(server string, organizationName Organization, apiProductName ApiProductName, params *ListApiProductApisParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "api_product_name", runtime.ParamLocationPath, apiProductName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/apiProducts/%s/apis", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNumber", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortFieldName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortFieldName", runtime.ParamLocationQuery, *params.SortFieldName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortDirection != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortDirection", runtime.ParamLocationQuery, *params.SortDirection); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiProductApiSpecificationRequest generates requests for GetApiProductApiSpecification
func NewGetApiProductApiSpecificationRequest(server string, organizationName Organization, apiProductName ApiProductName, apiName ApiName, params *GetApiProductApiSpecificationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "api_product_name", runtime.ParamLocationPath, apiProductName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "api_name", runtime.ParamLocationPath, apiName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/apiProducts/%s/apis/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListAppReferencesToAPIProductsRequest generates requests for ListAppReferencesToAPIProducts
func NewListAppReferencesToAPIProductsRequest(server string, organizationName Organization, apiProductName ApiProductName, params *ListAppReferencesToAPIProductsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "api_product_name", runtime.ParamLocationPath, apiProductName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/apiProducts/%s/apps", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNumber", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortFieldName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortFieldName", runtime.ParamLocationQuery, *params.SortFieldName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortDirection != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortDirection", runtime.ParamLocationQuery, *params.SortDirection); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiProductAttributeRequest generates requests for DeleteApiProductAttribute
func NewDeleteApiProductAttributeRequest(server string, organizationName Organization, apiProductName ApiProductName, attributeName AttributeName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "api_product_name", runtime.ParamLocationPath, apiProductName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "attributeName", runtime.ParamLocationPath, attributeName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/apiProducts/%s/attributes/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiProductAttributeRequest generates requests for GetApiProductAttribute
func NewGetApiProductAttributeRequest(server string, organizationName Organization, apiProductName ApiProductName, attributeName AttributeName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "api_product_name", runtime.ParamLocationPath, apiProductName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "attributeName", runtime.ParamLocationPath, attributeName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/apiProducts/%s/attributes/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateApiProductAttributeRequestWithBody generates requests for UpdateApiProductAttribute with any type of body
func NewUpdateApiProductAttributeRequestWithBody(server string, organizationName Organization, apiProductName ApiProductName, attributeName AttributeName, params *UpdateApiProductAttributeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "api_product_name", runtime.ParamLocationPath, apiProductName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "attributeName", runtime.ParamLocationPath, attributeName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/apiProducts/%s/attributes/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.IfMatch != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
		if err != nil {
			return nil, err
		}

		req.Header.Set("If-Match", headerParam0)
	}

	return req, nil
}

// NewCreateApiProductAttributeRequestWithBody generates requests for CreateApiProductAttribute with any type of body
func NewCreateApiProductAttributeRequestWithBody(server string, organizationName Organization, apiProductName ApiProductName, attributeName AttributeName, params *CreateApiProductAttributeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "api_product_name", runtime.ParamLocationPath, apiProductName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "attributeName", runtime.ParamLocationPath, attributeName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/apiProducts/%s/attributes/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.IfMatch != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
		if err != nil {
			return nil, err
		}

		req.Header.Set("If-Match", headerParam0)
	}

	return req, nil
}

// NewListDerivedApiProductsRequest generates requests for ListDerivedApiProducts
func NewListDerivedApiProductsRequest(server string, organizationName Organization, apiProductName ApiProductName, params *ListDerivedApiProductsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "api_product_name", runtime.ParamLocationPath, apiProductName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/apiProducts/%s/derived", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNumber", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortFieldName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortFieldName", runtime.ParamLocationQuery, *params.SortFieldName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortDirection != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortDirection", runtime.ParamLocationQuery, *params.SortDirection); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDerivedApiProductRequest calls the generic CreateDerivedApiProduct builder with application/json body
func NewCreateDerivedApiProductRequest(server string, organizationName Organization, apiProductName ApiProductName, body CreateDerivedApiProductJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDerivedApiProductRequestWithBody(server, organizationName, apiProductName, "application/json", bodyReader)
}

// NewCreateDerivedApiProductRequestWithBody generates requests for CreateDerivedApiProduct with any type of body
func NewCreateDerivedApiProductRequestWithBody(server string, organizationName Organization, apiProductName ApiProductName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "api_product_name", runtime.ParamLocationPath, apiProductName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/apiProducts/%s/derived", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiProductMetaAttributeRequest generates requests for DeleteApiProductMetaAttribute
func NewDeleteApiProductMetaAttributeRequest(server string, organizationName Organization, apiProductName ApiProductName, attributeName AttributeName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "api_product_name", runtime.ParamLocationPath, apiProductName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "attributeName", runtime.ParamLocationPath, attributeName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/apiProducts/%s/meta/attributes/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiProductMetaAttributeRequest generates requests for GetApiProductMetaAttribute
func NewGetApiProductMetaAttributeRequest(server string, organizationName Organization, apiProductName ApiProductName, attributeName AttributeName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "api_product_name", runtime.ParamLocationPath, apiProductName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "attributeName", runtime.ParamLocationPath, attributeName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/apiProducts/%s/meta/attributes/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateApiProductMetaAttributeRequestWithBody generates requests for UpdateApiProductMetaAttribute with any type of body
func NewUpdateApiProductMetaAttributeRequestWithBody(server string, organizationName Organization, apiProductName ApiProductName, attributeName AttributeName, params *UpdateApiProductMetaAttributeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "api_product_name", runtime.ParamLocationPath, apiProductName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "attributeName", runtime.ParamLocationPath, attributeName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/apiProducts/%s/meta/attributes/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.IfMatch != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
		if err != nil {
			return nil, err
		}

		req.Header.Set("If-Match", headerParam0)
	}

	return req, nil
}

// NewCreateApiProductMetaAttributeRequestWithBody generates requests for CreateApiProductMetaAttribute with any type of body
func NewCreateApiProductMetaAttributeRequestWithBody(server string, organizationName Organization, apiProductName ApiProductName, attributeName AttributeName, params *CreateApiProductMetaAttributeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "api_product_name", runtime.ParamLocationPath, apiProductName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "attributeName", runtime.ParamLocationPath, attributeName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/apiProducts/%s/meta/attributes/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.IfMatch != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
		if err != nil {
			return nil, err
		}

		req.Header.Set("If-Match", headerParam0)
	}

	return req, nil
}

// NewListApiProductRevisionsRequest generates requests for ListApiProductRevisions
func NewListApiProductRevisionsRequest(server string, organizationName Organization, apiProductName ApiProductName, params *ListApiProductRevisionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "api_product_name", runtime.ParamLocationPath, apiProductName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/apiProducts/%s/revisions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNumber", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortFieldName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortFieldName", runtime.ParamLocationQuery, *params.SortFieldName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortDirection != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortDirection", runtime.ParamLocationQuery, *params.SortDirection); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiProductRevisionRequest generates requests for GetApiProductRevision
func NewGetApiProductRevisionRequest(server string, organizationName Organization, apiProductName ApiProductName, semver Semver) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "api_product_name", runtime.ParamLocationPath, apiProductName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "semver", runtime.ParamLocationPath, semver)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/apiProducts/%s/revisions/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListApisRequest generates requests for ListApis
func NewListApisRequest(server string, organizationName Organization, params *ListApisParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/apis", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNumber", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortFieldName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortFieldName", runtime.ParamLocationQuery, *params.SortFieldName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortDirection != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortDirection", runtime.ParamLocationQuery, *params.SortDirection); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewImportApiRequest calls the generic ImportApi builder with application/json body
func NewImportApiRequest(server string, organizationName Organization, body ImportApiJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewImportApiRequestWithBody(server, organizationName, "application/json", bodyReader)
}

// NewImportApiRequestWithBody generates requests for ImportApi with any type of body
func NewImportApiRequestWithBody(server string, organizationName Organization, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/apis", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiRequest generates requests for DeleteApi
func NewDeleteApiRequest(server string, organizationName Organization, apiName ApiName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "api_name", runtime.ParamLocationPath, apiName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/apis/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiRequest generates requests for GetApi
func NewGetApiRequest(server string, organizationName Organization, apiName ApiName, params *GetApiParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "api_name", runtime.ParamLocationPath, apiName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/apis/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateApiRequestWithBody generates requests for UpdateApi with any type of body
func NewUpdateApiRequestWithBody(server string, organizationName Organization, apiName ApiName, params *UpdateApiParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "api_name", runtime.ParamLocationPath, apiName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/apis/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.IfMatch != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
		if err != nil {
			return nil, err
		}

		req.Header.Set("If-Match", headerParam0)
	}

	return req, nil
}

// NewCreateApiRequestWithBody generates requests for CreateApi with any type of body
func NewCreateApiRequestWithBody(server string, organizationName Organization, apiName ApiName, params *CreateApiParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "api_name", runtime.ParamLocationPath, apiName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/apis/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Mode != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mode", runtime.ParamLocationQuery, *params.Mode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiReferencedByAPIProductsRequest generates requests for GetApiReferencedByAPIProducts
func NewGetApiReferencedByAPIProductsRequest(server string, organizationName Organization, apiName ApiName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "api_name", runtime.ParamLocationPath, apiName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/apis/%s/apiProducts", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiAttributeRequest generates requests for DeleteApiAttribute
func NewDeleteApiAttributeRequest(server string, organizationName Organization, apiName ApiName, attributeName AttributeName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "api_name", runtime.ParamLocationPath, apiName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "attributeName", runtime.ParamLocationPath, attributeName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/apis/%s/attributes/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiAttributeRequest generates requests for GetApiAttribute
func NewGetApiAttributeRequest(server string, organizationName Organization, apiName ApiName, attributeName AttributeName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "api_name", runtime.ParamLocationPath, apiName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "attributeName", runtime.ParamLocationPath, attributeName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/apis/%s/attributes/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateApiAttributeRequestWithBody generates requests for UpdateApiAttribute with any type of body
func NewUpdateApiAttributeRequestWithBody(server string, organizationName Organization, apiName ApiName, attributeName AttributeName, params *UpdateApiAttributeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "api_name", runtime.ParamLocationPath, apiName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "attributeName", runtime.ParamLocationPath, attributeName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/apis/%s/attributes/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.IfMatch != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
		if err != nil {
			return nil, err
		}

		req.Header.Set("If-Match", headerParam0)
	}

	return req, nil
}

// NewCreateApiAttributeRequestWithBody generates requests for CreateApiAttribute with any type of body
func NewCreateApiAttributeRequestWithBody(server string, organizationName Organization, apiName ApiName, attributeName AttributeName, params *CreateApiAttributeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "api_name", runtime.ParamLocationPath, apiName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "attributeName", runtime.ParamLocationPath, attributeName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/apis/%s/attributes/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.IfMatch != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
		if err != nil {
			return nil, err
		}

		req.Header.Set("If-Match", headerParam0)
	}

	return req, nil
}

// NewGetApiInfoRequest generates requests for GetApiInfo
func NewGetApiInfoRequest(server string, organizationName Organization, apiName ApiName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "api_name", runtime.ParamLocationPath, apiName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/apis/%s/info", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateApiInfoRequest calls the generic UpdateApiInfo builder with application/json body
func NewUpdateApiInfoRequest(server string, organizationName Organization, apiName ApiName, params *UpdateApiInfoParams, body UpdateApiInfoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateApiInfoRequestWithBody(server, organizationName, apiName, params, "application/json", bodyReader)
}

// NewUpdateApiInfoRequestWithBody generates requests for UpdateApiInfo with any type of body
func NewUpdateApiInfoRequestWithBody(server string, organizationName Organization, apiName ApiName, params *UpdateApiInfoParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "api_name", runtime.ParamLocationPath, apiName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/apis/%s/info", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.IfMatch != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
		if err != nil {
			return nil, err
		}

		req.Header.Set("If-Match", headerParam0)
	}

	return req, nil
}

// NewDeleteApiMetaAttributeRequest generates requests for DeleteApiMetaAttribute
func NewDeleteApiMetaAttributeRequest(server string, organizationName Organization, apiName ApiName, attributeName AttributeName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "api_name", runtime.ParamLocationPath, apiName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "attributeName", runtime.ParamLocationPath, attributeName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/apis/%s/meta/attributes/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiMetaAttributeRequest generates requests for GetApiMetaAttribute
func NewGetApiMetaAttributeRequest(server string, organizationName Organization, apiName ApiName, attributeName AttributeName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "api_name", runtime.ParamLocationPath, apiName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "attributeName", runtime.ParamLocationPath, attributeName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/apis/%s/meta/attributes/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateApiMetaAttributeRequestWithBody generates requests for UpdateApiMetaAttribute with any type of body
func NewUpdateApiMetaAttributeRequestWithBody(server string, organizationName Organization, apiName ApiName, attributeName AttributeName, params *UpdateApiMetaAttributeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "api_name", runtime.ParamLocationPath, apiName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "attributeName", runtime.ParamLocationPath, attributeName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/apis/%s/meta/attributes/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.IfMatch != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
		if err != nil {
			return nil, err
		}

		req.Header.Set("If-Match", headerParam0)
	}

	return req, nil
}

// NewCreateApiMetaAttributeRequestWithBody generates requests for CreateApiMetaAttribute with any type of body
func NewCreateApiMetaAttributeRequestWithBody(server string, organizationName Organization, apiName ApiName, attributeName AttributeName, params *CreateApiMetaAttributeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "api_name", runtime.ParamLocationPath, apiName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "attributeName", runtime.ParamLocationPath, attributeName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/apis/%s/meta/attributes/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.IfMatch != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
		if err != nil {
			return nil, err
		}

		req.Header.Set("If-Match", headerParam0)
	}

	return req, nil
}

// NewListApiRevisionsRequest generates requests for ListApiRevisions
func NewListApiRevisionsRequest(server string, organizationName Organization, apiName ApiName, params *ListApiRevisionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "api_name", runtime.ParamLocationPath, apiName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/apis/%s/revisions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNumber", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortFieldName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortFieldName", runtime.ParamLocationQuery, *params.SortFieldName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortDirection != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortDirection", runtime.ParamLocationQuery, *params.SortDirection); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiRevisionRequest generates requests for GetApiRevision
func NewGetApiRevisionRequest(server string, organizationName Organization, apiName ApiName, version Version, params *GetApiRevisionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "api_name", runtime.ParamLocationPath, apiName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/apis/%s/revisions/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiRevisionAPIProductReferencesRequest generates requests for GetApiRevisionAPIProductReferences
func NewGetApiRevisionAPIProductReferencesRequest(server string, organizationName Organization, apiName ApiName, version Version) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "api_name", runtime.ParamLocationPath, apiName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/apis/%s/revisions/%s/apiProducts", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiVersionInfoRequest generates requests for GetApiVersionInfo
func NewGetApiVersionInfoRequest(server string, organizationName Organization, apiName ApiName, version Version) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "api_name", runtime.ParamLocationPath, apiName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/apis/%s/revisions/%s/info", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateApiVersionInfoRequest calls the generic UpdateApiVersionInfo builder with application/json body
func NewUpdateApiVersionInfoRequest(server string, organizationName Organization, apiName ApiName, version Version, params *UpdateApiVersionInfoParams, body UpdateApiVersionInfoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateApiVersionInfoRequestWithBody(server, organizationName, apiName, version, params, "application/json", bodyReader)
}

// NewUpdateApiVersionInfoRequestWithBody generates requests for UpdateApiVersionInfo with any type of body
func NewUpdateApiVersionInfoRequestWithBody(server string, organizationName Organization, apiName ApiName, version Version, params *UpdateApiVersionInfoParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "api_name", runtime.ParamLocationPath, apiName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/apis/%s/revisions/%s/info", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.IfMatch != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
		if err != nil {
			return nil, err
		}

		req.Header.Set("If-Match", headerParam0)
	}

	return req, nil
}

// NewListEPApplicationDomainsRequest generates requests for ListEPApplicationDomains
func NewListEPApplicationDomainsRequest(server string, organizationName Organization, params *ListEPApplicationDomainsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/applicationDomains", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNumber", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEPApplicationDomainRequest generates requests for GetEPApplicationDomain
func NewGetEPApplicationDomainRequest(server string, organizationName Organization, applicationDomainId ApplicationDomainId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "application_domain_id", runtime.ParamLocationPath, applicationDomainId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/applicationDomains/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListAppsRequest generates requests for ListApps
func NewListAppsRequest(server string, organizationName Organization, params *ListAppsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/apps", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNumber", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortFieldName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortFieldName", runtime.ParamLocationQuery, *params.SortFieldName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortDirection != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortDirection", runtime.ParamLocationQuery, *params.SortDirection); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAppRequest generates requests for GetApp
func NewGetAppRequest(server string, organizationName Organization, appName AppName, params *GetAppParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "app_name", runtime.ParamLocationPath, appName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/apps/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TopicSyntax != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "topicSyntax", runtime.ParamLocationQuery, *params.TopicSyntax); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListAppApiSpecificationsRequest generates requests for ListAppApiSpecifications
func NewListAppApiSpecificationsRequest(server string, organizationName Organization, appName AppName, params *ListAppApiSpecificationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "app_name", runtime.ParamLocationPath, appName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/apps/%s/apis", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNumber", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortFieldName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortFieldName", runtime.ParamLocationQuery, *params.SortFieldName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortDirection != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortDirection", runtime.ParamLocationQuery, *params.SortDirection); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAppApiSpecificationRequest generates requests for GetAppApiSpecification
func NewGetAppApiSpecificationRequest(server string, organizationName Organization, appName AppName, apiName ApiName, params *GetAppApiSpecificationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "app_name", runtime.ParamLocationPath, appName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "api_name", runtime.ParamLocationPath, apiName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/apps/%s/apis/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAppStatusRequest generates requests for GetAppStatus
func NewGetAppStatusRequest(server string, organizationName Organization, appName AppName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "app_name", runtime.ParamLocationPath, appName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/apps/%s/status", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListAppConfigSetsRequest generates requests for ListAppConfigSets
func NewListAppConfigSetsRequest(server string, organizationName Organization) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/configSets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAppConfigSetRequest generates requests for GetAppConfigSet
func NewGetAppConfigSetRequest(server string, organizationName Organization, configSetName ConfigSetName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "config_set_name", runtime.ParamLocationPath, configSetName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/configSets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListAppConfigSetSnapshotsRequest generates requests for ListAppConfigSetSnapshots
func NewListAppConfigSetSnapshotsRequest(server string, organizationName Organization, configSetName ConfigSetName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "config_set_name", runtime.ParamLocationPath, configSetName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/configSets/%s/snapshots", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAppConfigSnapshotRequest generates requests for GetAppConfigSnapshot
func NewGetAppConfigSnapshotRequest(server string, organizationName Organization, configSetName ConfigSetName, configSnapshotRevision ConfigSnapshotRevision) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "config_set_name", runtime.ParamLocationPath, configSetName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "config_snapshot_revision", runtime.ParamLocationPath, configSnapshotRevision)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/configSets/%s/snapshots/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListDevelopersRequest generates requests for ListDevelopers
func NewListDevelopersRequest(server string, organizationName Organization, params *ListDevelopersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/developers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNumber", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortFieldName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortFieldName", runtime.ParamLocationQuery, *params.SortFieldName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortDirection != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortDirection", runtime.ParamLocationQuery, *params.SortDirection); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDeveloperRequest calls the generic CreateDeveloper builder with application/json body
func NewCreateDeveloperRequest(server string, organizationName Organization, body CreateDeveloperJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDeveloperRequestWithBody(server, organizationName, "application/json", bodyReader)
}

// NewCreateDeveloperRequestWithBody generates requests for CreateDeveloper with any type of body
func NewCreateDeveloperRequestWithBody(server string, organizationName Organization, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/developers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDeveloperRequest generates requests for DeleteDeveloper
func NewDeleteDeveloperRequest(server string, organizationName Organization, developerUsername DeveloperUsername) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "developer_username", runtime.ParamLocationPath, developerUsername)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/developers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDeveloperRequest generates requests for GetDeveloper
func NewGetDeveloperRequest(server string, organizationName Organization, developerUsername DeveloperUsername) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "developer_username", runtime.ParamLocationPath, developerUsername)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/developers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateDeveloperRequest calls the generic UpdateDeveloper builder with application/json body
func NewUpdateDeveloperRequest(server string, organizationName Organization, developerUsername DeveloperUsername, params *UpdateDeveloperParams, body UpdateDeveloperJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDeveloperRequestWithBody(server, organizationName, developerUsername, params, "application/json", bodyReader)
}

// NewUpdateDeveloperRequestWithBody generates requests for UpdateDeveloper with any type of body
func NewUpdateDeveloperRequestWithBody(server string, organizationName Organization, developerUsername DeveloperUsername, params *UpdateDeveloperParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "developer_username", runtime.ParamLocationPath, developerUsername)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/developers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.IfMatch != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
		if err != nil {
			return nil, err
		}

		req.Header.Set("If-Match", headerParam0)
	}

	return req, nil
}

// NewListDeveloperAppsRequest generates requests for ListDeveloperApps
func NewListDeveloperAppsRequest(server string, organizationName Organization, developerUsername DeveloperUsername, params *ListDeveloperAppsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "developer_username", runtime.ParamLocationPath, developerUsername)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/developers/%s/apps", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNumber", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortFieldName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortFieldName", runtime.ParamLocationQuery, *params.SortFieldName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortDirection != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortDirection", runtime.ParamLocationQuery, *params.SortDirection); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDeveloperAppRequest calls the generic CreateDeveloperApp builder with application/json body
func NewCreateDeveloperAppRequest(server string, organizationName Organization, developerUsername DeveloperUsername, body CreateDeveloperAppJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDeveloperAppRequestWithBody(server, organizationName, developerUsername, "application/json", bodyReader)
}

// NewCreateDeveloperAppRequestWithBody generates requests for CreateDeveloperApp with any type of body
func NewCreateDeveloperAppRequestWithBody(server string, organizationName Organization, developerUsername DeveloperUsername, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "developer_username", runtime.ParamLocationPath, developerUsername)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/developers/%s/apps", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDeveloperAppRequest generates requests for DeleteDeveloperApp
func NewDeleteDeveloperAppRequest(server string, organizationName Organization, developerUsername DeveloperUsername, appName AppName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "developer_username", runtime.ParamLocationPath, developerUsername)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "app_name", runtime.ParamLocationPath, appName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/developers/%s/apps/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDeveloperAppRequest generates requests for GetDeveloperApp
func NewGetDeveloperAppRequest(server string, organizationName Organization, developerUsername DeveloperUsername, appName AppName, params *GetDeveloperAppParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "developer_username", runtime.ParamLocationPath, developerUsername)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "app_name", runtime.ParamLocationPath, appName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/developers/%s/apps/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TopicSyntax != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "topicSyntax", runtime.ParamLocationQuery, *params.TopicSyntax); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateDeveloperAppRequest calls the generic UpdateDeveloperApp builder with application/json body
func NewUpdateDeveloperAppRequest(server string, organizationName Organization, developerUsername DeveloperUsername, appName AppName, params *UpdateDeveloperAppParams, body UpdateDeveloperAppJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDeveloperAppRequestWithBody(server, organizationName, developerUsername, appName, params, "application/json", bodyReader)
}

// NewUpdateDeveloperAppRequestWithBody generates requests for UpdateDeveloperApp with any type of body
func NewUpdateDeveloperAppRequestWithBody(server string, organizationName Organization, developerUsername DeveloperUsername, appName AppName, params *UpdateDeveloperAppParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "developer_username", runtime.ParamLocationPath, developerUsername)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "app_name", runtime.ParamLocationPath, appName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/developers/%s/apps/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.IfMatch != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
		if err != nil {
			return nil, err
		}

		req.Header.Set("If-Match", headerParam0)
	}

	return req, nil
}

// NewDeleteDeveloperAppAttributeRequest generates requests for DeleteDeveloperAppAttribute
func NewDeleteDeveloperAppAttributeRequest(server string, organizationName Organization, developerUsername DeveloperUsername, appName AppName, attributeName AttributeName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "developer_username", runtime.ParamLocationPath, developerUsername)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "app_name", runtime.ParamLocationPath, appName)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "attributeName", runtime.ParamLocationPath, attributeName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/developers/%s/apps/%s/attributes/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDeveloperAppAttributeRequest generates requests for GetDeveloperAppAttribute
func NewGetDeveloperAppAttributeRequest(server string, organizationName Organization, developerUsername DeveloperUsername, appName AppName, attributeName AttributeName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "developer_username", runtime.ParamLocationPath, developerUsername)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "app_name", runtime.ParamLocationPath, appName)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "attributeName", runtime.ParamLocationPath, attributeName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/developers/%s/apps/%s/attributes/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateDeveloperAppAttributeRequestWithBody generates requests for UpdateDeveloperAppAttribute with any type of body
func NewUpdateDeveloperAppAttributeRequestWithBody(server string, organizationName Organization, developerUsername DeveloperUsername, appName AppName, attributeName AttributeName, params *UpdateDeveloperAppAttributeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "developer_username", runtime.ParamLocationPath, developerUsername)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "app_name", runtime.ParamLocationPath, appName)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "attributeName", runtime.ParamLocationPath, attributeName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/developers/%s/apps/%s/attributes/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.IfMatch != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
		if err != nil {
			return nil, err
		}

		req.Header.Set("If-Match", headerParam0)
	}

	return req, nil
}

// NewCreateDeveloperAppAttributeRequestWithBody generates requests for CreateDeveloperAppAttribute with any type of body
func NewCreateDeveloperAppAttributeRequestWithBody(server string, organizationName Organization, developerUsername DeveloperUsername, appName AppName, attributeName AttributeName, params *CreateDeveloperAppAttributeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "developer_username", runtime.ParamLocationPath, developerUsername)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "app_name", runtime.ParamLocationPath, appName)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "attributeName", runtime.ParamLocationPath, attributeName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/developers/%s/apps/%s/attributes/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.IfMatch != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
		if err != nil {
			return nil, err
		}

		req.Header.Set("If-Match", headerParam0)
	}

	return req, nil
}

// NewListDeveloperAppCredentialsRequest generates requests for ListDeveloperAppCredentials
func NewListDeveloperAppCredentialsRequest(server string, organizationName Organization, developerUsername DeveloperUsername, appName AppName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "developer_username", runtime.ParamLocationPath, developerUsername)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "app_name", runtime.ParamLocationPath, appName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/developers/%s/apps/%s/credentials", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDeveloperAppCredentialsRequest calls the generic CreateDeveloperAppCredentials builder with application/json body
func NewCreateDeveloperAppCredentialsRequest(server string, organizationName Organization, developerUsername DeveloperUsername, appName AppName, body CreateDeveloperAppCredentialsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDeveloperAppCredentialsRequestWithBody(server, organizationName, developerUsername, appName, "application/json", bodyReader)
}

// NewCreateDeveloperAppCredentialsRequestWithBody generates requests for CreateDeveloperAppCredentials with any type of body
func NewCreateDeveloperAppCredentialsRequestWithBody(server string, organizationName Organization, developerUsername DeveloperUsername, appName AppName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "developer_username", runtime.ParamLocationPath, developerUsername)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "app_name", runtime.ParamLocationPath, appName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/developers/%s/apps/%s/credentials", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDeveloperAppCredentialsRequest generates requests for DeleteDeveloperAppCredentials
func NewDeleteDeveloperAppCredentialsRequest(server string, organizationName Organization, developerUsername DeveloperUsername, appName AppName, consumerKey ConsumerKey) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "developer_username", runtime.ParamLocationPath, developerUsername)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "app_name", runtime.ParamLocationPath, appName)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "consumer_key", runtime.ParamLocationPath, consumerKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/developers/%s/apps/%s/credentials/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateDeveloperAppCredentialsRequest calls the generic UpdateDeveloperAppCredentials builder with application/json body
func NewUpdateDeveloperAppCredentialsRequest(server string, organizationName Organization, developerUsername DeveloperUsername, appName AppName, consumerKey ConsumerKey, params *UpdateDeveloperAppCredentialsParams, body UpdateDeveloperAppCredentialsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDeveloperAppCredentialsRequestWithBody(server, organizationName, developerUsername, appName, consumerKey, params, "application/json", bodyReader)
}

// NewUpdateDeveloperAppCredentialsRequestWithBody generates requests for UpdateDeveloperAppCredentials with any type of body
func NewUpdateDeveloperAppCredentialsRequestWithBody(server string, organizationName Organization, developerUsername DeveloperUsername, appName AppName, consumerKey ConsumerKey, params *UpdateDeveloperAppCredentialsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "developer_username", runtime.ParamLocationPath, developerUsername)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "app_name", runtime.ParamLocationPath, appName)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "consumer_key", runtime.ParamLocationPath, consumerKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/developers/%s/apps/%s/credentials/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.IfMatch != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
		if err != nil {
			return nil, err
		}

		req.Header.Set("If-Match", headerParam0)
	}

	return req, nil
}

// NewListDeveloperAppWebHooksRequest generates requests for ListDeveloperAppWebHooks
func NewListDeveloperAppWebHooksRequest(server string, organizationName Organization, developerUsername DeveloperUsername, appName AppName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "developer_username", runtime.ParamLocationPath, developerUsername)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "app_name", runtime.ParamLocationPath, appName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/developers/%s/apps/%s/webHooks", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDeveloperAppWebHookRequest calls the generic CreateDeveloperAppWebHook builder with application/json body
func NewCreateDeveloperAppWebHookRequest(server string, organizationName Organization, developerUsername DeveloperUsername, appName AppName, body CreateDeveloperAppWebHookJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDeveloperAppWebHookRequestWithBody(server, organizationName, developerUsername, appName, "application/json", bodyReader)
}

// NewCreateDeveloperAppWebHookRequestWithBody generates requests for CreateDeveloperAppWebHook with any type of body
func NewCreateDeveloperAppWebHookRequestWithBody(server string, organizationName Organization, developerUsername DeveloperUsername, appName AppName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "developer_username", runtime.ParamLocationPath, developerUsername)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "app_name", runtime.ParamLocationPath, appName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/developers/%s/apps/%s/webHooks", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDeveloperAppWebHookRequest generates requests for DeleteDeveloperAppWebHook
func NewDeleteDeveloperAppWebHookRequest(server string, organizationName Organization, developerUsername DeveloperUsername, appName AppName, webhookName WebhookName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "developer_username", runtime.ParamLocationPath, developerUsername)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "app_name", runtime.ParamLocationPath, appName)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "webhook_name", runtime.ParamLocationPath, webhookName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/developers/%s/apps/%s/webHooks/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDeveloperAppWebHookRequest generates requests for GetDeveloperAppWebHook
func NewGetDeveloperAppWebHookRequest(server string, organizationName Organization, developerUsername DeveloperUsername, appName AppName, webhookName WebhookName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "developer_username", runtime.ParamLocationPath, developerUsername)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "app_name", runtime.ParamLocationPath, appName)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "webhook_name", runtime.ParamLocationPath, webhookName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/developers/%s/apps/%s/webHooks/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateDeveloperAppWebHookRequest calls the generic UpdateDeveloperAppWebHook builder with application/json body
func NewUpdateDeveloperAppWebHookRequest(server string, organizationName Organization, developerUsername DeveloperUsername, appName AppName, webhookName WebhookName, params *UpdateDeveloperAppWebHookParams, body UpdateDeveloperAppWebHookJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDeveloperAppWebHookRequestWithBody(server, organizationName, developerUsername, appName, webhookName, params, "application/json", bodyReader)
}

// NewUpdateDeveloperAppWebHookRequestWithBody generates requests for UpdateDeveloperAppWebHook with any type of body
func NewUpdateDeveloperAppWebHookRequestWithBody(server string, organizationName Organization, developerUsername DeveloperUsername, appName AppName, webhookName WebhookName, params *UpdateDeveloperAppWebHookParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "developer_username", runtime.ParamLocationPath, developerUsername)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "app_name", runtime.ParamLocationPath, appName)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "webhook_name", runtime.ParamLocationPath, webhookName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/developers/%s/apps/%s/webHooks/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.IfMatch != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
		if err != nil {
			return nil, err
		}

		req.Header.Set("If-Match", headerParam0)
	}

	return req, nil
}

// NewListEnvironmentsRequest generates requests for ListEnvironments
func NewListEnvironmentsRequest(server string, organizationName Organization, params *ListEnvironmentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/environments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNumber", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortFieldName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortFieldName", runtime.ParamLocationQuery, *params.SortFieldName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortDirection != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortDirection", runtime.ParamLocationQuery, *params.SortDirection); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateEnvironmentRequest calls the generic CreateEnvironment builder with application/json body
func NewCreateEnvironmentRequest(server string, organizationName Organization, body CreateEnvironmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateEnvironmentRequestWithBody(server, organizationName, "application/json", bodyReader)
}

// NewCreateEnvironmentRequestWithBody generates requests for CreateEnvironment with any type of body
func NewCreateEnvironmentRequestWithBody(server string, organizationName Organization, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/environments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteEnvironmentRequest generates requests for DeleteEnvironment
func NewDeleteEnvironmentRequest(server string, organizationName Organization, envName EnvName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "env_name", runtime.ParamLocationPath, envName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/environments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEnvironmentRequest generates requests for GetEnvironment
func NewGetEnvironmentRequest(server string, organizationName Organization, envName EnvName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "env_name", runtime.ParamLocationPath, envName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/environments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateEnvironmentRequest calls the generic UpdateEnvironment builder with application/json body
func NewUpdateEnvironmentRequest(server string, organizationName Organization, envName EnvName, params *UpdateEnvironmentParams, body UpdateEnvironmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateEnvironmentRequestWithBody(server, organizationName, envName, params, "application/json", bodyReader)
}

// NewUpdateEnvironmentRequestWithBody generates requests for UpdateEnvironment with any type of body
func NewUpdateEnvironmentRequestWithBody(server string, organizationName Organization, envName EnvName, params *UpdateEnvironmentParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "env_name", runtime.ParamLocationPath, envName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/environments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.IfMatch != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
		if err != nil {
			return nil, err
		}

		req.Header.Set("If-Match", headerParam0)
	}

	return req, nil
}

// NewGetEnvironmentReferencedByAPIProductsRequest generates requests for GetEnvironmentReferencedByAPIProducts
func NewGetEnvironmentReferencedByAPIProductsRequest(server string, organizationName Organization, envName EnvName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "env_name", runtime.ParamLocationPath, envName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/environments/%s/apiProducts", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListEventAPIProductsRequest generates requests for ListEventAPIProducts
func NewListEventAPIProductsRequest(server string, organizationName Organization, params *ListEventAPIProductsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/eventApiProducts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNumber", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEventAPIProductRequest generates requests for GetEventAPIProduct
func NewGetEventAPIProductRequest(server string, organizationName Organization, eventApiProductId EventApiProductId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event_api_product_id", runtime.ParamLocationPath, eventApiProductId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/eventApiProducts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEventAPIProductAsyncAPIRequest generates requests for GetEventAPIProductAsyncAPI
func NewGetEventAPIProductAsyncAPIRequest(server string, organizationName Organization, eventApiProductId EventApiProductId, params *GetEventAPIProductAsyncAPIParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event_api_product_id", runtime.ParamLocationPath, eventApiProductId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/eventApiProducts/%s/asyncApi", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListHistoryRequest generates requests for ListHistory
func NewListHistoryRequest(server string, organizationName Organization, params *ListHistoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/history", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNumber", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortFieldName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortFieldName", runtime.ParamLocationQuery, *params.SortFieldName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortDirection != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortDirection", runtime.ParamLocationQuery, *params.SortDirection); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllImporterTypesRequest generates requests for GetAllImporterTypes
func NewGetAllImporterTypesRequest(server string, organizationName Organization) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/importerTypes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllImportersRequest generates requests for GetAllImporters
func NewGetAllImportersRequest(server string, organizationName Organization) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/importers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateImporterJobRequest calls the generic CreateImporterJob builder with application/json body
func NewCreateImporterJobRequest(server string, organizationName Organization, body CreateImporterJobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateImporterJobRequestWithBody(server, organizationName, "application/json", bodyReader)
}

// NewCreateImporterJobRequestWithBody generates requests for CreateImporterJob with any type of body
func NewCreateImporterJobRequestWithBody(server string, organizationName Organization, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/importers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteImporterJobRequest generates requests for DeleteImporterJob
func NewDeleteImporterJobRequest(server string, organizationName Organization, importerJobName ImporterJobName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "importer_job_name", runtime.ParamLocationPath, importerJobName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/importers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetImporterJobRequest generates requests for GetImporterJob
func NewGetImporterJobRequest(server string, organizationName Organization, importerJobName ImporterJobName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "importer_job_name", runtime.ParamLocationPath, importerJobName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/importers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateImporterJobRequest calls the generic UpdateImporterJob builder with application/json body
func NewUpdateImporterJobRequest(server string, organizationName Organization, importerJobName ImporterJobName, body UpdateImporterJobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateImporterJobRequestWithBody(server, organizationName, importerJobName, "application/json", bodyReader)
}

// NewUpdateImporterJobRequestWithBody generates requests for UpdateImporterJob with any type of body
func NewUpdateImporterJobRequestWithBody(server string, organizationName Organization, importerJobName ImporterJobName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "importer_job_name", runtime.ParamLocationPath, importerJobName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/importers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRunImporterJobRequest generates requests for RunImporterJob
func NewRunImporterJobRequest(server string, organizationName Organization, importerJobName ImporterJobName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "importer_job_name", runtime.ParamLocationPath, importerJobName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/importers/%s/run", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListJobsRequest generates requests for ListJobs
func NewListJobsRequest(server string, organizationName Organization, params *ListJobsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/jobs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNumber", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortFieldName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortFieldName", runtime.ParamLocationQuery, *params.SortFieldName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortDirection != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortDirection", runtime.ParamLocationQuery, *params.SortDirection); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListServicesRequest generates requests for ListServices
func NewListServicesRequest(server string, organizationName Organization, params *ListServicesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/services", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNumber", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortFieldName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortFieldName", runtime.ParamLocationQuery, *params.SortFieldName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortDirection != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortDirection", runtime.ParamLocationQuery, *params.SortDirection); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListTeamsRequest generates requests for ListTeams
func NewListTeamsRequest(server string, organizationName Organization, params *ListTeamsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/teams", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNumber", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortFieldName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortFieldName", runtime.ParamLocationQuery, *params.SortFieldName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortDirection != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortDirection", runtime.ParamLocationQuery, *params.SortDirection); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTeamRequest calls the generic CreateTeam builder with application/json body
func NewCreateTeamRequest(server string, organizationName Organization, body CreateTeamJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTeamRequestWithBody(server, organizationName, "application/json", bodyReader)
}

// NewCreateTeamRequestWithBody generates requests for CreateTeam with any type of body
func NewCreateTeamRequestWithBody(server string, organizationName Organization, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/teams", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTeamRequest generates requests for DeleteTeam
func NewDeleteTeamRequest(server string, organizationName Organization, teamName TeamName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "team_name", runtime.ParamLocationPath, teamName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/teams/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamRequest generates requests for GetTeam
func NewGetTeamRequest(server string, organizationName Organization, teamName TeamName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "team_name", runtime.ParamLocationPath, teamName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/teams/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateTeamRequest calls the generic UpdateTeam builder with application/json body
func NewUpdateTeamRequest(server string, organizationName Organization, teamName TeamName, params *UpdateTeamParams, body UpdateTeamJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateTeamRequestWithBody(server, organizationName, teamName, params, "application/json", bodyReader)
}

// NewUpdateTeamRequestWithBody generates requests for UpdateTeam with any type of body
func NewUpdateTeamRequestWithBody(server string, organizationName Organization, teamName TeamName, params *UpdateTeamParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "team_name", runtime.ParamLocationPath, teamName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/teams/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.IfMatch != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
		if err != nil {
			return nil, err
		}

		req.Header.Set("If-Match", headerParam0)
	}

	return req, nil
}

// NewListTeamAppsRequest generates requests for ListTeamApps
func NewListTeamAppsRequest(server string, organizationName Organization, teamName TeamName, params *ListTeamAppsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "team_name", runtime.ParamLocationPath, teamName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/teams/%s/apps", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNumber", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortFieldName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortFieldName", runtime.ParamLocationQuery, *params.SortFieldName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortDirection != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortDirection", runtime.ParamLocationQuery, *params.SortDirection); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTeamAppRequest calls the generic CreateTeamApp builder with application/json body
func NewCreateTeamAppRequest(server string, organizationName Organization, teamName TeamName, body CreateTeamAppJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTeamAppRequestWithBody(server, organizationName, teamName, "application/json", bodyReader)
}

// NewCreateTeamAppRequestWithBody generates requests for CreateTeamApp with any type of body
func NewCreateTeamAppRequestWithBody(server string, organizationName Organization, teamName TeamName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "team_name", runtime.ParamLocationPath, teamName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/teams/%s/apps", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTeamAppRequest generates requests for DeleteTeamApp
func NewDeleteTeamAppRequest(server string, organizationName Organization, teamName TeamName, appName AppName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "team_name", runtime.ParamLocationPath, teamName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "app_name", runtime.ParamLocationPath, appName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/teams/%s/apps/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamAppRequest generates requests for GetTeamApp
func NewGetTeamAppRequest(server string, organizationName Organization, teamName TeamName, appName AppName, params *GetTeamAppParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "team_name", runtime.ParamLocationPath, teamName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "app_name", runtime.ParamLocationPath, appName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/teams/%s/apps/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TopicSyntax != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "topicSyntax", runtime.ParamLocationQuery, *params.TopicSyntax); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateTeamAppRequest calls the generic UpdateTeamApp builder with application/json body
func NewUpdateTeamAppRequest(server string, organizationName Organization, teamName TeamName, appName AppName, params *UpdateTeamAppParams, body UpdateTeamAppJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateTeamAppRequestWithBody(server, organizationName, teamName, appName, params, "application/json", bodyReader)
}

// NewUpdateTeamAppRequestWithBody generates requests for UpdateTeamApp with any type of body
func NewUpdateTeamAppRequestWithBody(server string, organizationName Organization, teamName TeamName, appName AppName, params *UpdateTeamAppParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "team_name", runtime.ParamLocationPath, teamName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "app_name", runtime.ParamLocationPath, appName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/teams/%s/apps/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.IfMatch != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
		if err != nil {
			return nil, err
		}

		req.Header.Set("If-Match", headerParam0)
	}

	return req, nil
}

// NewDeleteTeamAppAttributeRequest generates requests for DeleteTeamAppAttribute
func NewDeleteTeamAppAttributeRequest(server string, organizationName Organization, teamName TeamName, appName AppName, attributeName AttributeName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "team_name", runtime.ParamLocationPath, teamName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "app_name", runtime.ParamLocationPath, appName)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "attributeName", runtime.ParamLocationPath, attributeName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/teams/%s/apps/%s/attributes/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamAppAttributeRequest generates requests for GetTeamAppAttribute
func NewGetTeamAppAttributeRequest(server string, organizationName Organization, teamName TeamName, appName AppName, attributeName AttributeName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "team_name", runtime.ParamLocationPath, teamName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "app_name", runtime.ParamLocationPath, appName)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "attributeName", runtime.ParamLocationPath, attributeName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/teams/%s/apps/%s/attributes/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateTeamAppAttributeRequestWithBody generates requests for UpdateTeamAppAttribute with any type of body
func NewUpdateTeamAppAttributeRequestWithBody(server string, organizationName Organization, teamName TeamName, appName AppName, attributeName AttributeName, params *UpdateTeamAppAttributeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "team_name", runtime.ParamLocationPath, teamName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "app_name", runtime.ParamLocationPath, appName)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "attributeName", runtime.ParamLocationPath, attributeName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/teams/%s/apps/%s/attributes/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.IfMatch != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
		if err != nil {
			return nil, err
		}

		req.Header.Set("If-Match", headerParam0)
	}

	return req, nil
}

// NewCreateTeamAppAttributeRequestWithBody generates requests for CreateTeamAppAttribute with any type of body
func NewCreateTeamAppAttributeRequestWithBody(server string, organizationName Organization, teamName TeamName, appName AppName, attributeName AttributeName, params *CreateTeamAppAttributeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "team_name", runtime.ParamLocationPath, teamName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "app_name", runtime.ParamLocationPath, appName)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "attributeName", runtime.ParamLocationPath, attributeName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/teams/%s/apps/%s/attributes/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.IfMatch != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
		if err != nil {
			return nil, err
		}

		req.Header.Set("If-Match", headerParam0)
	}

	return req, nil
}

// NewListTeamAppCredentialsRequest generates requests for ListTeamAppCredentials
func NewListTeamAppCredentialsRequest(server string, organizationName Organization, teamName TeamName, appName AppName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "team_name", runtime.ParamLocationPath, teamName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "app_name", runtime.ParamLocationPath, appName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/teams/%s/apps/%s/credentials", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTeamAppCredentialsRequest calls the generic CreateTeamAppCredentials builder with application/json body
func NewCreateTeamAppCredentialsRequest(server string, organizationName Organization, teamName TeamName, appName AppName, body CreateTeamAppCredentialsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTeamAppCredentialsRequestWithBody(server, organizationName, teamName, appName, "application/json", bodyReader)
}

// NewCreateTeamAppCredentialsRequestWithBody generates requests for CreateTeamAppCredentials with any type of body
func NewCreateTeamAppCredentialsRequestWithBody(server string, organizationName Organization, teamName TeamName, appName AppName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "team_name", runtime.ParamLocationPath, teamName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "app_name", runtime.ParamLocationPath, appName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/teams/%s/apps/%s/credentials", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTeamAppCredentialsRequest generates requests for DeleteTeamAppCredentials
func NewDeleteTeamAppCredentialsRequest(server string, organizationName Organization, teamName TeamName, appName AppName, consumerKey ConsumerKey) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "team_name", runtime.ParamLocationPath, teamName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "app_name", runtime.ParamLocationPath, appName)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "consumer_key", runtime.ParamLocationPath, consumerKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/teams/%s/apps/%s/credentials/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateTeamAppCredentialsRequest calls the generic UpdateTeamAppCredentials builder with application/json body
func NewUpdateTeamAppCredentialsRequest(server string, organizationName Organization, teamName TeamName, appName AppName, consumerKey ConsumerKey, params *UpdateTeamAppCredentialsParams, body UpdateTeamAppCredentialsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateTeamAppCredentialsRequestWithBody(server, organizationName, teamName, appName, consumerKey, params, "application/json", bodyReader)
}

// NewUpdateTeamAppCredentialsRequestWithBody generates requests for UpdateTeamAppCredentials with any type of body
func NewUpdateTeamAppCredentialsRequestWithBody(server string, organizationName Organization, teamName TeamName, appName AppName, consumerKey ConsumerKey, params *UpdateTeamAppCredentialsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "team_name", runtime.ParamLocationPath, teamName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "app_name", runtime.ParamLocationPath, appName)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "consumer_key", runtime.ParamLocationPath, consumerKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/teams/%s/apps/%s/credentials/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.IfMatch != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
		if err != nil {
			return nil, err
		}

		req.Header.Set("If-Match", headerParam0)
	}

	return req, nil
}

// NewListTeamAppWebHooksRequest generates requests for ListTeamAppWebHooks
func NewListTeamAppWebHooksRequest(server string, organizationName Organization, teamName TeamName, appName AppName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "team_name", runtime.ParamLocationPath, teamName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "app_name", runtime.ParamLocationPath, appName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/teams/%s/apps/%s/webHooks", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTeamAppWebHookRequest calls the generic CreateTeamAppWebHook builder with application/json body
func NewCreateTeamAppWebHookRequest(server string, organizationName Organization, teamName TeamName, appName AppName, body CreateTeamAppWebHookJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTeamAppWebHookRequestWithBody(server, organizationName, teamName, appName, "application/json", bodyReader)
}

// NewCreateTeamAppWebHookRequestWithBody generates requests for CreateTeamAppWebHook with any type of body
func NewCreateTeamAppWebHookRequestWithBody(server string, organizationName Organization, teamName TeamName, appName AppName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "team_name", runtime.ParamLocationPath, teamName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "app_name", runtime.ParamLocationPath, appName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/teams/%s/apps/%s/webHooks", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTeamAppWebHookRequest generates requests for DeleteTeamAppWebHook
func NewDeleteTeamAppWebHookRequest(server string, organizationName Organization, teamName TeamName, appName AppName, webhookName WebhookName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "team_name", runtime.ParamLocationPath, teamName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "app_name", runtime.ParamLocationPath, appName)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "webhook_name", runtime.ParamLocationPath, webhookName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/teams/%s/apps/%s/webHooks/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamAppWebHookRequest generates requests for GetTeamAppWebHook
func NewGetTeamAppWebHookRequest(server string, organizationName Organization, teamName TeamName, appName AppName, webhookName WebhookName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "team_name", runtime.ParamLocationPath, teamName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "app_name", runtime.ParamLocationPath, appName)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "webhook_name", runtime.ParamLocationPath, webhookName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/teams/%s/apps/%s/webHooks/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateTeamAppWebHookRequest calls the generic UpdateTeamAppWebHook builder with application/json body
func NewUpdateTeamAppWebHookRequest(server string, organizationName Organization, teamName TeamName, appName AppName, webhookName WebhookName, params *UpdateTeamAppWebHookParams, body UpdateTeamAppWebHookJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateTeamAppWebHookRequestWithBody(server, organizationName, teamName, appName, webhookName, params, "application/json", bodyReader)
}

// NewUpdateTeamAppWebHookRequestWithBody generates requests for UpdateTeamAppWebHook with any type of body
func NewUpdateTeamAppWebHookRequestWithBody(server string, organizationName Organization, teamName TeamName, appName AppName, webhookName WebhookName, params *UpdateTeamAppWebHookParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "team_name", runtime.ParamLocationPath, teamName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "app_name", runtime.ParamLocationPath, appName)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "webhook_name", runtime.ParamLocationPath, webhookName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/teams/%s/apps/%s/webHooks/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.IfMatch != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
		if err != nil {
			return nil, err
		}

		req.Header.Set("If-Match", headerParam0)
	}

	return req, nil
}

// NewGetTokenRequest generates requests for GetToken
func NewGetTokenRequest(server string, organizationName Organization) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/token", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateTokenRequest calls the generic UpdateToken builder with application/json body
func NewUpdateTokenRequest(server string, organizationName Organization, body UpdateTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateTokenRequestWithBody(server, organizationName, "application/json", bodyReader)
}

// NewUpdateTokenRequestWithBody generates requests for UpdateToken with any type of body
func NewUpdateTokenRequestWithBody(server string, organizationName Organization, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_name", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/token", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// About request
	AboutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AboutResponse, error)

	// ListOrganizations request
	ListOrganizationsWithResponse(ctx context.Context, params *ListOrganizationsParams, reqEditors ...RequestEditorFn) (*ListOrganizationsResponse, error)

	// CreateOrganization request with any body
	CreateOrganizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationResponse, error)

	CreateOrganizationWithResponse(ctx context.Context, body CreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationResponse, error)

	// DeleteOrganization request
	DeleteOrganizationWithResponse(ctx context.Context, organizationName Organization, reqEditors ...RequestEditorFn) (*DeleteOrganizationResponse, error)

	// GetOrganization request
	GetOrganizationWithResponse(ctx context.Context, organizationName Organization, reqEditors ...RequestEditorFn) (*GetOrganizationResponse, error)

	// UpdateOrganization request with any body
	UpdateOrganizationWithBodyWithResponse(ctx context.Context, organizationName Organization, params *UpdateOrganizationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrganizationResponse, error)

	UpdateOrganizationWithResponse(ctx context.Context, organizationName Organization, params *UpdateOrganizationParams, body UpdateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrganizationResponse, error)

	// ListApiProducts request
	ListApiProductsWithResponse(ctx context.Context, organizationName Organization, params *ListApiProductsParams, reqEditors ...RequestEditorFn) (*ListApiProductsResponse, error)

	// CreateApiProduct request with any body
	CreateApiProductWithBodyWithResponse(ctx context.Context, organizationName Organization, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApiProductResponse, error)

	CreateApiProductWithResponse(ctx context.Context, organizationName Organization, body CreateApiProductJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateApiProductResponse, error)

	// DeleteApiProduct request
	DeleteApiProductWithResponse(ctx context.Context, organizationName Organization, apiProductName ApiProductName, reqEditors ...RequestEditorFn) (*DeleteApiProductResponse, error)

	// GetApiProduct request
	GetApiProductWithResponse(ctx context.Context, organizationName Organization, apiProductName ApiProductName, reqEditors ...RequestEditorFn) (*GetApiProductResponse, error)

	// UpdateApiProduct request with any body
	UpdateApiProductWithBodyWithResponse(ctx context.Context, organizationName Organization, apiProductName ApiProductName, params *UpdateApiProductParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateApiProductResponse, error)

	UpdateApiProductWithResponse(ctx context.Context, organizationName Organization, apiProductName ApiProductName, params *UpdateApiProductParams, body UpdateApiProductJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateApiProductResponse, error)

	// ListApiProductApis request
	ListApiProductApisWithResponse(ctx context.Context, organizationName Organization, apiProductName ApiProductName, params *ListApiProductApisParams, reqEditors ...RequestEditorFn) (*ListApiProductApisResponse, error)

	// GetApiProductApiSpecification request
	GetApiProductApiSpecificationWithResponse(ctx context.Context, organizationName Organization, apiProductName ApiProductName, apiName ApiName, params *GetApiProductApiSpecificationParams, reqEditors ...RequestEditorFn) (*GetApiProductApiSpecificationResponse, error)

	// ListAppReferencesToAPIProducts request
	ListAppReferencesToAPIProductsWithResponse(ctx context.Context, organizationName Organization, apiProductName ApiProductName, params *ListAppReferencesToAPIProductsParams, reqEditors ...RequestEditorFn) (*ListAppReferencesToAPIProductsResponse, error)

	// DeleteApiProductAttribute request
	DeleteApiProductAttributeWithResponse(ctx context.Context, organizationName Organization, apiProductName ApiProductName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*DeleteApiProductAttributeResponse, error)

	// GetApiProductAttribute request
	GetApiProductAttributeWithResponse(ctx context.Context, organizationName Organization, apiProductName ApiProductName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*GetApiProductAttributeResponse, error)

	// UpdateApiProductAttribute request with any body
	UpdateApiProductAttributeWithBodyWithResponse(ctx context.Context, organizationName Organization, apiProductName ApiProductName, attributeName AttributeName, params *UpdateApiProductAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateApiProductAttributeResponse, error)

	// CreateApiProductAttribute request with any body
	CreateApiProductAttributeWithBodyWithResponse(ctx context.Context, organizationName Organization, apiProductName ApiProductName, attributeName AttributeName, params *CreateApiProductAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApiProductAttributeResponse, error)

	// ListDerivedApiProducts request
	ListDerivedApiProductsWithResponse(ctx context.Context, organizationName Organization, apiProductName ApiProductName, params *ListDerivedApiProductsParams, reqEditors ...RequestEditorFn) (*ListDerivedApiProductsResponse, error)

	// CreateDerivedApiProduct request with any body
	CreateDerivedApiProductWithBodyWithResponse(ctx context.Context, organizationName Organization, apiProductName ApiProductName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDerivedApiProductResponse, error)

	CreateDerivedApiProductWithResponse(ctx context.Context, organizationName Organization, apiProductName ApiProductName, body CreateDerivedApiProductJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDerivedApiProductResponse, error)

	// DeleteApiProductMetaAttribute request
	DeleteApiProductMetaAttributeWithResponse(ctx context.Context, organizationName Organization, apiProductName ApiProductName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*DeleteApiProductMetaAttributeResponse, error)

	// GetApiProductMetaAttribute request
	GetApiProductMetaAttributeWithResponse(ctx context.Context, organizationName Organization, apiProductName ApiProductName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*GetApiProductMetaAttributeResponse, error)

	// UpdateApiProductMetaAttribute request with any body
	UpdateApiProductMetaAttributeWithBodyWithResponse(ctx context.Context, organizationName Organization, apiProductName ApiProductName, attributeName AttributeName, params *UpdateApiProductMetaAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateApiProductMetaAttributeResponse, error)

	// CreateApiProductMetaAttribute request with any body
	CreateApiProductMetaAttributeWithBodyWithResponse(ctx context.Context, organizationName Organization, apiProductName ApiProductName, attributeName AttributeName, params *CreateApiProductMetaAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApiProductMetaAttributeResponse, error)

	// ListApiProductRevisions request
	ListApiProductRevisionsWithResponse(ctx context.Context, organizationName Organization, apiProductName ApiProductName, params *ListApiProductRevisionsParams, reqEditors ...RequestEditorFn) (*ListApiProductRevisionsResponse, error)

	// GetApiProductRevision request
	GetApiProductRevisionWithResponse(ctx context.Context, organizationName Organization, apiProductName ApiProductName, semver Semver, reqEditors ...RequestEditorFn) (*GetApiProductRevisionResponse, error)

	// ListApis request
	ListApisWithResponse(ctx context.Context, organizationName Organization, params *ListApisParams, reqEditors ...RequestEditorFn) (*ListApisResponse, error)

	// ImportApi request with any body
	ImportApiWithBodyWithResponse(ctx context.Context, organizationName Organization, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportApiResponse, error)

	ImportApiWithResponse(ctx context.Context, organizationName Organization, body ImportApiJSONRequestBody, reqEditors ...RequestEditorFn) (*ImportApiResponse, error)

	// DeleteApi request
	DeleteApiWithResponse(ctx context.Context, organizationName Organization, apiName ApiName, reqEditors ...RequestEditorFn) (*DeleteApiResponse, error)

	// GetApi request
	GetApiWithResponse(ctx context.Context, organizationName Organization, apiName ApiName, params *GetApiParams, reqEditors ...RequestEditorFn) (*GetApiResponse, error)

	// UpdateApi request with any body
	UpdateApiWithBodyWithResponse(ctx context.Context, organizationName Organization, apiName ApiName, params *UpdateApiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateApiResponse, error)

	// CreateApi request with any body
	CreateApiWithBodyWithResponse(ctx context.Context, organizationName Organization, apiName ApiName, params *CreateApiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApiResponse, error)

	// GetApiReferencedByAPIProducts request
	GetApiReferencedByAPIProductsWithResponse(ctx context.Context, organizationName Organization, apiName ApiName, reqEditors ...RequestEditorFn) (*GetApiReferencedByAPIProductsResponse, error)

	// DeleteApiAttribute request
	DeleteApiAttributeWithResponse(ctx context.Context, organizationName Organization, apiName ApiName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*DeleteApiAttributeResponse, error)

	// GetApiAttribute request
	GetApiAttributeWithResponse(ctx context.Context, organizationName Organization, apiName ApiName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*GetApiAttributeResponse, error)

	// UpdateApiAttribute request with any body
	UpdateApiAttributeWithBodyWithResponse(ctx context.Context, organizationName Organization, apiName ApiName, attributeName AttributeName, params *UpdateApiAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateApiAttributeResponse, error)

	// CreateApiAttribute request with any body
	CreateApiAttributeWithBodyWithResponse(ctx context.Context, organizationName Organization, apiName ApiName, attributeName AttributeName, params *CreateApiAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApiAttributeResponse, error)

	// GetApiInfo request
	GetApiInfoWithResponse(ctx context.Context, organizationName Organization, apiName ApiName, reqEditors ...RequestEditorFn) (*GetApiInfoResponse, error)

	// UpdateApiInfo request with any body
	UpdateApiInfoWithBodyWithResponse(ctx context.Context, organizationName Organization, apiName ApiName, params *UpdateApiInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateApiInfoResponse, error)

	UpdateApiInfoWithResponse(ctx context.Context, organizationName Organization, apiName ApiName, params *UpdateApiInfoParams, body UpdateApiInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateApiInfoResponse, error)

	// DeleteApiMetaAttribute request
	DeleteApiMetaAttributeWithResponse(ctx context.Context, organizationName Organization, apiName ApiName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*DeleteApiMetaAttributeResponse, error)

	// GetApiMetaAttribute request
	GetApiMetaAttributeWithResponse(ctx context.Context, organizationName Organization, apiName ApiName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*GetApiMetaAttributeResponse, error)

	// UpdateApiMetaAttribute request with any body
	UpdateApiMetaAttributeWithBodyWithResponse(ctx context.Context, organizationName Organization, apiName ApiName, attributeName AttributeName, params *UpdateApiMetaAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateApiMetaAttributeResponse, error)

	// CreateApiMetaAttribute request with any body
	CreateApiMetaAttributeWithBodyWithResponse(ctx context.Context, organizationName Organization, apiName ApiName, attributeName AttributeName, params *CreateApiMetaAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApiMetaAttributeResponse, error)

	// ListApiRevisions request
	ListApiRevisionsWithResponse(ctx context.Context, organizationName Organization, apiName ApiName, params *ListApiRevisionsParams, reqEditors ...RequestEditorFn) (*ListApiRevisionsResponse, error)

	// GetApiRevision request
	GetApiRevisionWithResponse(ctx context.Context, organizationName Organization, apiName ApiName, version Version, params *GetApiRevisionParams, reqEditors ...RequestEditorFn) (*GetApiRevisionResponse, error)

	// GetApiRevisionAPIProductReferences request
	GetApiRevisionAPIProductReferencesWithResponse(ctx context.Context, organizationName Organization, apiName ApiName, version Version, reqEditors ...RequestEditorFn) (*GetApiRevisionAPIProductReferencesResponse, error)

	// GetApiVersionInfo request
	GetApiVersionInfoWithResponse(ctx context.Context, organizationName Organization, apiName ApiName, version Version, reqEditors ...RequestEditorFn) (*GetApiVersionInfoResponse, error)

	// UpdateApiVersionInfo request with any body
	UpdateApiVersionInfoWithBodyWithResponse(ctx context.Context, organizationName Organization, apiName ApiName, version Version, params *UpdateApiVersionInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateApiVersionInfoResponse, error)

	UpdateApiVersionInfoWithResponse(ctx context.Context, organizationName Organization, apiName ApiName, version Version, params *UpdateApiVersionInfoParams, body UpdateApiVersionInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateApiVersionInfoResponse, error)

	// ListEPApplicationDomains request
	ListEPApplicationDomainsWithResponse(ctx context.Context, organizationName Organization, params *ListEPApplicationDomainsParams, reqEditors ...RequestEditorFn) (*ListEPApplicationDomainsResponse, error)

	// GetEPApplicationDomain request
	GetEPApplicationDomainWithResponse(ctx context.Context, organizationName Organization, applicationDomainId ApplicationDomainId, reqEditors ...RequestEditorFn) (*GetEPApplicationDomainResponse, error)

	// ListApps request
	ListAppsWithResponse(ctx context.Context, organizationName Organization, params *ListAppsParams, reqEditors ...RequestEditorFn) (*ListAppsResponse, error)

	// GetApp request
	GetAppWithResponse(ctx context.Context, organizationName Organization, appName AppName, params *GetAppParams, reqEditors ...RequestEditorFn) (*GetAppResponse, error)

	// ListAppApiSpecifications request
	ListAppApiSpecificationsWithResponse(ctx context.Context, organizationName Organization, appName AppName, params *ListAppApiSpecificationsParams, reqEditors ...RequestEditorFn) (*ListAppApiSpecificationsResponse, error)

	// GetAppApiSpecification request
	GetAppApiSpecificationWithResponse(ctx context.Context, organizationName Organization, appName AppName, apiName ApiName, params *GetAppApiSpecificationParams, reqEditors ...RequestEditorFn) (*GetAppApiSpecificationResponse, error)

	// GetAppStatus request
	GetAppStatusWithResponse(ctx context.Context, organizationName Organization, appName AppName, reqEditors ...RequestEditorFn) (*GetAppStatusResponse, error)

	// ListAppConfigSets request
	ListAppConfigSetsWithResponse(ctx context.Context, organizationName Organization, reqEditors ...RequestEditorFn) (*ListAppConfigSetsResponse, error)

	// GetAppConfigSet request
	GetAppConfigSetWithResponse(ctx context.Context, organizationName Organization, configSetName ConfigSetName, reqEditors ...RequestEditorFn) (*GetAppConfigSetResponse, error)

	// ListAppConfigSetSnapshots request
	ListAppConfigSetSnapshotsWithResponse(ctx context.Context, organizationName Organization, configSetName ConfigSetName, reqEditors ...RequestEditorFn) (*ListAppConfigSetSnapshotsResponse, error)

	// GetAppConfigSnapshot request
	GetAppConfigSnapshotWithResponse(ctx context.Context, organizationName Organization, configSetName ConfigSetName, configSnapshotRevision ConfigSnapshotRevision, reqEditors ...RequestEditorFn) (*GetAppConfigSnapshotResponse, error)

	// ListDevelopers request
	ListDevelopersWithResponse(ctx context.Context, organizationName Organization, params *ListDevelopersParams, reqEditors ...RequestEditorFn) (*ListDevelopersResponse, error)

	// CreateDeveloper request with any body
	CreateDeveloperWithBodyWithResponse(ctx context.Context, organizationName Organization, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDeveloperResponse, error)

	CreateDeveloperWithResponse(ctx context.Context, organizationName Organization, body CreateDeveloperJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDeveloperResponse, error)

	// DeleteDeveloper request
	DeleteDeveloperWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, reqEditors ...RequestEditorFn) (*DeleteDeveloperResponse, error)

	// GetDeveloper request
	GetDeveloperWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, reqEditors ...RequestEditorFn) (*GetDeveloperResponse, error)

	// UpdateDeveloper request with any body
	UpdateDeveloperWithBodyWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, params *UpdateDeveloperParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDeveloperResponse, error)

	UpdateDeveloperWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, params *UpdateDeveloperParams, body UpdateDeveloperJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDeveloperResponse, error)

	// ListDeveloperApps request
	ListDeveloperAppsWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, params *ListDeveloperAppsParams, reqEditors ...RequestEditorFn) (*ListDeveloperAppsResponse, error)

	// CreateDeveloperApp request with any body
	CreateDeveloperAppWithBodyWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDeveloperAppResponse, error)

	CreateDeveloperAppWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, body CreateDeveloperAppJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDeveloperAppResponse, error)

	// DeleteDeveloperApp request
	DeleteDeveloperAppWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, reqEditors ...RequestEditorFn) (*DeleteDeveloperAppResponse, error)

	// GetDeveloperApp request
	GetDeveloperAppWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, params *GetDeveloperAppParams, reqEditors ...RequestEditorFn) (*GetDeveloperAppResponse, error)

	// UpdateDeveloperApp request with any body
	UpdateDeveloperAppWithBodyWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, params *UpdateDeveloperAppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDeveloperAppResponse, error)

	UpdateDeveloperAppWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, params *UpdateDeveloperAppParams, body UpdateDeveloperAppJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDeveloperAppResponse, error)

	// DeleteDeveloperAppAttribute request
	DeleteDeveloperAppAttributeWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*DeleteDeveloperAppAttributeResponse, error)

	// GetDeveloperAppAttribute request
	GetDeveloperAppAttributeWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*GetDeveloperAppAttributeResponse, error)

	// UpdateDeveloperAppAttribute request with any body
	UpdateDeveloperAppAttributeWithBodyWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, attributeName AttributeName, params *UpdateDeveloperAppAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDeveloperAppAttributeResponse, error)

	// CreateDeveloperAppAttribute request with any body
	CreateDeveloperAppAttributeWithBodyWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, attributeName AttributeName, params *CreateDeveloperAppAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDeveloperAppAttributeResponse, error)

	// ListDeveloperAppCredentials request
	ListDeveloperAppCredentialsWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, reqEditors ...RequestEditorFn) (*ListDeveloperAppCredentialsResponse, error)

	// CreateDeveloperAppCredentials request with any body
	CreateDeveloperAppCredentialsWithBodyWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDeveloperAppCredentialsResponse, error)

	CreateDeveloperAppCredentialsWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, body CreateDeveloperAppCredentialsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDeveloperAppCredentialsResponse, error)

	// DeleteDeveloperAppCredentials request
	DeleteDeveloperAppCredentialsWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, consumerKey ConsumerKey, reqEditors ...RequestEditorFn) (*DeleteDeveloperAppCredentialsResponse, error)

	// UpdateDeveloperAppCredentials request with any body
	UpdateDeveloperAppCredentialsWithBodyWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, consumerKey ConsumerKey, params *UpdateDeveloperAppCredentialsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDeveloperAppCredentialsResponse, error)

	UpdateDeveloperAppCredentialsWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, consumerKey ConsumerKey, params *UpdateDeveloperAppCredentialsParams, body UpdateDeveloperAppCredentialsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDeveloperAppCredentialsResponse, error)

	// ListDeveloperAppWebHooks request
	ListDeveloperAppWebHooksWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, reqEditors ...RequestEditorFn) (*ListDeveloperAppWebHooksResponse, error)

	// CreateDeveloperAppWebHook request with any body
	CreateDeveloperAppWebHookWithBodyWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDeveloperAppWebHookResponse, error)

	CreateDeveloperAppWebHookWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, body CreateDeveloperAppWebHookJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDeveloperAppWebHookResponse, error)

	// DeleteDeveloperAppWebHook request
	DeleteDeveloperAppWebHookWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, webhookName WebhookName, reqEditors ...RequestEditorFn) (*DeleteDeveloperAppWebHookResponse, error)

	// GetDeveloperAppWebHook request
	GetDeveloperAppWebHookWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, webhookName WebhookName, reqEditors ...RequestEditorFn) (*GetDeveloperAppWebHookResponse, error)

	// UpdateDeveloperAppWebHook request with any body
	UpdateDeveloperAppWebHookWithBodyWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, webhookName WebhookName, params *UpdateDeveloperAppWebHookParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDeveloperAppWebHookResponse, error)

	UpdateDeveloperAppWebHookWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, webhookName WebhookName, params *UpdateDeveloperAppWebHookParams, body UpdateDeveloperAppWebHookJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDeveloperAppWebHookResponse, error)

	// ListEnvironments request
	ListEnvironmentsWithResponse(ctx context.Context, organizationName Organization, params *ListEnvironmentsParams, reqEditors ...RequestEditorFn) (*ListEnvironmentsResponse, error)

	// CreateEnvironment request with any body
	CreateEnvironmentWithBodyWithResponse(ctx context.Context, organizationName Organization, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error)

	CreateEnvironmentWithResponse(ctx context.Context, organizationName Organization, body CreateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error)

	// DeleteEnvironment request
	DeleteEnvironmentWithResponse(ctx context.Context, organizationName Organization, envName EnvName, reqEditors ...RequestEditorFn) (*DeleteEnvironmentResponse, error)

	// GetEnvironment request
	GetEnvironmentWithResponse(ctx context.Context, organizationName Organization, envName EnvName, reqEditors ...RequestEditorFn) (*GetEnvironmentResponse, error)

	// UpdateEnvironment request with any body
	UpdateEnvironmentWithBodyWithResponse(ctx context.Context, organizationName Organization, envName EnvName, params *UpdateEnvironmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEnvironmentResponse, error)

	UpdateEnvironmentWithResponse(ctx context.Context, organizationName Organization, envName EnvName, params *UpdateEnvironmentParams, body UpdateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEnvironmentResponse, error)

	// GetEnvironmentReferencedByAPIProducts request
	GetEnvironmentReferencedByAPIProductsWithResponse(ctx context.Context, organizationName Organization, envName EnvName, reqEditors ...RequestEditorFn) (*GetEnvironmentReferencedByAPIProductsResponse, error)

	// ListEventAPIProducts request
	ListEventAPIProductsWithResponse(ctx context.Context, organizationName Organization, params *ListEventAPIProductsParams, reqEditors ...RequestEditorFn) (*ListEventAPIProductsResponse, error)

	// GetEventAPIProduct request
	GetEventAPIProductWithResponse(ctx context.Context, organizationName Organization, eventApiProductId EventApiProductId, reqEditors ...RequestEditorFn) (*GetEventAPIProductResponse, error)

	// GetEventAPIProductAsyncAPI request
	GetEventAPIProductAsyncAPIWithResponse(ctx context.Context, organizationName Organization, eventApiProductId EventApiProductId, params *GetEventAPIProductAsyncAPIParams, reqEditors ...RequestEditorFn) (*GetEventAPIProductAsyncAPIResponse, error)

	// ListHistory request
	ListHistoryWithResponse(ctx context.Context, organizationName Organization, params *ListHistoryParams, reqEditors ...RequestEditorFn) (*ListHistoryResponse, error)

	// GetAllImporterTypes request
	GetAllImporterTypesWithResponse(ctx context.Context, organizationName Organization, reqEditors ...RequestEditorFn) (*GetAllImporterTypesResponse, error)

	// GetAllImporters request
	GetAllImportersWithResponse(ctx context.Context, organizationName Organization, reqEditors ...RequestEditorFn) (*GetAllImportersResponse, error)

	// CreateImporterJob request with any body
	CreateImporterJobWithBodyWithResponse(ctx context.Context, organizationName Organization, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateImporterJobResponse, error)

	CreateImporterJobWithResponse(ctx context.Context, organizationName Organization, body CreateImporterJobJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateImporterJobResponse, error)

	// DeleteImporterJob request
	DeleteImporterJobWithResponse(ctx context.Context, organizationName Organization, importerJobName ImporterJobName, reqEditors ...RequestEditorFn) (*DeleteImporterJobResponse, error)

	// GetImporterJob request
	GetImporterJobWithResponse(ctx context.Context, organizationName Organization, importerJobName ImporterJobName, reqEditors ...RequestEditorFn) (*GetImporterJobResponse, error)

	// UpdateImporterJob request with any body
	UpdateImporterJobWithBodyWithResponse(ctx context.Context, organizationName Organization, importerJobName ImporterJobName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateImporterJobResponse, error)

	UpdateImporterJobWithResponse(ctx context.Context, organizationName Organization, importerJobName ImporterJobName, body UpdateImporterJobJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateImporterJobResponse, error)

	// RunImporterJob request
	RunImporterJobWithResponse(ctx context.Context, organizationName Organization, importerJobName ImporterJobName, reqEditors ...RequestEditorFn) (*RunImporterJobResponse, error)

	// ListJobs request
	ListJobsWithResponse(ctx context.Context, organizationName Organization, params *ListJobsParams, reqEditors ...RequestEditorFn) (*ListJobsResponse, error)

	// ListServices request
	ListServicesWithResponse(ctx context.Context, organizationName Organization, params *ListServicesParams, reqEditors ...RequestEditorFn) (*ListServicesResponse, error)

	// ListTeams request
	ListTeamsWithResponse(ctx context.Context, organizationName Organization, params *ListTeamsParams, reqEditors ...RequestEditorFn) (*ListTeamsResponse, error)

	// CreateTeam request with any body
	CreateTeamWithBodyWithResponse(ctx context.Context, organizationName Organization, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTeamResponse, error)

	CreateTeamWithResponse(ctx context.Context, organizationName Organization, body CreateTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTeamResponse, error)

	// DeleteTeam request
	DeleteTeamWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, reqEditors ...RequestEditorFn) (*DeleteTeamResponse, error)

	// GetTeam request
	GetTeamWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, reqEditors ...RequestEditorFn) (*GetTeamResponse, error)

	// UpdateTeam request with any body
	UpdateTeamWithBodyWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, params *UpdateTeamParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTeamResponse, error)

	UpdateTeamWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, params *UpdateTeamParams, body UpdateTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTeamResponse, error)

	// ListTeamApps request
	ListTeamAppsWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, params *ListTeamAppsParams, reqEditors ...RequestEditorFn) (*ListTeamAppsResponse, error)

	// CreateTeamApp request with any body
	CreateTeamAppWithBodyWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTeamAppResponse, error)

	CreateTeamAppWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, body CreateTeamAppJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTeamAppResponse, error)

	// DeleteTeamApp request
	DeleteTeamAppWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, reqEditors ...RequestEditorFn) (*DeleteTeamAppResponse, error)

	// GetTeamApp request
	GetTeamAppWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, params *GetTeamAppParams, reqEditors ...RequestEditorFn) (*GetTeamAppResponse, error)

	// UpdateTeamApp request with any body
	UpdateTeamAppWithBodyWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, params *UpdateTeamAppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTeamAppResponse, error)

	UpdateTeamAppWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, params *UpdateTeamAppParams, body UpdateTeamAppJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTeamAppResponse, error)

	// DeleteTeamAppAttribute request
	DeleteTeamAppAttributeWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*DeleteTeamAppAttributeResponse, error)

	// GetTeamAppAttribute request
	GetTeamAppAttributeWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*GetTeamAppAttributeResponse, error)

	// UpdateTeamAppAttribute request with any body
	UpdateTeamAppAttributeWithBodyWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, attributeName AttributeName, params *UpdateTeamAppAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTeamAppAttributeResponse, error)

	// CreateTeamAppAttribute request with any body
	CreateTeamAppAttributeWithBodyWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, attributeName AttributeName, params *CreateTeamAppAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTeamAppAttributeResponse, error)

	// ListTeamAppCredentials request
	ListTeamAppCredentialsWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, reqEditors ...RequestEditorFn) (*ListTeamAppCredentialsResponse, error)

	// CreateTeamAppCredentials request with any body
	CreateTeamAppCredentialsWithBodyWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTeamAppCredentialsResponse, error)

	CreateTeamAppCredentialsWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, body CreateTeamAppCredentialsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTeamAppCredentialsResponse, error)

	// DeleteTeamAppCredentials request
	DeleteTeamAppCredentialsWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, consumerKey ConsumerKey, reqEditors ...RequestEditorFn) (*DeleteTeamAppCredentialsResponse, error)

	// UpdateTeamAppCredentials request with any body
	UpdateTeamAppCredentialsWithBodyWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, consumerKey ConsumerKey, params *UpdateTeamAppCredentialsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTeamAppCredentialsResponse, error)

	UpdateTeamAppCredentialsWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, consumerKey ConsumerKey, params *UpdateTeamAppCredentialsParams, body UpdateTeamAppCredentialsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTeamAppCredentialsResponse, error)

	// ListTeamAppWebHooks request
	ListTeamAppWebHooksWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, reqEditors ...RequestEditorFn) (*ListTeamAppWebHooksResponse, error)

	// CreateTeamAppWebHook request with any body
	CreateTeamAppWebHookWithBodyWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTeamAppWebHookResponse, error)

	CreateTeamAppWebHookWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, body CreateTeamAppWebHookJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTeamAppWebHookResponse, error)

	// DeleteTeamAppWebHook request
	DeleteTeamAppWebHookWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, webhookName WebhookName, reqEditors ...RequestEditorFn) (*DeleteTeamAppWebHookResponse, error)

	// GetTeamAppWebHook request
	GetTeamAppWebHookWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, webhookName WebhookName, reqEditors ...RequestEditorFn) (*GetTeamAppWebHookResponse, error)

	// UpdateTeamAppWebHook request with any body
	UpdateTeamAppWebHookWithBodyWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, webhookName WebhookName, params *UpdateTeamAppWebHookParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTeamAppWebHookResponse, error)

	UpdateTeamAppWebHookWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, webhookName WebhookName, params *UpdateTeamAppWebHookParams, body UpdateTeamAppWebHookJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTeamAppWebHookResponse, error)

	// GetToken request
	GetTokenWithResponse(ctx context.Context, organizationName Organization, reqEditors ...RequestEditorFn) (*GetTokenResponse, error)

	// UpdateToken request with any body
	UpdateTokenWithBodyWithResponse(ctx context.Context, organizationName Organization, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTokenResponse, error)

	UpdateTokenWithResponse(ctx context.Context, organizationName Organization, body UpdateTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTokenResponse, error)
}

type AboutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *About
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AboutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AboutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]OrganizationRepresentation
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *OrganizationResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON409      *ErrorResponse
	JSON415      *ErrorResponse
	JSON422      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON412      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListApiProductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]APIProduct
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListApiProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListApiProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateApiProductResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *APIProduct
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON415      *ErrorResponse
	JSON422      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateApiProductResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateApiProductResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiProductResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON409      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteApiProductResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiProductResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiProductResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIProduct
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetApiProductResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiProductResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateApiProductResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIProduct
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON409      *ErrorResponse
	JSON412      *ErrorResponse
	JSON415      *ErrorResponse
	JSON422      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateApiProductResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateApiProductResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListApiProductApisResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CommonName
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListApiProductApisResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListApiProductApisResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiProductApiSpecificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]interface{} `json:"-"`
	}
	YAML200 *String2MB
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON406 *ErrorResponse
	JSON429 *ErrorResponse
	JSON500 *ErrorResponse
	JSON503 *ErrorResponse
	JSON504 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetApiProductApiSpecificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiProductApiSpecificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAppReferencesToAPIProductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommonEntityNameList
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListAppReferencesToAPIProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAppReferencesToAPIProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiProductAttributeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON409      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteApiProductAttributeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiProductAttributeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiProductAttributeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AttributeValue
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetApiProductAttributeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiProductAttributeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateApiProductAttributeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AttributeValue
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON409      *ErrorResponse
	JSON412      *ErrorResponse
	JSON415      *ErrorResponse
	JSON422      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateApiProductAttributeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateApiProductAttributeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateApiProductAttributeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AttributeValue
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON409      *ErrorResponse
	JSON412      *ErrorResponse
	JSON415      *ErrorResponse
	JSON422      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateApiProductAttributeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateApiProductAttributeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDerivedApiProductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CommonEntityNames
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListDerivedApiProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDerivedApiProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDerivedApiProductResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *APIProduct
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON415      *ErrorResponse
	JSON422      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateDerivedApiProductResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDerivedApiProductResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiProductMetaAttributeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON409      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteApiProductMetaAttributeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiProductMetaAttributeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiProductMetaAttributeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AttributeValue
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetApiProductMetaAttributeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiProductMetaAttributeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateApiProductMetaAttributeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AttributeValue
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON409      *ErrorResponse
	JSON412      *ErrorResponse
	JSON415      *ErrorResponse
	JSON422      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateApiProductMetaAttributeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateApiProductMetaAttributeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateApiProductMetaAttributeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AttributeValue
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON409      *ErrorResponse
	JSON412      *ErrorResponse
	JSON415      *ErrorResponse
	JSON422      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateApiProductMetaAttributeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateApiProductMetaAttributeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListApiProductRevisionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SemVer
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListApiProductRevisionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListApiProductRevisionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiProductRevisionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIProduct
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetApiProductRevisionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiProductRevisionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListApisResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListApisResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListApisResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ImportApiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		AdditionalProperties map[string]interface{} `json:"-"`
	}
	YAML201 *String2MB
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON406 *ErrorResponse
	JSON415 *ErrorResponse
	JSON429 *ErrorResponse
	JSON500 *ErrorResponse
	JSON503 *ErrorResponse
	JSON504 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ImportApiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ImportApiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON409      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteApiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	YAML200      *String2MB
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetApiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateApiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]interface{} `json:"-"`
	}
	YAML200 *String2MB
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON406 *ErrorResponse
	JSON409 *ErrorResponse
	JSON412 *ErrorResponse
	JSON415 *ErrorResponse
	JSON422 *ErrorResponse
	JSON429 *ErrorResponse
	JSON500 *ErrorResponse
	JSON503 *ErrorResponse
	JSON504 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateApiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateApiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateApiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		AdditionalProperties map[string]interface{} `json:"-"`
	}
	YAML201 *String2MB
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON406 *ErrorResponse
	JSON415 *ErrorResponse
	JSON429 *ErrorResponse
	JSON500 *ErrorResponse
	JSON503 *ErrorResponse
	JSON504 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateApiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateApiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiReferencedByAPIProductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommonEntityNameList
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetApiReferencedByAPIProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiReferencedByAPIProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiAttributeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON409      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteApiAttributeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiAttributeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiAttributeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AttributeValue
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetApiAttributeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiAttributeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateApiAttributeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AttributeValue
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON409      *ErrorResponse
	JSON412      *ErrorResponse
	JSON415      *ErrorResponse
	JSON422      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateApiAttributeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateApiAttributeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateApiAttributeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AttributeValue
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON409      *ErrorResponse
	JSON412      *ErrorResponse
	JSON415      *ErrorResponse
	JSON422      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateApiAttributeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateApiAttributeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIInfo
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetApiInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateApiInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIInfo
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON409      *ErrorResponse
	JSON412      *ErrorResponse
	JSON415      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateApiInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateApiInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiMetaAttributeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON409      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteApiMetaAttributeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiMetaAttributeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiMetaAttributeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AttributeValue
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetApiMetaAttributeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiMetaAttributeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateApiMetaAttributeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AttributeValue
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON409      *ErrorResponse
	JSON412      *ErrorResponse
	JSON415      *ErrorResponse
	JSON422      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateApiMetaAttributeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateApiMetaAttributeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateApiMetaAttributeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AttributeValue
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON409      *ErrorResponse
	JSON412      *ErrorResponse
	JSON415      *ErrorResponse
	JSON422      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateApiMetaAttributeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateApiMetaAttributeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListApiRevisionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CommonVersion
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListApiRevisionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListApiRevisionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiRevisionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	YAML200      *String2MB
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetApiRevisionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiRevisionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiRevisionAPIProductReferencesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommonEntityNameList
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetApiRevisionAPIProductReferencesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiRevisionAPIProductReferencesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiVersionInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIInfo
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetApiVersionInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiVersionInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateApiVersionInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIInfo
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON409      *ErrorResponse
	JSON412      *ErrorResponse
	JSON415      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateApiVersionInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateApiVersionInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListEPApplicationDomainsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplicationDomainList
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListEPApplicationDomainsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListEPApplicationDomainsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEPApplicationDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplicationDomain
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetEPApplicationDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEPApplicationDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAppsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AppListItem
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListAppsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAppsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppResponseGeneric
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAppApiSpecificationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CommonName
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListAppApiSpecificationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAppApiSpecificationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAppApiSpecificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]interface{} `json:"-"`
	}
	YAML200 *String2MB
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON406 *ErrorResponse
	JSON429 *ErrorResponse
	JSON500 *ErrorResponse
	JSON503 *ErrorResponse
	JSON504 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAppApiSpecificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAppApiSpecificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAppStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppConnectionStatus
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAppStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAppStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAppConfigSetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CommonEntityNameList
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListAppConfigSetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAppConfigSetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAppConfigSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppConfigSet
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAppConfigSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAppConfigSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAppConfigSetSnapshotsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]int
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListAppConfigSetSnapshotsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAppConfigSetSnapshotsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAppConfigSnapshotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConfigSnapshot
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAppConfigSnapshotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAppConfigSnapshotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDevelopersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Developer
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListDevelopersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDevelopersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDeveloperResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Developer
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON415      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateDeveloperResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDeveloperResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDeveloperResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON409      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteDeveloperResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDeveloperResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeveloperResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Developer
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetDeveloperResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeveloperResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDeveloperResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Developer
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON412      *ErrorResponse
	JSON415      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateDeveloperResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDeveloperResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDeveloperAppsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AppResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListDeveloperAppsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDeveloperAppsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDeveloperAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AppResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON415      *ErrorResponse
	JSON422      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateDeveloperAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDeveloperAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDeveloperAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteDeveloperAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDeveloperAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeveloperAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetDeveloperAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeveloperAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDeveloperAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON412      *ErrorResponse
	JSON415      *ErrorResponse
	JSON422      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateDeveloperAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDeveloperAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDeveloperAppAttributeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON409      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteDeveloperAppAttributeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDeveloperAppAttributeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeveloperAppAttributeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AttributeValue
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetDeveloperAppAttributeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeveloperAppAttributeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDeveloperAppAttributeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AttributeValue
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON409      *ErrorResponse
	JSON412      *ErrorResponse
	JSON415      *ErrorResponse
	JSON422      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateDeveloperAppAttributeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDeveloperAppAttributeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDeveloperAppAttributeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AttributeValue
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON409      *ErrorResponse
	JSON412      *ErrorResponse
	JSON415      *ErrorResponse
	JSON422      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateDeveloperAppAttributeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDeveloperAppAttributeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDeveloperAppCredentialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CredentialsArray
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListDeveloperAppCredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDeveloperAppCredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDeveloperAppCredentialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Credentials
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON412      *ErrorResponse
	JSON415      *ErrorResponse
	JSON422      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateDeveloperAppCredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDeveloperAppCredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDeveloperAppCredentialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteDeveloperAppCredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDeveloperAppCredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDeveloperAppCredentialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Credentials
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON412      *ErrorResponse
	JSON415      *ErrorResponse
	JSON422      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateDeveloperAppCredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDeveloperAppCredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDeveloperAppWebHooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebHookNameList
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListDeveloperAppWebHooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDeveloperAppWebHooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDeveloperAppWebHookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *WebHook
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON412      *ErrorResponse
	JSON415      *ErrorResponse
	JSON422      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateDeveloperAppWebHookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDeveloperAppWebHookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDeveloperAppWebHookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteDeveloperAppWebHookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDeveloperAppWebHookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeveloperAppWebHookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebHook
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetDeveloperAppWebHookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeveloperAppWebHookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDeveloperAppWebHookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebHook
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON412      *ErrorResponse
	JSON415      *ErrorResponse
	JSON422      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateDeveloperAppWebHookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDeveloperAppWebHookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListEnvironmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EnvironmentListItem
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListEnvironmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListEnvironmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Environment
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON415      *ErrorResponse
	JSON422      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON409      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnvironmentResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON409      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Environment
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON412      *ErrorResponse
	JSON415      *ErrorResponse
	JSON422      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnvironmentReferencedByAPIProductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommonEntityNameList
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetEnvironmentReferencedByAPIProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnvironmentReferencedByAPIProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListEventAPIProductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EventAPIProductList
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListEventAPIProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListEventAPIProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEventAPIProductResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EventAPIProduct
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetEventAPIProductResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEventAPIProductResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEventAPIProductAsyncAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]interface{} `json:"-"`
	}
	YAML200 *String2MB
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON403 *ErrorResponse
	JSON404 *ErrorResponse
	JSON406 *ErrorResponse
	JSON429 *ErrorResponse
	JSON500 *ErrorResponse
	JSON503 *ErrorResponse
	JSON504 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetEventAPIProductAsyncAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEventAPIProductAsyncAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]History
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllImporterTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ImporterInfo
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAllImporterTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllImporterTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllImportersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ImporterConfiguration
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAllImportersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllImportersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateImporterJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ImporterConfiguration
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON415      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateImporterJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateImporterJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteImporterJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON409      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteImporterJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteImporterJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetImporterJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImporterConfiguration
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON415      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetImporterJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetImporterJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateImporterJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImporterConfiguration
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON415      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateImporterJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateImporterJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RunImporterJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SuccessResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON415      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RunImporterJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RunImporterJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Job
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListServicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Service
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListServicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListServicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListTeamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Team
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListTeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Team
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON415      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON409      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Team
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Team
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON412      *ErrorResponse
	JSON415      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListTeamAppsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AppResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListTeamAppsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTeamAppsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTeamAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AppResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON415      *ErrorResponse
	JSON422      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateTeamAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTeamAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTeamAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteTeamAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTeamAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTeamAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTeamAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON412      *ErrorResponse
	JSON415      *ErrorResponse
	JSON422      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateTeamAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTeamAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTeamAppAttributeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON409      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteTeamAppAttributeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTeamAppAttributeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamAppAttributeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AttributeValue
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTeamAppAttributeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamAppAttributeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTeamAppAttributeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AttributeValue
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON409      *ErrorResponse
	JSON412      *ErrorResponse
	JSON415      *ErrorResponse
	JSON422      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateTeamAppAttributeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTeamAppAttributeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTeamAppAttributeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AttributeValue
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON409      *ErrorResponse
	JSON412      *ErrorResponse
	JSON415      *ErrorResponse
	JSON422      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateTeamAppAttributeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTeamAppAttributeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListTeamAppCredentialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CredentialsArray
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListTeamAppCredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTeamAppCredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTeamAppCredentialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Credentials
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON412      *ErrorResponse
	JSON415      *ErrorResponse
	JSON422      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateTeamAppCredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTeamAppCredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTeamAppCredentialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteTeamAppCredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTeamAppCredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTeamAppCredentialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Credentials
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON412      *ErrorResponse
	JSON415      *ErrorResponse
	JSON422      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateTeamAppCredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTeamAppCredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListTeamAppWebHooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebHookNameList
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListTeamAppWebHooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTeamAppWebHooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTeamAppWebHookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *WebHook
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON412      *ErrorResponse
	JSON415      *ErrorResponse
	JSON422      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateTeamAppWebHookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTeamAppWebHookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTeamAppWebHookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteTeamAppWebHookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTeamAppWebHookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamAppWebHookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebHook
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTeamAppWebHookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamAppWebHookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTeamAppWebHookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebHook
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON412      *ErrorResponse
	JSON415      *ErrorResponse
	JSON422      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateTeamAppWebHookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTeamAppWebHookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CloudToken
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CloudToken
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON406      *ErrorResponse
	JSON415      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
	JSON504      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AboutWithResponse request returning *AboutResponse
func (c *ClientWithResponses) AboutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AboutResponse, error) {
	rsp, err := c.About(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAboutResponse(rsp)
}

// ListOrganizationsWithResponse request returning *ListOrganizationsResponse
func (c *ClientWithResponses) ListOrganizationsWithResponse(ctx context.Context, params *ListOrganizationsParams, reqEditors ...RequestEditorFn) (*ListOrganizationsResponse, error) {
	rsp, err := c.ListOrganizations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOrganizationsResponse(rsp)
}

// CreateOrganizationWithBodyWithResponse request with arbitrary body returning *CreateOrganizationResponse
func (c *ClientWithResponses) CreateOrganizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationResponse, error) {
	rsp, err := c.CreateOrganizationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationResponse(rsp)
}

func (c *ClientWithResponses) CreateOrganizationWithResponse(ctx context.Context, body CreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationResponse, error) {
	rsp, err := c.CreateOrganization(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationResponse(rsp)
}

// DeleteOrganizationWithResponse request returning *DeleteOrganizationResponse
func (c *ClientWithResponses) DeleteOrganizationWithResponse(ctx context.Context, organizationName Organization, reqEditors ...RequestEditorFn) (*DeleteOrganizationResponse, error) {
	rsp, err := c.DeleteOrganization(ctx, organizationName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrganizationResponse(rsp)
}

// GetOrganizationWithResponse request returning *GetOrganizationResponse
func (c *ClientWithResponses) GetOrganizationWithResponse(ctx context.Context, organizationName Organization, reqEditors ...RequestEditorFn) (*GetOrganizationResponse, error) {
	rsp, err := c.GetOrganization(ctx, organizationName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationResponse(rsp)
}

// UpdateOrganizationWithBodyWithResponse request with arbitrary body returning *UpdateOrganizationResponse
func (c *ClientWithResponses) UpdateOrganizationWithBodyWithResponse(ctx context.Context, organizationName Organization, params *UpdateOrganizationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrganizationResponse, error) {
	rsp, err := c.UpdateOrganizationWithBody(ctx, organizationName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganizationResponse(rsp)
}

func (c *ClientWithResponses) UpdateOrganizationWithResponse(ctx context.Context, organizationName Organization, params *UpdateOrganizationParams, body UpdateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrganizationResponse, error) {
	rsp, err := c.UpdateOrganization(ctx, organizationName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganizationResponse(rsp)
}

// ListApiProductsWithResponse request returning *ListApiProductsResponse
func (c *ClientWithResponses) ListApiProductsWithResponse(ctx context.Context, organizationName Organization, params *ListApiProductsParams, reqEditors ...RequestEditorFn) (*ListApiProductsResponse, error) {
	rsp, err := c.ListApiProducts(ctx, organizationName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListApiProductsResponse(rsp)
}

// CreateApiProductWithBodyWithResponse request with arbitrary body returning *CreateApiProductResponse
func (c *ClientWithResponses) CreateApiProductWithBodyWithResponse(ctx context.Context, organizationName Organization, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApiProductResponse, error) {
	rsp, err := c.CreateApiProductWithBody(ctx, organizationName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApiProductResponse(rsp)
}

func (c *ClientWithResponses) CreateApiProductWithResponse(ctx context.Context, organizationName Organization, body CreateApiProductJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateApiProductResponse, error) {
	rsp, err := c.CreateApiProduct(ctx, organizationName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApiProductResponse(rsp)
}

// DeleteApiProductWithResponse request returning *DeleteApiProductResponse
func (c *ClientWithResponses) DeleteApiProductWithResponse(ctx context.Context, organizationName Organization, apiProductName ApiProductName, reqEditors ...RequestEditorFn) (*DeleteApiProductResponse, error) {
	rsp, err := c.DeleteApiProduct(ctx, organizationName, apiProductName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiProductResponse(rsp)
}

// GetApiProductWithResponse request returning *GetApiProductResponse
func (c *ClientWithResponses) GetApiProductWithResponse(ctx context.Context, organizationName Organization, apiProductName ApiProductName, reqEditors ...RequestEditorFn) (*GetApiProductResponse, error) {
	rsp, err := c.GetApiProduct(ctx, organizationName, apiProductName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiProductResponse(rsp)
}

// UpdateApiProductWithBodyWithResponse request with arbitrary body returning *UpdateApiProductResponse
func (c *ClientWithResponses) UpdateApiProductWithBodyWithResponse(ctx context.Context, organizationName Organization, apiProductName ApiProductName, params *UpdateApiProductParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateApiProductResponse, error) {
	rsp, err := c.UpdateApiProductWithBody(ctx, organizationName, apiProductName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateApiProductResponse(rsp)
}

func (c *ClientWithResponses) UpdateApiProductWithResponse(ctx context.Context, organizationName Organization, apiProductName ApiProductName, params *UpdateApiProductParams, body UpdateApiProductJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateApiProductResponse, error) {
	rsp, err := c.UpdateApiProduct(ctx, organizationName, apiProductName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateApiProductResponse(rsp)
}

// ListApiProductApisWithResponse request returning *ListApiProductApisResponse
func (c *ClientWithResponses) ListApiProductApisWithResponse(ctx context.Context, organizationName Organization, apiProductName ApiProductName, params *ListApiProductApisParams, reqEditors ...RequestEditorFn) (*ListApiProductApisResponse, error) {
	rsp, err := c.ListApiProductApis(ctx, organizationName, apiProductName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListApiProductApisResponse(rsp)
}

// GetApiProductApiSpecificationWithResponse request returning *GetApiProductApiSpecificationResponse
func (c *ClientWithResponses) GetApiProductApiSpecificationWithResponse(ctx context.Context, organizationName Organization, apiProductName ApiProductName, apiName ApiName, params *GetApiProductApiSpecificationParams, reqEditors ...RequestEditorFn) (*GetApiProductApiSpecificationResponse, error) {
	rsp, err := c.GetApiProductApiSpecification(ctx, organizationName, apiProductName, apiName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiProductApiSpecificationResponse(rsp)
}

// ListAppReferencesToAPIProductsWithResponse request returning *ListAppReferencesToAPIProductsResponse
func (c *ClientWithResponses) ListAppReferencesToAPIProductsWithResponse(ctx context.Context, organizationName Organization, apiProductName ApiProductName, params *ListAppReferencesToAPIProductsParams, reqEditors ...RequestEditorFn) (*ListAppReferencesToAPIProductsResponse, error) {
	rsp, err := c.ListAppReferencesToAPIProducts(ctx, organizationName, apiProductName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAppReferencesToAPIProductsResponse(rsp)
}

// DeleteApiProductAttributeWithResponse request returning *DeleteApiProductAttributeResponse
func (c *ClientWithResponses) DeleteApiProductAttributeWithResponse(ctx context.Context, organizationName Organization, apiProductName ApiProductName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*DeleteApiProductAttributeResponse, error) {
	rsp, err := c.DeleteApiProductAttribute(ctx, organizationName, apiProductName, attributeName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiProductAttributeResponse(rsp)
}

// GetApiProductAttributeWithResponse request returning *GetApiProductAttributeResponse
func (c *ClientWithResponses) GetApiProductAttributeWithResponse(ctx context.Context, organizationName Organization, apiProductName ApiProductName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*GetApiProductAttributeResponse, error) {
	rsp, err := c.GetApiProductAttribute(ctx, organizationName, apiProductName, attributeName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiProductAttributeResponse(rsp)
}

// UpdateApiProductAttributeWithBodyWithResponse request with arbitrary body returning *UpdateApiProductAttributeResponse
func (c *ClientWithResponses) UpdateApiProductAttributeWithBodyWithResponse(ctx context.Context, organizationName Organization, apiProductName ApiProductName, attributeName AttributeName, params *UpdateApiProductAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateApiProductAttributeResponse, error) {
	rsp, err := c.UpdateApiProductAttributeWithBody(ctx, organizationName, apiProductName, attributeName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateApiProductAttributeResponse(rsp)
}

// CreateApiProductAttributeWithBodyWithResponse request with arbitrary body returning *CreateApiProductAttributeResponse
func (c *ClientWithResponses) CreateApiProductAttributeWithBodyWithResponse(ctx context.Context, organizationName Organization, apiProductName ApiProductName, attributeName AttributeName, params *CreateApiProductAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApiProductAttributeResponse, error) {
	rsp, err := c.CreateApiProductAttributeWithBody(ctx, organizationName, apiProductName, attributeName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApiProductAttributeResponse(rsp)
}

// ListDerivedApiProductsWithResponse request returning *ListDerivedApiProductsResponse
func (c *ClientWithResponses) ListDerivedApiProductsWithResponse(ctx context.Context, organizationName Organization, apiProductName ApiProductName, params *ListDerivedApiProductsParams, reqEditors ...RequestEditorFn) (*ListDerivedApiProductsResponse, error) {
	rsp, err := c.ListDerivedApiProducts(ctx, organizationName, apiProductName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDerivedApiProductsResponse(rsp)
}

// CreateDerivedApiProductWithBodyWithResponse request with arbitrary body returning *CreateDerivedApiProductResponse
func (c *ClientWithResponses) CreateDerivedApiProductWithBodyWithResponse(ctx context.Context, organizationName Organization, apiProductName ApiProductName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDerivedApiProductResponse, error) {
	rsp, err := c.CreateDerivedApiProductWithBody(ctx, organizationName, apiProductName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDerivedApiProductResponse(rsp)
}

func (c *ClientWithResponses) CreateDerivedApiProductWithResponse(ctx context.Context, organizationName Organization, apiProductName ApiProductName, body CreateDerivedApiProductJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDerivedApiProductResponse, error) {
	rsp, err := c.CreateDerivedApiProduct(ctx, organizationName, apiProductName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDerivedApiProductResponse(rsp)
}

// DeleteApiProductMetaAttributeWithResponse request returning *DeleteApiProductMetaAttributeResponse
func (c *ClientWithResponses) DeleteApiProductMetaAttributeWithResponse(ctx context.Context, organizationName Organization, apiProductName ApiProductName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*DeleteApiProductMetaAttributeResponse, error) {
	rsp, err := c.DeleteApiProductMetaAttribute(ctx, organizationName, apiProductName, attributeName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiProductMetaAttributeResponse(rsp)
}

// GetApiProductMetaAttributeWithResponse request returning *GetApiProductMetaAttributeResponse
func (c *ClientWithResponses) GetApiProductMetaAttributeWithResponse(ctx context.Context, organizationName Organization, apiProductName ApiProductName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*GetApiProductMetaAttributeResponse, error) {
	rsp, err := c.GetApiProductMetaAttribute(ctx, organizationName, apiProductName, attributeName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiProductMetaAttributeResponse(rsp)
}

// UpdateApiProductMetaAttributeWithBodyWithResponse request with arbitrary body returning *UpdateApiProductMetaAttributeResponse
func (c *ClientWithResponses) UpdateApiProductMetaAttributeWithBodyWithResponse(ctx context.Context, organizationName Organization, apiProductName ApiProductName, attributeName AttributeName, params *UpdateApiProductMetaAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateApiProductMetaAttributeResponse, error) {
	rsp, err := c.UpdateApiProductMetaAttributeWithBody(ctx, organizationName, apiProductName, attributeName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateApiProductMetaAttributeResponse(rsp)
}

// CreateApiProductMetaAttributeWithBodyWithResponse request with arbitrary body returning *CreateApiProductMetaAttributeResponse
func (c *ClientWithResponses) CreateApiProductMetaAttributeWithBodyWithResponse(ctx context.Context, organizationName Organization, apiProductName ApiProductName, attributeName AttributeName, params *CreateApiProductMetaAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApiProductMetaAttributeResponse, error) {
	rsp, err := c.CreateApiProductMetaAttributeWithBody(ctx, organizationName, apiProductName, attributeName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApiProductMetaAttributeResponse(rsp)
}

// ListApiProductRevisionsWithResponse request returning *ListApiProductRevisionsResponse
func (c *ClientWithResponses) ListApiProductRevisionsWithResponse(ctx context.Context, organizationName Organization, apiProductName ApiProductName, params *ListApiProductRevisionsParams, reqEditors ...RequestEditorFn) (*ListApiProductRevisionsResponse, error) {
	rsp, err := c.ListApiProductRevisions(ctx, organizationName, apiProductName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListApiProductRevisionsResponse(rsp)
}

// GetApiProductRevisionWithResponse request returning *GetApiProductRevisionResponse
func (c *ClientWithResponses) GetApiProductRevisionWithResponse(ctx context.Context, organizationName Organization, apiProductName ApiProductName, semver Semver, reqEditors ...RequestEditorFn) (*GetApiProductRevisionResponse, error) {
	rsp, err := c.GetApiProductRevision(ctx, organizationName, apiProductName, semver, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiProductRevisionResponse(rsp)
}

// ListApisWithResponse request returning *ListApisResponse
func (c *ClientWithResponses) ListApisWithResponse(ctx context.Context, organizationName Organization, params *ListApisParams, reqEditors ...RequestEditorFn) (*ListApisResponse, error) {
	rsp, err := c.ListApis(ctx, organizationName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListApisResponse(rsp)
}

// ImportApiWithBodyWithResponse request with arbitrary body returning *ImportApiResponse
func (c *ClientWithResponses) ImportApiWithBodyWithResponse(ctx context.Context, organizationName Organization, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportApiResponse, error) {
	rsp, err := c.ImportApiWithBody(ctx, organizationName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImportApiResponse(rsp)
}

func (c *ClientWithResponses) ImportApiWithResponse(ctx context.Context, organizationName Organization, body ImportApiJSONRequestBody, reqEditors ...RequestEditorFn) (*ImportApiResponse, error) {
	rsp, err := c.ImportApi(ctx, organizationName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImportApiResponse(rsp)
}

// DeleteApiWithResponse request returning *DeleteApiResponse
func (c *ClientWithResponses) DeleteApiWithResponse(ctx context.Context, organizationName Organization, apiName ApiName, reqEditors ...RequestEditorFn) (*DeleteApiResponse, error) {
	rsp, err := c.DeleteApi(ctx, organizationName, apiName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiResponse(rsp)
}

// GetApiWithResponse request returning *GetApiResponse
func (c *ClientWithResponses) GetApiWithResponse(ctx context.Context, organizationName Organization, apiName ApiName, params *GetApiParams, reqEditors ...RequestEditorFn) (*GetApiResponse, error) {
	rsp, err := c.GetApi(ctx, organizationName, apiName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiResponse(rsp)
}

// UpdateApiWithBodyWithResponse request with arbitrary body returning *UpdateApiResponse
func (c *ClientWithResponses) UpdateApiWithBodyWithResponse(ctx context.Context, organizationName Organization, apiName ApiName, params *UpdateApiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateApiResponse, error) {
	rsp, err := c.UpdateApiWithBody(ctx, organizationName, apiName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateApiResponse(rsp)
}

// CreateApiWithBodyWithResponse request with arbitrary body returning *CreateApiResponse
func (c *ClientWithResponses) CreateApiWithBodyWithResponse(ctx context.Context, organizationName Organization, apiName ApiName, params *CreateApiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApiResponse, error) {
	rsp, err := c.CreateApiWithBody(ctx, organizationName, apiName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApiResponse(rsp)
}

// GetApiReferencedByAPIProductsWithResponse request returning *GetApiReferencedByAPIProductsResponse
func (c *ClientWithResponses) GetApiReferencedByAPIProductsWithResponse(ctx context.Context, organizationName Organization, apiName ApiName, reqEditors ...RequestEditorFn) (*GetApiReferencedByAPIProductsResponse, error) {
	rsp, err := c.GetApiReferencedByAPIProducts(ctx, organizationName, apiName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiReferencedByAPIProductsResponse(rsp)
}

// DeleteApiAttributeWithResponse request returning *DeleteApiAttributeResponse
func (c *ClientWithResponses) DeleteApiAttributeWithResponse(ctx context.Context, organizationName Organization, apiName ApiName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*DeleteApiAttributeResponse, error) {
	rsp, err := c.DeleteApiAttribute(ctx, organizationName, apiName, attributeName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiAttributeResponse(rsp)
}

// GetApiAttributeWithResponse request returning *GetApiAttributeResponse
func (c *ClientWithResponses) GetApiAttributeWithResponse(ctx context.Context, organizationName Organization, apiName ApiName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*GetApiAttributeResponse, error) {
	rsp, err := c.GetApiAttribute(ctx, organizationName, apiName, attributeName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiAttributeResponse(rsp)
}

// UpdateApiAttributeWithBodyWithResponse request with arbitrary body returning *UpdateApiAttributeResponse
func (c *ClientWithResponses) UpdateApiAttributeWithBodyWithResponse(ctx context.Context, organizationName Organization, apiName ApiName, attributeName AttributeName, params *UpdateApiAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateApiAttributeResponse, error) {
	rsp, err := c.UpdateApiAttributeWithBody(ctx, organizationName, apiName, attributeName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateApiAttributeResponse(rsp)
}

// CreateApiAttributeWithBodyWithResponse request with arbitrary body returning *CreateApiAttributeResponse
func (c *ClientWithResponses) CreateApiAttributeWithBodyWithResponse(ctx context.Context, organizationName Organization, apiName ApiName, attributeName AttributeName, params *CreateApiAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApiAttributeResponse, error) {
	rsp, err := c.CreateApiAttributeWithBody(ctx, organizationName, apiName, attributeName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApiAttributeResponse(rsp)
}

// GetApiInfoWithResponse request returning *GetApiInfoResponse
func (c *ClientWithResponses) GetApiInfoWithResponse(ctx context.Context, organizationName Organization, apiName ApiName, reqEditors ...RequestEditorFn) (*GetApiInfoResponse, error) {
	rsp, err := c.GetApiInfo(ctx, organizationName, apiName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiInfoResponse(rsp)
}

// UpdateApiInfoWithBodyWithResponse request with arbitrary body returning *UpdateApiInfoResponse
func (c *ClientWithResponses) UpdateApiInfoWithBodyWithResponse(ctx context.Context, organizationName Organization, apiName ApiName, params *UpdateApiInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateApiInfoResponse, error) {
	rsp, err := c.UpdateApiInfoWithBody(ctx, organizationName, apiName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateApiInfoResponse(rsp)
}

func (c *ClientWithResponses) UpdateApiInfoWithResponse(ctx context.Context, organizationName Organization, apiName ApiName, params *UpdateApiInfoParams, body UpdateApiInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateApiInfoResponse, error) {
	rsp, err := c.UpdateApiInfo(ctx, organizationName, apiName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateApiInfoResponse(rsp)
}

// DeleteApiMetaAttributeWithResponse request returning *DeleteApiMetaAttributeResponse
func (c *ClientWithResponses) DeleteApiMetaAttributeWithResponse(ctx context.Context, organizationName Organization, apiName ApiName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*DeleteApiMetaAttributeResponse, error) {
	rsp, err := c.DeleteApiMetaAttribute(ctx, organizationName, apiName, attributeName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiMetaAttributeResponse(rsp)
}

// GetApiMetaAttributeWithResponse request returning *GetApiMetaAttributeResponse
func (c *ClientWithResponses) GetApiMetaAttributeWithResponse(ctx context.Context, organizationName Organization, apiName ApiName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*GetApiMetaAttributeResponse, error) {
	rsp, err := c.GetApiMetaAttribute(ctx, organizationName, apiName, attributeName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiMetaAttributeResponse(rsp)
}

// UpdateApiMetaAttributeWithBodyWithResponse request with arbitrary body returning *UpdateApiMetaAttributeResponse
func (c *ClientWithResponses) UpdateApiMetaAttributeWithBodyWithResponse(ctx context.Context, organizationName Organization, apiName ApiName, attributeName AttributeName, params *UpdateApiMetaAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateApiMetaAttributeResponse, error) {
	rsp, err := c.UpdateApiMetaAttributeWithBody(ctx, organizationName, apiName, attributeName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateApiMetaAttributeResponse(rsp)
}

// CreateApiMetaAttributeWithBodyWithResponse request with arbitrary body returning *CreateApiMetaAttributeResponse
func (c *ClientWithResponses) CreateApiMetaAttributeWithBodyWithResponse(ctx context.Context, organizationName Organization, apiName ApiName, attributeName AttributeName, params *CreateApiMetaAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApiMetaAttributeResponse, error) {
	rsp, err := c.CreateApiMetaAttributeWithBody(ctx, organizationName, apiName, attributeName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApiMetaAttributeResponse(rsp)
}

// ListApiRevisionsWithResponse request returning *ListApiRevisionsResponse
func (c *ClientWithResponses) ListApiRevisionsWithResponse(ctx context.Context, organizationName Organization, apiName ApiName, params *ListApiRevisionsParams, reqEditors ...RequestEditorFn) (*ListApiRevisionsResponse, error) {
	rsp, err := c.ListApiRevisions(ctx, organizationName, apiName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListApiRevisionsResponse(rsp)
}

// GetApiRevisionWithResponse request returning *GetApiRevisionResponse
func (c *ClientWithResponses) GetApiRevisionWithResponse(ctx context.Context, organizationName Organization, apiName ApiName, version Version, params *GetApiRevisionParams, reqEditors ...RequestEditorFn) (*GetApiRevisionResponse, error) {
	rsp, err := c.GetApiRevision(ctx, organizationName, apiName, version, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiRevisionResponse(rsp)
}

// GetApiRevisionAPIProductReferencesWithResponse request returning *GetApiRevisionAPIProductReferencesResponse
func (c *ClientWithResponses) GetApiRevisionAPIProductReferencesWithResponse(ctx context.Context, organizationName Organization, apiName ApiName, version Version, reqEditors ...RequestEditorFn) (*GetApiRevisionAPIProductReferencesResponse, error) {
	rsp, err := c.GetApiRevisionAPIProductReferences(ctx, organizationName, apiName, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiRevisionAPIProductReferencesResponse(rsp)
}

// GetApiVersionInfoWithResponse request returning *GetApiVersionInfoResponse
func (c *ClientWithResponses) GetApiVersionInfoWithResponse(ctx context.Context, organizationName Organization, apiName ApiName, version Version, reqEditors ...RequestEditorFn) (*GetApiVersionInfoResponse, error) {
	rsp, err := c.GetApiVersionInfo(ctx, organizationName, apiName, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiVersionInfoResponse(rsp)
}

// UpdateApiVersionInfoWithBodyWithResponse request with arbitrary body returning *UpdateApiVersionInfoResponse
func (c *ClientWithResponses) UpdateApiVersionInfoWithBodyWithResponse(ctx context.Context, organizationName Organization, apiName ApiName, version Version, params *UpdateApiVersionInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateApiVersionInfoResponse, error) {
	rsp, err := c.UpdateApiVersionInfoWithBody(ctx, organizationName, apiName, version, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateApiVersionInfoResponse(rsp)
}

func (c *ClientWithResponses) UpdateApiVersionInfoWithResponse(ctx context.Context, organizationName Organization, apiName ApiName, version Version, params *UpdateApiVersionInfoParams, body UpdateApiVersionInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateApiVersionInfoResponse, error) {
	rsp, err := c.UpdateApiVersionInfo(ctx, organizationName, apiName, version, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateApiVersionInfoResponse(rsp)
}

// ListEPApplicationDomainsWithResponse request returning *ListEPApplicationDomainsResponse
func (c *ClientWithResponses) ListEPApplicationDomainsWithResponse(ctx context.Context, organizationName Organization, params *ListEPApplicationDomainsParams, reqEditors ...RequestEditorFn) (*ListEPApplicationDomainsResponse, error) {
	rsp, err := c.ListEPApplicationDomains(ctx, organizationName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListEPApplicationDomainsResponse(rsp)
}

// GetEPApplicationDomainWithResponse request returning *GetEPApplicationDomainResponse
func (c *ClientWithResponses) GetEPApplicationDomainWithResponse(ctx context.Context, organizationName Organization, applicationDomainId ApplicationDomainId, reqEditors ...RequestEditorFn) (*GetEPApplicationDomainResponse, error) {
	rsp, err := c.GetEPApplicationDomain(ctx, organizationName, applicationDomainId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEPApplicationDomainResponse(rsp)
}

// ListAppsWithResponse request returning *ListAppsResponse
func (c *ClientWithResponses) ListAppsWithResponse(ctx context.Context, organizationName Organization, params *ListAppsParams, reqEditors ...RequestEditorFn) (*ListAppsResponse, error) {
	rsp, err := c.ListApps(ctx, organizationName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAppsResponse(rsp)
}

// GetAppWithResponse request returning *GetAppResponse
func (c *ClientWithResponses) GetAppWithResponse(ctx context.Context, organizationName Organization, appName AppName, params *GetAppParams, reqEditors ...RequestEditorFn) (*GetAppResponse, error) {
	rsp, err := c.GetApp(ctx, organizationName, appName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAppResponse(rsp)
}

// ListAppApiSpecificationsWithResponse request returning *ListAppApiSpecificationsResponse
func (c *ClientWithResponses) ListAppApiSpecificationsWithResponse(ctx context.Context, organizationName Organization, appName AppName, params *ListAppApiSpecificationsParams, reqEditors ...RequestEditorFn) (*ListAppApiSpecificationsResponse, error) {
	rsp, err := c.ListAppApiSpecifications(ctx, organizationName, appName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAppApiSpecificationsResponse(rsp)
}

// GetAppApiSpecificationWithResponse request returning *GetAppApiSpecificationResponse
func (c *ClientWithResponses) GetAppApiSpecificationWithResponse(ctx context.Context, organizationName Organization, appName AppName, apiName ApiName, params *GetAppApiSpecificationParams, reqEditors ...RequestEditorFn) (*GetAppApiSpecificationResponse, error) {
	rsp, err := c.GetAppApiSpecification(ctx, organizationName, appName, apiName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAppApiSpecificationResponse(rsp)
}

// GetAppStatusWithResponse request returning *GetAppStatusResponse
func (c *ClientWithResponses) GetAppStatusWithResponse(ctx context.Context, organizationName Organization, appName AppName, reqEditors ...RequestEditorFn) (*GetAppStatusResponse, error) {
	rsp, err := c.GetAppStatus(ctx, organizationName, appName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAppStatusResponse(rsp)
}

// ListAppConfigSetsWithResponse request returning *ListAppConfigSetsResponse
func (c *ClientWithResponses) ListAppConfigSetsWithResponse(ctx context.Context, organizationName Organization, reqEditors ...RequestEditorFn) (*ListAppConfigSetsResponse, error) {
	rsp, err := c.ListAppConfigSets(ctx, organizationName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAppConfigSetsResponse(rsp)
}

// GetAppConfigSetWithResponse request returning *GetAppConfigSetResponse
func (c *ClientWithResponses) GetAppConfigSetWithResponse(ctx context.Context, organizationName Organization, configSetName ConfigSetName, reqEditors ...RequestEditorFn) (*GetAppConfigSetResponse, error) {
	rsp, err := c.GetAppConfigSet(ctx, organizationName, configSetName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAppConfigSetResponse(rsp)
}

// ListAppConfigSetSnapshotsWithResponse request returning *ListAppConfigSetSnapshotsResponse
func (c *ClientWithResponses) ListAppConfigSetSnapshotsWithResponse(ctx context.Context, organizationName Organization, configSetName ConfigSetName, reqEditors ...RequestEditorFn) (*ListAppConfigSetSnapshotsResponse, error) {
	rsp, err := c.ListAppConfigSetSnapshots(ctx, organizationName, configSetName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAppConfigSetSnapshotsResponse(rsp)
}

// GetAppConfigSnapshotWithResponse request returning *GetAppConfigSnapshotResponse
func (c *ClientWithResponses) GetAppConfigSnapshotWithResponse(ctx context.Context, organizationName Organization, configSetName ConfigSetName, configSnapshotRevision ConfigSnapshotRevision, reqEditors ...RequestEditorFn) (*GetAppConfigSnapshotResponse, error) {
	rsp, err := c.GetAppConfigSnapshot(ctx, organizationName, configSetName, configSnapshotRevision, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAppConfigSnapshotResponse(rsp)
}

// ListDevelopersWithResponse request returning *ListDevelopersResponse
func (c *ClientWithResponses) ListDevelopersWithResponse(ctx context.Context, organizationName Organization, params *ListDevelopersParams, reqEditors ...RequestEditorFn) (*ListDevelopersResponse, error) {
	rsp, err := c.ListDevelopers(ctx, organizationName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDevelopersResponse(rsp)
}

// CreateDeveloperWithBodyWithResponse request with arbitrary body returning *CreateDeveloperResponse
func (c *ClientWithResponses) CreateDeveloperWithBodyWithResponse(ctx context.Context, organizationName Organization, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDeveloperResponse, error) {
	rsp, err := c.CreateDeveloperWithBody(ctx, organizationName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDeveloperResponse(rsp)
}

func (c *ClientWithResponses) CreateDeveloperWithResponse(ctx context.Context, organizationName Organization, body CreateDeveloperJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDeveloperResponse, error) {
	rsp, err := c.CreateDeveloper(ctx, organizationName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDeveloperResponse(rsp)
}

// DeleteDeveloperWithResponse request returning *DeleteDeveloperResponse
func (c *ClientWithResponses) DeleteDeveloperWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, reqEditors ...RequestEditorFn) (*DeleteDeveloperResponse, error) {
	rsp, err := c.DeleteDeveloper(ctx, organizationName, developerUsername, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDeveloperResponse(rsp)
}

// GetDeveloperWithResponse request returning *GetDeveloperResponse
func (c *ClientWithResponses) GetDeveloperWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, reqEditors ...RequestEditorFn) (*GetDeveloperResponse, error) {
	rsp, err := c.GetDeveloper(ctx, organizationName, developerUsername, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeveloperResponse(rsp)
}

// UpdateDeveloperWithBodyWithResponse request with arbitrary body returning *UpdateDeveloperResponse
func (c *ClientWithResponses) UpdateDeveloperWithBodyWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, params *UpdateDeveloperParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDeveloperResponse, error) {
	rsp, err := c.UpdateDeveloperWithBody(ctx, organizationName, developerUsername, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDeveloperResponse(rsp)
}

func (c *ClientWithResponses) UpdateDeveloperWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, params *UpdateDeveloperParams, body UpdateDeveloperJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDeveloperResponse, error) {
	rsp, err := c.UpdateDeveloper(ctx, organizationName, developerUsername, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDeveloperResponse(rsp)
}

// ListDeveloperAppsWithResponse request returning *ListDeveloperAppsResponse
func (c *ClientWithResponses) ListDeveloperAppsWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, params *ListDeveloperAppsParams, reqEditors ...RequestEditorFn) (*ListDeveloperAppsResponse, error) {
	rsp, err := c.ListDeveloperApps(ctx, organizationName, developerUsername, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDeveloperAppsResponse(rsp)
}

// CreateDeveloperAppWithBodyWithResponse request with arbitrary body returning *CreateDeveloperAppResponse
func (c *ClientWithResponses) CreateDeveloperAppWithBodyWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDeveloperAppResponse, error) {
	rsp, err := c.CreateDeveloperAppWithBody(ctx, organizationName, developerUsername, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDeveloperAppResponse(rsp)
}

func (c *ClientWithResponses) CreateDeveloperAppWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, body CreateDeveloperAppJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDeveloperAppResponse, error) {
	rsp, err := c.CreateDeveloperApp(ctx, organizationName, developerUsername, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDeveloperAppResponse(rsp)
}

// DeleteDeveloperAppWithResponse request returning *DeleteDeveloperAppResponse
func (c *ClientWithResponses) DeleteDeveloperAppWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, reqEditors ...RequestEditorFn) (*DeleteDeveloperAppResponse, error) {
	rsp, err := c.DeleteDeveloperApp(ctx, organizationName, developerUsername, appName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDeveloperAppResponse(rsp)
}

// GetDeveloperAppWithResponse request returning *GetDeveloperAppResponse
func (c *ClientWithResponses) GetDeveloperAppWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, params *GetDeveloperAppParams, reqEditors ...RequestEditorFn) (*GetDeveloperAppResponse, error) {
	rsp, err := c.GetDeveloperApp(ctx, organizationName, developerUsername, appName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeveloperAppResponse(rsp)
}

// UpdateDeveloperAppWithBodyWithResponse request with arbitrary body returning *UpdateDeveloperAppResponse
func (c *ClientWithResponses) UpdateDeveloperAppWithBodyWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, params *UpdateDeveloperAppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDeveloperAppResponse, error) {
	rsp, err := c.UpdateDeveloperAppWithBody(ctx, organizationName, developerUsername, appName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDeveloperAppResponse(rsp)
}

func (c *ClientWithResponses) UpdateDeveloperAppWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, params *UpdateDeveloperAppParams, body UpdateDeveloperAppJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDeveloperAppResponse, error) {
	rsp, err := c.UpdateDeveloperApp(ctx, organizationName, developerUsername, appName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDeveloperAppResponse(rsp)
}

// DeleteDeveloperAppAttributeWithResponse request returning *DeleteDeveloperAppAttributeResponse
func (c *ClientWithResponses) DeleteDeveloperAppAttributeWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*DeleteDeveloperAppAttributeResponse, error) {
	rsp, err := c.DeleteDeveloperAppAttribute(ctx, organizationName, developerUsername, appName, attributeName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDeveloperAppAttributeResponse(rsp)
}

// GetDeveloperAppAttributeWithResponse request returning *GetDeveloperAppAttributeResponse
func (c *ClientWithResponses) GetDeveloperAppAttributeWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*GetDeveloperAppAttributeResponse, error) {
	rsp, err := c.GetDeveloperAppAttribute(ctx, organizationName, developerUsername, appName, attributeName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeveloperAppAttributeResponse(rsp)
}

// UpdateDeveloperAppAttributeWithBodyWithResponse request with arbitrary body returning *UpdateDeveloperAppAttributeResponse
func (c *ClientWithResponses) UpdateDeveloperAppAttributeWithBodyWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, attributeName AttributeName, params *UpdateDeveloperAppAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDeveloperAppAttributeResponse, error) {
	rsp, err := c.UpdateDeveloperAppAttributeWithBody(ctx, organizationName, developerUsername, appName, attributeName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDeveloperAppAttributeResponse(rsp)
}

// CreateDeveloperAppAttributeWithBodyWithResponse request with arbitrary body returning *CreateDeveloperAppAttributeResponse
func (c *ClientWithResponses) CreateDeveloperAppAttributeWithBodyWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, attributeName AttributeName, params *CreateDeveloperAppAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDeveloperAppAttributeResponse, error) {
	rsp, err := c.CreateDeveloperAppAttributeWithBody(ctx, organizationName, developerUsername, appName, attributeName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDeveloperAppAttributeResponse(rsp)
}

// ListDeveloperAppCredentialsWithResponse request returning *ListDeveloperAppCredentialsResponse
func (c *ClientWithResponses) ListDeveloperAppCredentialsWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, reqEditors ...RequestEditorFn) (*ListDeveloperAppCredentialsResponse, error) {
	rsp, err := c.ListDeveloperAppCredentials(ctx, organizationName, developerUsername, appName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDeveloperAppCredentialsResponse(rsp)
}

// CreateDeveloperAppCredentialsWithBodyWithResponse request with arbitrary body returning *CreateDeveloperAppCredentialsResponse
func (c *ClientWithResponses) CreateDeveloperAppCredentialsWithBodyWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDeveloperAppCredentialsResponse, error) {
	rsp, err := c.CreateDeveloperAppCredentialsWithBody(ctx, organizationName, developerUsername, appName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDeveloperAppCredentialsResponse(rsp)
}

func (c *ClientWithResponses) CreateDeveloperAppCredentialsWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, body CreateDeveloperAppCredentialsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDeveloperAppCredentialsResponse, error) {
	rsp, err := c.CreateDeveloperAppCredentials(ctx, organizationName, developerUsername, appName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDeveloperAppCredentialsResponse(rsp)
}

// DeleteDeveloperAppCredentialsWithResponse request returning *DeleteDeveloperAppCredentialsResponse
func (c *ClientWithResponses) DeleteDeveloperAppCredentialsWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, consumerKey ConsumerKey, reqEditors ...RequestEditorFn) (*DeleteDeveloperAppCredentialsResponse, error) {
	rsp, err := c.DeleteDeveloperAppCredentials(ctx, organizationName, developerUsername, appName, consumerKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDeveloperAppCredentialsResponse(rsp)
}

// UpdateDeveloperAppCredentialsWithBodyWithResponse request with arbitrary body returning *UpdateDeveloperAppCredentialsResponse
func (c *ClientWithResponses) UpdateDeveloperAppCredentialsWithBodyWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, consumerKey ConsumerKey, params *UpdateDeveloperAppCredentialsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDeveloperAppCredentialsResponse, error) {
	rsp, err := c.UpdateDeveloperAppCredentialsWithBody(ctx, organizationName, developerUsername, appName, consumerKey, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDeveloperAppCredentialsResponse(rsp)
}

func (c *ClientWithResponses) UpdateDeveloperAppCredentialsWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, consumerKey ConsumerKey, params *UpdateDeveloperAppCredentialsParams, body UpdateDeveloperAppCredentialsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDeveloperAppCredentialsResponse, error) {
	rsp, err := c.UpdateDeveloperAppCredentials(ctx, organizationName, developerUsername, appName, consumerKey, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDeveloperAppCredentialsResponse(rsp)
}

// ListDeveloperAppWebHooksWithResponse request returning *ListDeveloperAppWebHooksResponse
func (c *ClientWithResponses) ListDeveloperAppWebHooksWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, reqEditors ...RequestEditorFn) (*ListDeveloperAppWebHooksResponse, error) {
	rsp, err := c.ListDeveloperAppWebHooks(ctx, organizationName, developerUsername, appName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDeveloperAppWebHooksResponse(rsp)
}

// CreateDeveloperAppWebHookWithBodyWithResponse request with arbitrary body returning *CreateDeveloperAppWebHookResponse
func (c *ClientWithResponses) CreateDeveloperAppWebHookWithBodyWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDeveloperAppWebHookResponse, error) {
	rsp, err := c.CreateDeveloperAppWebHookWithBody(ctx, organizationName, developerUsername, appName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDeveloperAppWebHookResponse(rsp)
}

func (c *ClientWithResponses) CreateDeveloperAppWebHookWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, body CreateDeveloperAppWebHookJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDeveloperAppWebHookResponse, error) {
	rsp, err := c.CreateDeveloperAppWebHook(ctx, organizationName, developerUsername, appName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDeveloperAppWebHookResponse(rsp)
}

// DeleteDeveloperAppWebHookWithResponse request returning *DeleteDeveloperAppWebHookResponse
func (c *ClientWithResponses) DeleteDeveloperAppWebHookWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, webhookName WebhookName, reqEditors ...RequestEditorFn) (*DeleteDeveloperAppWebHookResponse, error) {
	rsp, err := c.DeleteDeveloperAppWebHook(ctx, organizationName, developerUsername, appName, webhookName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDeveloperAppWebHookResponse(rsp)
}

// GetDeveloperAppWebHookWithResponse request returning *GetDeveloperAppWebHookResponse
func (c *ClientWithResponses) GetDeveloperAppWebHookWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, webhookName WebhookName, reqEditors ...RequestEditorFn) (*GetDeveloperAppWebHookResponse, error) {
	rsp, err := c.GetDeveloperAppWebHook(ctx, organizationName, developerUsername, appName, webhookName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeveloperAppWebHookResponse(rsp)
}

// UpdateDeveloperAppWebHookWithBodyWithResponse request with arbitrary body returning *UpdateDeveloperAppWebHookResponse
func (c *ClientWithResponses) UpdateDeveloperAppWebHookWithBodyWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, webhookName WebhookName, params *UpdateDeveloperAppWebHookParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDeveloperAppWebHookResponse, error) {
	rsp, err := c.UpdateDeveloperAppWebHookWithBody(ctx, organizationName, developerUsername, appName, webhookName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDeveloperAppWebHookResponse(rsp)
}

func (c *ClientWithResponses) UpdateDeveloperAppWebHookWithResponse(ctx context.Context, organizationName Organization, developerUsername DeveloperUsername, appName AppName, webhookName WebhookName, params *UpdateDeveloperAppWebHookParams, body UpdateDeveloperAppWebHookJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDeveloperAppWebHookResponse, error) {
	rsp, err := c.UpdateDeveloperAppWebHook(ctx, organizationName, developerUsername, appName, webhookName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDeveloperAppWebHookResponse(rsp)
}

// ListEnvironmentsWithResponse request returning *ListEnvironmentsResponse
func (c *ClientWithResponses) ListEnvironmentsWithResponse(ctx context.Context, organizationName Organization, params *ListEnvironmentsParams, reqEditors ...RequestEditorFn) (*ListEnvironmentsResponse, error) {
	rsp, err := c.ListEnvironments(ctx, organizationName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListEnvironmentsResponse(rsp)
}

// CreateEnvironmentWithBodyWithResponse request with arbitrary body returning *CreateEnvironmentResponse
func (c *ClientWithResponses) CreateEnvironmentWithBodyWithResponse(ctx context.Context, organizationName Organization, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error) {
	rsp, err := c.CreateEnvironmentWithBody(ctx, organizationName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEnvironmentResponse(rsp)
}

func (c *ClientWithResponses) CreateEnvironmentWithResponse(ctx context.Context, organizationName Organization, body CreateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error) {
	rsp, err := c.CreateEnvironment(ctx, organizationName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEnvironmentResponse(rsp)
}

// DeleteEnvironmentWithResponse request returning *DeleteEnvironmentResponse
func (c *ClientWithResponses) DeleteEnvironmentWithResponse(ctx context.Context, organizationName Organization, envName EnvName, reqEditors ...RequestEditorFn) (*DeleteEnvironmentResponse, error) {
	rsp, err := c.DeleteEnvironment(ctx, organizationName, envName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEnvironmentResponse(rsp)
}

// GetEnvironmentWithResponse request returning *GetEnvironmentResponse
func (c *ClientWithResponses) GetEnvironmentWithResponse(ctx context.Context, organizationName Organization, envName EnvName, reqEditors ...RequestEditorFn) (*GetEnvironmentResponse, error) {
	rsp, err := c.GetEnvironment(ctx, organizationName, envName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnvironmentResponse(rsp)
}

// UpdateEnvironmentWithBodyWithResponse request with arbitrary body returning *UpdateEnvironmentResponse
func (c *ClientWithResponses) UpdateEnvironmentWithBodyWithResponse(ctx context.Context, organizationName Organization, envName EnvName, params *UpdateEnvironmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEnvironmentResponse, error) {
	rsp, err := c.UpdateEnvironmentWithBody(ctx, organizationName, envName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEnvironmentResponse(rsp)
}

func (c *ClientWithResponses) UpdateEnvironmentWithResponse(ctx context.Context, organizationName Organization, envName EnvName, params *UpdateEnvironmentParams, body UpdateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEnvironmentResponse, error) {
	rsp, err := c.UpdateEnvironment(ctx, organizationName, envName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEnvironmentResponse(rsp)
}

// GetEnvironmentReferencedByAPIProductsWithResponse request returning *GetEnvironmentReferencedByAPIProductsResponse
func (c *ClientWithResponses) GetEnvironmentReferencedByAPIProductsWithResponse(ctx context.Context, organizationName Organization, envName EnvName, reqEditors ...RequestEditorFn) (*GetEnvironmentReferencedByAPIProductsResponse, error) {
	rsp, err := c.GetEnvironmentReferencedByAPIProducts(ctx, organizationName, envName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnvironmentReferencedByAPIProductsResponse(rsp)
}

// ListEventAPIProductsWithResponse request returning *ListEventAPIProductsResponse
func (c *ClientWithResponses) ListEventAPIProductsWithResponse(ctx context.Context, organizationName Organization, params *ListEventAPIProductsParams, reqEditors ...RequestEditorFn) (*ListEventAPIProductsResponse, error) {
	rsp, err := c.ListEventAPIProducts(ctx, organizationName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListEventAPIProductsResponse(rsp)
}

// GetEventAPIProductWithResponse request returning *GetEventAPIProductResponse
func (c *ClientWithResponses) GetEventAPIProductWithResponse(ctx context.Context, organizationName Organization, eventApiProductId EventApiProductId, reqEditors ...RequestEditorFn) (*GetEventAPIProductResponse, error) {
	rsp, err := c.GetEventAPIProduct(ctx, organizationName, eventApiProductId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEventAPIProductResponse(rsp)
}

// GetEventAPIProductAsyncAPIWithResponse request returning *GetEventAPIProductAsyncAPIResponse
func (c *ClientWithResponses) GetEventAPIProductAsyncAPIWithResponse(ctx context.Context, organizationName Organization, eventApiProductId EventApiProductId, params *GetEventAPIProductAsyncAPIParams, reqEditors ...RequestEditorFn) (*GetEventAPIProductAsyncAPIResponse, error) {
	rsp, err := c.GetEventAPIProductAsyncAPI(ctx, organizationName, eventApiProductId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEventAPIProductAsyncAPIResponse(rsp)
}

// ListHistoryWithResponse request returning *ListHistoryResponse
func (c *ClientWithResponses) ListHistoryWithResponse(ctx context.Context, organizationName Organization, params *ListHistoryParams, reqEditors ...RequestEditorFn) (*ListHistoryResponse, error) {
	rsp, err := c.ListHistory(ctx, organizationName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListHistoryResponse(rsp)
}

// GetAllImporterTypesWithResponse request returning *GetAllImporterTypesResponse
func (c *ClientWithResponses) GetAllImporterTypesWithResponse(ctx context.Context, organizationName Organization, reqEditors ...RequestEditorFn) (*GetAllImporterTypesResponse, error) {
	rsp, err := c.GetAllImporterTypes(ctx, organizationName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllImporterTypesResponse(rsp)
}

// GetAllImportersWithResponse request returning *GetAllImportersResponse
func (c *ClientWithResponses) GetAllImportersWithResponse(ctx context.Context, organizationName Organization, reqEditors ...RequestEditorFn) (*GetAllImportersResponse, error) {
	rsp, err := c.GetAllImporters(ctx, organizationName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllImportersResponse(rsp)
}

// CreateImporterJobWithBodyWithResponse request with arbitrary body returning *CreateImporterJobResponse
func (c *ClientWithResponses) CreateImporterJobWithBodyWithResponse(ctx context.Context, organizationName Organization, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateImporterJobResponse, error) {
	rsp, err := c.CreateImporterJobWithBody(ctx, organizationName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateImporterJobResponse(rsp)
}

func (c *ClientWithResponses) CreateImporterJobWithResponse(ctx context.Context, organizationName Organization, body CreateImporterJobJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateImporterJobResponse, error) {
	rsp, err := c.CreateImporterJob(ctx, organizationName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateImporterJobResponse(rsp)
}

// DeleteImporterJobWithResponse request returning *DeleteImporterJobResponse
func (c *ClientWithResponses) DeleteImporterJobWithResponse(ctx context.Context, organizationName Organization, importerJobName ImporterJobName, reqEditors ...RequestEditorFn) (*DeleteImporterJobResponse, error) {
	rsp, err := c.DeleteImporterJob(ctx, organizationName, importerJobName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteImporterJobResponse(rsp)
}

// GetImporterJobWithResponse request returning *GetImporterJobResponse
func (c *ClientWithResponses) GetImporterJobWithResponse(ctx context.Context, organizationName Organization, importerJobName ImporterJobName, reqEditors ...RequestEditorFn) (*GetImporterJobResponse, error) {
	rsp, err := c.GetImporterJob(ctx, organizationName, importerJobName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetImporterJobResponse(rsp)
}

// UpdateImporterJobWithBodyWithResponse request with arbitrary body returning *UpdateImporterJobResponse
func (c *ClientWithResponses) UpdateImporterJobWithBodyWithResponse(ctx context.Context, organizationName Organization, importerJobName ImporterJobName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateImporterJobResponse, error) {
	rsp, err := c.UpdateImporterJobWithBody(ctx, organizationName, importerJobName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateImporterJobResponse(rsp)
}

func (c *ClientWithResponses) UpdateImporterJobWithResponse(ctx context.Context, organizationName Organization, importerJobName ImporterJobName, body UpdateImporterJobJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateImporterJobResponse, error) {
	rsp, err := c.UpdateImporterJob(ctx, organizationName, importerJobName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateImporterJobResponse(rsp)
}

// RunImporterJobWithResponse request returning *RunImporterJobResponse
func (c *ClientWithResponses) RunImporterJobWithResponse(ctx context.Context, organizationName Organization, importerJobName ImporterJobName, reqEditors ...RequestEditorFn) (*RunImporterJobResponse, error) {
	rsp, err := c.RunImporterJob(ctx, organizationName, importerJobName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRunImporterJobResponse(rsp)
}

// ListJobsWithResponse request returning *ListJobsResponse
func (c *ClientWithResponses) ListJobsWithResponse(ctx context.Context, organizationName Organization, params *ListJobsParams, reqEditors ...RequestEditorFn) (*ListJobsResponse, error) {
	rsp, err := c.ListJobs(ctx, organizationName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListJobsResponse(rsp)
}

// ListServicesWithResponse request returning *ListServicesResponse
func (c *ClientWithResponses) ListServicesWithResponse(ctx context.Context, organizationName Organization, params *ListServicesParams, reqEditors ...RequestEditorFn) (*ListServicesResponse, error) {
	rsp, err := c.ListServices(ctx, organizationName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListServicesResponse(rsp)
}

// ListTeamsWithResponse request returning *ListTeamsResponse
func (c *ClientWithResponses) ListTeamsWithResponse(ctx context.Context, organizationName Organization, params *ListTeamsParams, reqEditors ...RequestEditorFn) (*ListTeamsResponse, error) {
	rsp, err := c.ListTeams(ctx, organizationName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListTeamsResponse(rsp)
}

// CreateTeamWithBodyWithResponse request with arbitrary body returning *CreateTeamResponse
func (c *ClientWithResponses) CreateTeamWithBodyWithResponse(ctx context.Context, organizationName Organization, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTeamResponse, error) {
	rsp, err := c.CreateTeamWithBody(ctx, organizationName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTeamResponse(rsp)
}

func (c *ClientWithResponses) CreateTeamWithResponse(ctx context.Context, organizationName Organization, body CreateTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTeamResponse, error) {
	rsp, err := c.CreateTeam(ctx, organizationName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTeamResponse(rsp)
}

// DeleteTeamWithResponse request returning *DeleteTeamResponse
func (c *ClientWithResponses) DeleteTeamWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, reqEditors ...RequestEditorFn) (*DeleteTeamResponse, error) {
	rsp, err := c.DeleteTeam(ctx, organizationName, teamName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTeamResponse(rsp)
}

// GetTeamWithResponse request returning *GetTeamResponse
func (c *ClientWithResponses) GetTeamWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, reqEditors ...RequestEditorFn) (*GetTeamResponse, error) {
	rsp, err := c.GetTeam(ctx, organizationName, teamName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamResponse(rsp)
}

// UpdateTeamWithBodyWithResponse request with arbitrary body returning *UpdateTeamResponse
func (c *ClientWithResponses) UpdateTeamWithBodyWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, params *UpdateTeamParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTeamResponse, error) {
	rsp, err := c.UpdateTeamWithBody(ctx, organizationName, teamName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTeamResponse(rsp)
}

func (c *ClientWithResponses) UpdateTeamWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, params *UpdateTeamParams, body UpdateTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTeamResponse, error) {
	rsp, err := c.UpdateTeam(ctx, organizationName, teamName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTeamResponse(rsp)
}

// ListTeamAppsWithResponse request returning *ListTeamAppsResponse
func (c *ClientWithResponses) ListTeamAppsWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, params *ListTeamAppsParams, reqEditors ...RequestEditorFn) (*ListTeamAppsResponse, error) {
	rsp, err := c.ListTeamApps(ctx, organizationName, teamName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListTeamAppsResponse(rsp)
}

// CreateTeamAppWithBodyWithResponse request with arbitrary body returning *CreateTeamAppResponse
func (c *ClientWithResponses) CreateTeamAppWithBodyWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTeamAppResponse, error) {
	rsp, err := c.CreateTeamAppWithBody(ctx, organizationName, teamName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTeamAppResponse(rsp)
}

func (c *ClientWithResponses) CreateTeamAppWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, body CreateTeamAppJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTeamAppResponse, error) {
	rsp, err := c.CreateTeamApp(ctx, organizationName, teamName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTeamAppResponse(rsp)
}

// DeleteTeamAppWithResponse request returning *DeleteTeamAppResponse
func (c *ClientWithResponses) DeleteTeamAppWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, reqEditors ...RequestEditorFn) (*DeleteTeamAppResponse, error) {
	rsp, err := c.DeleteTeamApp(ctx, organizationName, teamName, appName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTeamAppResponse(rsp)
}

// GetTeamAppWithResponse request returning *GetTeamAppResponse
func (c *ClientWithResponses) GetTeamAppWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, params *GetTeamAppParams, reqEditors ...RequestEditorFn) (*GetTeamAppResponse, error) {
	rsp, err := c.GetTeamApp(ctx, organizationName, teamName, appName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamAppResponse(rsp)
}

// UpdateTeamAppWithBodyWithResponse request with arbitrary body returning *UpdateTeamAppResponse
func (c *ClientWithResponses) UpdateTeamAppWithBodyWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, params *UpdateTeamAppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTeamAppResponse, error) {
	rsp, err := c.UpdateTeamAppWithBody(ctx, organizationName, teamName, appName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTeamAppResponse(rsp)
}

func (c *ClientWithResponses) UpdateTeamAppWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, params *UpdateTeamAppParams, body UpdateTeamAppJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTeamAppResponse, error) {
	rsp, err := c.UpdateTeamApp(ctx, organizationName, teamName, appName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTeamAppResponse(rsp)
}

// DeleteTeamAppAttributeWithResponse request returning *DeleteTeamAppAttributeResponse
func (c *ClientWithResponses) DeleteTeamAppAttributeWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*DeleteTeamAppAttributeResponse, error) {
	rsp, err := c.DeleteTeamAppAttribute(ctx, organizationName, teamName, appName, attributeName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTeamAppAttributeResponse(rsp)
}

// GetTeamAppAttributeWithResponse request returning *GetTeamAppAttributeResponse
func (c *ClientWithResponses) GetTeamAppAttributeWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, attributeName AttributeName, reqEditors ...RequestEditorFn) (*GetTeamAppAttributeResponse, error) {
	rsp, err := c.GetTeamAppAttribute(ctx, organizationName, teamName, appName, attributeName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamAppAttributeResponse(rsp)
}

// UpdateTeamAppAttributeWithBodyWithResponse request with arbitrary body returning *UpdateTeamAppAttributeResponse
func (c *ClientWithResponses) UpdateTeamAppAttributeWithBodyWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, attributeName AttributeName, params *UpdateTeamAppAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTeamAppAttributeResponse, error) {
	rsp, err := c.UpdateTeamAppAttributeWithBody(ctx, organizationName, teamName, appName, attributeName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTeamAppAttributeResponse(rsp)
}

// CreateTeamAppAttributeWithBodyWithResponse request with arbitrary body returning *CreateTeamAppAttributeResponse
func (c *ClientWithResponses) CreateTeamAppAttributeWithBodyWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, attributeName AttributeName, params *CreateTeamAppAttributeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTeamAppAttributeResponse, error) {
	rsp, err := c.CreateTeamAppAttributeWithBody(ctx, organizationName, teamName, appName, attributeName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTeamAppAttributeResponse(rsp)
}

// ListTeamAppCredentialsWithResponse request returning *ListTeamAppCredentialsResponse
func (c *ClientWithResponses) ListTeamAppCredentialsWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, reqEditors ...RequestEditorFn) (*ListTeamAppCredentialsResponse, error) {
	rsp, err := c.ListTeamAppCredentials(ctx, organizationName, teamName, appName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListTeamAppCredentialsResponse(rsp)
}

// CreateTeamAppCredentialsWithBodyWithResponse request with arbitrary body returning *CreateTeamAppCredentialsResponse
func (c *ClientWithResponses) CreateTeamAppCredentialsWithBodyWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTeamAppCredentialsResponse, error) {
	rsp, err := c.CreateTeamAppCredentialsWithBody(ctx, organizationName, teamName, appName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTeamAppCredentialsResponse(rsp)
}

func (c *ClientWithResponses) CreateTeamAppCredentialsWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, body CreateTeamAppCredentialsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTeamAppCredentialsResponse, error) {
	rsp, err := c.CreateTeamAppCredentials(ctx, organizationName, teamName, appName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTeamAppCredentialsResponse(rsp)
}

// DeleteTeamAppCredentialsWithResponse request returning *DeleteTeamAppCredentialsResponse
func (c *ClientWithResponses) DeleteTeamAppCredentialsWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, consumerKey ConsumerKey, reqEditors ...RequestEditorFn) (*DeleteTeamAppCredentialsResponse, error) {
	rsp, err := c.DeleteTeamAppCredentials(ctx, organizationName, teamName, appName, consumerKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTeamAppCredentialsResponse(rsp)
}

// UpdateTeamAppCredentialsWithBodyWithResponse request with arbitrary body returning *UpdateTeamAppCredentialsResponse
func (c *ClientWithResponses) UpdateTeamAppCredentialsWithBodyWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, consumerKey ConsumerKey, params *UpdateTeamAppCredentialsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTeamAppCredentialsResponse, error) {
	rsp, err := c.UpdateTeamAppCredentialsWithBody(ctx, organizationName, teamName, appName, consumerKey, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTeamAppCredentialsResponse(rsp)
}

func (c *ClientWithResponses) UpdateTeamAppCredentialsWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, consumerKey ConsumerKey, params *UpdateTeamAppCredentialsParams, body UpdateTeamAppCredentialsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTeamAppCredentialsResponse, error) {
	rsp, err := c.UpdateTeamAppCredentials(ctx, organizationName, teamName, appName, consumerKey, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTeamAppCredentialsResponse(rsp)
}

// ListTeamAppWebHooksWithResponse request returning *ListTeamAppWebHooksResponse
func (c *ClientWithResponses) ListTeamAppWebHooksWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, reqEditors ...RequestEditorFn) (*ListTeamAppWebHooksResponse, error) {
	rsp, err := c.ListTeamAppWebHooks(ctx, organizationName, teamName, appName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListTeamAppWebHooksResponse(rsp)
}

// CreateTeamAppWebHookWithBodyWithResponse request with arbitrary body returning *CreateTeamAppWebHookResponse
func (c *ClientWithResponses) CreateTeamAppWebHookWithBodyWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTeamAppWebHookResponse, error) {
	rsp, err := c.CreateTeamAppWebHookWithBody(ctx, organizationName, teamName, appName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTeamAppWebHookResponse(rsp)
}

func (c *ClientWithResponses) CreateTeamAppWebHookWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, body CreateTeamAppWebHookJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTeamAppWebHookResponse, error) {
	rsp, err := c.CreateTeamAppWebHook(ctx, organizationName, teamName, appName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTeamAppWebHookResponse(rsp)
}

// DeleteTeamAppWebHookWithResponse request returning *DeleteTeamAppWebHookResponse
func (c *ClientWithResponses) DeleteTeamAppWebHookWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, webhookName WebhookName, reqEditors ...RequestEditorFn) (*DeleteTeamAppWebHookResponse, error) {
	rsp, err := c.DeleteTeamAppWebHook(ctx, organizationName, teamName, appName, webhookName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTeamAppWebHookResponse(rsp)
}

// GetTeamAppWebHookWithResponse request returning *GetTeamAppWebHookResponse
func (c *ClientWithResponses) GetTeamAppWebHookWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, webhookName WebhookName, reqEditors ...RequestEditorFn) (*GetTeamAppWebHookResponse, error) {
	rsp, err := c.GetTeamAppWebHook(ctx, organizationName, teamName, appName, webhookName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamAppWebHookResponse(rsp)
}

// UpdateTeamAppWebHookWithBodyWithResponse request with arbitrary body returning *UpdateTeamAppWebHookResponse
func (c *ClientWithResponses) UpdateTeamAppWebHookWithBodyWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, webhookName WebhookName, params *UpdateTeamAppWebHookParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTeamAppWebHookResponse, error) {
	rsp, err := c.UpdateTeamAppWebHookWithBody(ctx, organizationName, teamName, appName, webhookName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTeamAppWebHookResponse(rsp)
}

func (c *ClientWithResponses) UpdateTeamAppWebHookWithResponse(ctx context.Context, organizationName Organization, teamName TeamName, appName AppName, webhookName WebhookName, params *UpdateTeamAppWebHookParams, body UpdateTeamAppWebHookJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTeamAppWebHookResponse, error) {
	rsp, err := c.UpdateTeamAppWebHook(ctx, organizationName, teamName, appName, webhookName, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTeamAppWebHookResponse(rsp)
}

// GetTokenWithResponse request returning *GetTokenResponse
func (c *ClientWithResponses) GetTokenWithResponse(ctx context.Context, organizationName Organization, reqEditors ...RequestEditorFn) (*GetTokenResponse, error) {
	rsp, err := c.GetToken(ctx, organizationName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTokenResponse(rsp)
}

// UpdateTokenWithBodyWithResponse request with arbitrary body returning *UpdateTokenResponse
func (c *ClientWithResponses) UpdateTokenWithBodyWithResponse(ctx context.Context, organizationName Organization, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTokenResponse, error) {
	rsp, err := c.UpdateTokenWithBody(ctx, organizationName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTokenResponse(rsp)
}

func (c *ClientWithResponses) UpdateTokenWithResponse(ctx context.Context, organizationName Organization, body UpdateTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTokenResponse, error) {
	rsp, err := c.UpdateToken(ctx, organizationName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTokenResponse(rsp)
}

// ParseAboutResponse parses an HTTP response from a AboutWithResponse call
func ParseAboutResponse(rsp *http.Response) (*AboutResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AboutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest About
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseListOrganizationsResponse parses an HTTP response from a ListOrganizationsWithResponse call
func ParseListOrganizationsResponse(rsp *http.Response) (*ListOrganizationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []OrganizationRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseCreateOrganizationResponse parses an HTTP response from a CreateOrganizationWithResponse call
func ParseCreateOrganizationResponse(rsp *http.Response) (*CreateOrganizationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest OrganizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseDeleteOrganizationResponse parses an HTTP response from a DeleteOrganizationWithResponse call
func ParseDeleteOrganizationResponse(rsp *http.Response) (*DeleteOrganizationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetOrganizationResponse parses an HTTP response from a GetOrganizationWithResponse call
func ParseGetOrganizationResponse(rsp *http.Response) (*GetOrganizationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseUpdateOrganizationResponse parses an HTTP response from a UpdateOrganizationWithResponse call
func ParseUpdateOrganizationResponse(rsp *http.Response) (*UpdateOrganizationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseListApiProductsResponse parses an HTTP response from a ListApiProductsWithResponse call
func ParseListApiProductsResponse(rsp *http.Response) (*ListApiProductsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListApiProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []APIProduct
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseCreateApiProductResponse parses an HTTP response from a CreateApiProductWithResponse call
func ParseCreateApiProductResponse(rsp *http.Response) (*CreateApiProductResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateApiProductResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest APIProduct
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseDeleteApiProductResponse parses an HTTP response from a DeleteApiProductWithResponse call
func ParseDeleteApiProductResponse(rsp *http.Response) (*DeleteApiProductResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiProductResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetApiProductResponse parses an HTTP response from a GetApiProductWithResponse call
func ParseGetApiProductResponse(rsp *http.Response) (*GetApiProductResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiProductResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIProduct
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseUpdateApiProductResponse parses an HTTP response from a UpdateApiProductWithResponse call
func ParseUpdateApiProductResponse(rsp *http.Response) (*UpdateApiProductResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateApiProductResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIProduct
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseListApiProductApisResponse parses an HTTP response from a ListApiProductApisWithResponse call
func ParseListApiProductApisResponse(rsp *http.Response) (*ListApiProductApisResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListApiProductApisResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CommonName
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetApiProductApiSpecificationResponse parses an HTTP response from a GetApiProductApiSpecificationWithResponse call
func ParseGetApiProductApiSpecificationResponse(rsp *http.Response) (*GetApiProductApiSpecificationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiProductApiSpecificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest String2MB
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (application/zip) unsupported

	}

	return response, nil
}

// ParseListAppReferencesToAPIProductsResponse parses an HTTP response from a ListAppReferencesToAPIProductsWithResponse call
func ParseListAppReferencesToAPIProductsResponse(rsp *http.Response) (*ListAppReferencesToAPIProductsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAppReferencesToAPIProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommonEntityNameList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseDeleteApiProductAttributeResponse parses an HTTP response from a DeleteApiProductAttributeWithResponse call
func ParseDeleteApiProductAttributeResponse(rsp *http.Response) (*DeleteApiProductAttributeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiProductAttributeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetApiProductAttributeResponse parses an HTTP response from a GetApiProductAttributeWithResponse call
func ParseGetApiProductAttributeResponse(rsp *http.Response) (*GetApiProductAttributeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiProductAttributeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AttributeValue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseUpdateApiProductAttributeResponse parses an HTTP response from a UpdateApiProductAttributeWithResponse call
func ParseUpdateApiProductAttributeResponse(rsp *http.Response) (*UpdateApiProductAttributeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateApiProductAttributeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AttributeValue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseCreateApiProductAttributeResponse parses an HTTP response from a CreateApiProductAttributeWithResponse call
func ParseCreateApiProductAttributeResponse(rsp *http.Response) (*CreateApiProductAttributeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateApiProductAttributeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AttributeValue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseListDerivedApiProductsResponse parses an HTTP response from a ListDerivedApiProductsWithResponse call
func ParseListDerivedApiProductsResponse(rsp *http.Response) (*ListDerivedApiProductsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDerivedApiProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CommonEntityNames
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseCreateDerivedApiProductResponse parses an HTTP response from a CreateDerivedApiProductWithResponse call
func ParseCreateDerivedApiProductResponse(rsp *http.Response) (*CreateDerivedApiProductResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDerivedApiProductResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest APIProduct
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseDeleteApiProductMetaAttributeResponse parses an HTTP response from a DeleteApiProductMetaAttributeWithResponse call
func ParseDeleteApiProductMetaAttributeResponse(rsp *http.Response) (*DeleteApiProductMetaAttributeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiProductMetaAttributeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetApiProductMetaAttributeResponse parses an HTTP response from a GetApiProductMetaAttributeWithResponse call
func ParseGetApiProductMetaAttributeResponse(rsp *http.Response) (*GetApiProductMetaAttributeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiProductMetaAttributeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AttributeValue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseUpdateApiProductMetaAttributeResponse parses an HTTP response from a UpdateApiProductMetaAttributeWithResponse call
func ParseUpdateApiProductMetaAttributeResponse(rsp *http.Response) (*UpdateApiProductMetaAttributeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateApiProductMetaAttributeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AttributeValue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseCreateApiProductMetaAttributeResponse parses an HTTP response from a CreateApiProductMetaAttributeWithResponse call
func ParseCreateApiProductMetaAttributeResponse(rsp *http.Response) (*CreateApiProductMetaAttributeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateApiProductMetaAttributeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AttributeValue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseListApiProductRevisionsResponse parses an HTTP response from a ListApiProductRevisionsWithResponse call
func ParseListApiProductRevisionsResponse(rsp *http.Response) (*ListApiProductRevisionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListApiProductRevisionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SemVer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetApiProductRevisionResponse parses an HTTP response from a GetApiProductRevisionWithResponse call
func ParseGetApiProductRevisionResponse(rsp *http.Response) (*GetApiProductRevisionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiProductRevisionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIProduct
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseListApisResponse parses an HTTP response from a ListApisWithResponse call
func ParseListApisResponse(rsp *http.Response) (*ListApisResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListApisResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseImportApiResponse parses an HTTP response from a ImportApiWithResponse call
func ParseImportApiResponse(rsp *http.Response) (*ImportApiResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ImportApiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			AdditionalProperties map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 201:
		var dest String2MB
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML201 = &dest

	}

	return response, nil
}

// ParseDeleteApiResponse parses an HTTP response from a DeleteApiWithResponse call
func ParseDeleteApiResponse(rsp *http.Response) (*DeleteApiResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetApiResponse parses an HTTP response from a GetApiWithResponse call
func ParseGetApiResponse(rsp *http.Response) (*GetApiResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest String2MB
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (application/zip) unsupported

	}

	return response, nil
}

// ParseUpdateApiResponse parses an HTTP response from a UpdateApiWithResponse call
func ParseUpdateApiResponse(rsp *http.Response) (*UpdateApiResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateApiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest String2MB
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseCreateApiResponse parses an HTTP response from a CreateApiWithResponse call
func ParseCreateApiResponse(rsp *http.Response) (*CreateApiResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateApiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			AdditionalProperties map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 201:
		var dest String2MB
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML201 = &dest

	}

	return response, nil
}

// ParseGetApiReferencedByAPIProductsResponse parses an HTTP response from a GetApiReferencedByAPIProductsWithResponse call
func ParseGetApiReferencedByAPIProductsResponse(rsp *http.Response) (*GetApiReferencedByAPIProductsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiReferencedByAPIProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommonEntityNameList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseDeleteApiAttributeResponse parses an HTTP response from a DeleteApiAttributeWithResponse call
func ParseDeleteApiAttributeResponse(rsp *http.Response) (*DeleteApiAttributeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiAttributeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetApiAttributeResponse parses an HTTP response from a GetApiAttributeWithResponse call
func ParseGetApiAttributeResponse(rsp *http.Response) (*GetApiAttributeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiAttributeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AttributeValue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseUpdateApiAttributeResponse parses an HTTP response from a UpdateApiAttributeWithResponse call
func ParseUpdateApiAttributeResponse(rsp *http.Response) (*UpdateApiAttributeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateApiAttributeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AttributeValue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseCreateApiAttributeResponse parses an HTTP response from a CreateApiAttributeWithResponse call
func ParseCreateApiAttributeResponse(rsp *http.Response) (*CreateApiAttributeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateApiAttributeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AttributeValue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetApiInfoResponse parses an HTTP response from a GetApiInfoWithResponse call
func ParseGetApiInfoResponse(rsp *http.Response) (*GetApiInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseUpdateApiInfoResponse parses an HTTP response from a UpdateApiInfoWithResponse call
func ParseUpdateApiInfoResponse(rsp *http.Response) (*UpdateApiInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateApiInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseDeleteApiMetaAttributeResponse parses an HTTP response from a DeleteApiMetaAttributeWithResponse call
func ParseDeleteApiMetaAttributeResponse(rsp *http.Response) (*DeleteApiMetaAttributeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiMetaAttributeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetApiMetaAttributeResponse parses an HTTP response from a GetApiMetaAttributeWithResponse call
func ParseGetApiMetaAttributeResponse(rsp *http.Response) (*GetApiMetaAttributeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiMetaAttributeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AttributeValue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseUpdateApiMetaAttributeResponse parses an HTTP response from a UpdateApiMetaAttributeWithResponse call
func ParseUpdateApiMetaAttributeResponse(rsp *http.Response) (*UpdateApiMetaAttributeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateApiMetaAttributeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AttributeValue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseCreateApiMetaAttributeResponse parses an HTTP response from a CreateApiMetaAttributeWithResponse call
func ParseCreateApiMetaAttributeResponse(rsp *http.Response) (*CreateApiMetaAttributeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateApiMetaAttributeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AttributeValue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseListApiRevisionsResponse parses an HTTP response from a ListApiRevisionsWithResponse call
func ParseListApiRevisionsResponse(rsp *http.Response) (*ListApiRevisionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListApiRevisionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CommonVersion
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetApiRevisionResponse parses an HTTP response from a GetApiRevisionWithResponse call
func ParseGetApiRevisionResponse(rsp *http.Response) (*GetApiRevisionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiRevisionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest String2MB
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (application/zip) unsupported

	}

	return response, nil
}

// ParseGetApiRevisionAPIProductReferencesResponse parses an HTTP response from a GetApiRevisionAPIProductReferencesWithResponse call
func ParseGetApiRevisionAPIProductReferencesResponse(rsp *http.Response) (*GetApiRevisionAPIProductReferencesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiRevisionAPIProductReferencesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommonEntityNameList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetApiVersionInfoResponse parses an HTTP response from a GetApiVersionInfoWithResponse call
func ParseGetApiVersionInfoResponse(rsp *http.Response) (*GetApiVersionInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiVersionInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseUpdateApiVersionInfoResponse parses an HTTP response from a UpdateApiVersionInfoWithResponse call
func ParseUpdateApiVersionInfoResponse(rsp *http.Response) (*UpdateApiVersionInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateApiVersionInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseListEPApplicationDomainsResponse parses an HTTP response from a ListEPApplicationDomainsWithResponse call
func ParseListEPApplicationDomainsResponse(rsp *http.Response) (*ListEPApplicationDomainsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListEPApplicationDomainsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplicationDomainList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetEPApplicationDomainResponse parses an HTTP response from a GetEPApplicationDomainWithResponse call
func ParseGetEPApplicationDomainResponse(rsp *http.Response) (*GetEPApplicationDomainResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEPApplicationDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplicationDomain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseListAppsResponse parses an HTTP response from a ListAppsWithResponse call
func ParseListAppsResponse(rsp *http.Response) (*ListAppsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAppsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AppListItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetAppResponse parses an HTTP response from a GetAppWithResponse call
func ParseGetAppResponse(rsp *http.Response) (*GetAppResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppResponseGeneric
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseListAppApiSpecificationsResponse parses an HTTP response from a ListAppApiSpecificationsWithResponse call
func ParseListAppApiSpecificationsResponse(rsp *http.Response) (*ListAppApiSpecificationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAppApiSpecificationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CommonName
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetAppApiSpecificationResponse parses an HTTP response from a GetAppApiSpecificationWithResponse call
func ParseGetAppApiSpecificationResponse(rsp *http.Response) (*GetAppApiSpecificationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAppApiSpecificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest String2MB
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (application/zip) unsupported

	}

	return response, nil
}

// ParseGetAppStatusResponse parses an HTTP response from a GetAppStatusWithResponse call
func ParseGetAppStatusResponse(rsp *http.Response) (*GetAppStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAppStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppConnectionStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseListAppConfigSetsResponse parses an HTTP response from a ListAppConfigSetsWithResponse call
func ParseListAppConfigSetsResponse(rsp *http.Response) (*ListAppConfigSetsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAppConfigSetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CommonEntityNameList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetAppConfigSetResponse parses an HTTP response from a GetAppConfigSetWithResponse call
func ParseGetAppConfigSetResponse(rsp *http.Response) (*GetAppConfigSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAppConfigSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppConfigSet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseListAppConfigSetSnapshotsResponse parses an HTTP response from a ListAppConfigSetSnapshotsWithResponse call
func ParseListAppConfigSetSnapshotsResponse(rsp *http.Response) (*ListAppConfigSetSnapshotsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAppConfigSetSnapshotsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []int
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetAppConfigSnapshotResponse parses an HTTP response from a GetAppConfigSnapshotWithResponse call
func ParseGetAppConfigSnapshotResponse(rsp *http.Response) (*GetAppConfigSnapshotResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAppConfigSnapshotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConfigSnapshot
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseListDevelopersResponse parses an HTTP response from a ListDevelopersWithResponse call
func ParseListDevelopersResponse(rsp *http.Response) (*ListDevelopersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDevelopersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Developer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseCreateDeveloperResponse parses an HTTP response from a CreateDeveloperWithResponse call
func ParseCreateDeveloperResponse(rsp *http.Response) (*CreateDeveloperResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDeveloperResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Developer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseDeleteDeveloperResponse parses an HTTP response from a DeleteDeveloperWithResponse call
func ParseDeleteDeveloperResponse(rsp *http.Response) (*DeleteDeveloperResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDeveloperResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetDeveloperResponse parses an HTTP response from a GetDeveloperWithResponse call
func ParseGetDeveloperResponse(rsp *http.Response) (*GetDeveloperResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeveloperResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Developer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseUpdateDeveloperResponse parses an HTTP response from a UpdateDeveloperWithResponse call
func ParseUpdateDeveloperResponse(rsp *http.Response) (*UpdateDeveloperResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDeveloperResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Developer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseListDeveloperAppsResponse parses an HTTP response from a ListDeveloperAppsWithResponse call
func ParseListDeveloperAppsResponse(rsp *http.Response) (*ListDeveloperAppsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDeveloperAppsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AppResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseCreateDeveloperAppResponse parses an HTTP response from a CreateDeveloperAppWithResponse call
func ParseCreateDeveloperAppResponse(rsp *http.Response) (*CreateDeveloperAppResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDeveloperAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AppResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseDeleteDeveloperAppResponse parses an HTTP response from a DeleteDeveloperAppWithResponse call
func ParseDeleteDeveloperAppResponse(rsp *http.Response) (*DeleteDeveloperAppResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDeveloperAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetDeveloperAppResponse parses an HTTP response from a GetDeveloperAppWithResponse call
func ParseGetDeveloperAppResponse(rsp *http.Response) (*GetDeveloperAppResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeveloperAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseUpdateDeveloperAppResponse parses an HTTP response from a UpdateDeveloperAppWithResponse call
func ParseUpdateDeveloperAppResponse(rsp *http.Response) (*UpdateDeveloperAppResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDeveloperAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseDeleteDeveloperAppAttributeResponse parses an HTTP response from a DeleteDeveloperAppAttributeWithResponse call
func ParseDeleteDeveloperAppAttributeResponse(rsp *http.Response) (*DeleteDeveloperAppAttributeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDeveloperAppAttributeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetDeveloperAppAttributeResponse parses an HTTP response from a GetDeveloperAppAttributeWithResponse call
func ParseGetDeveloperAppAttributeResponse(rsp *http.Response) (*GetDeveloperAppAttributeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeveloperAppAttributeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AttributeValue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseUpdateDeveloperAppAttributeResponse parses an HTTP response from a UpdateDeveloperAppAttributeWithResponse call
func ParseUpdateDeveloperAppAttributeResponse(rsp *http.Response) (*UpdateDeveloperAppAttributeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDeveloperAppAttributeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AttributeValue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseCreateDeveloperAppAttributeResponse parses an HTTP response from a CreateDeveloperAppAttributeWithResponse call
func ParseCreateDeveloperAppAttributeResponse(rsp *http.Response) (*CreateDeveloperAppAttributeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDeveloperAppAttributeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AttributeValue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseListDeveloperAppCredentialsResponse parses an HTTP response from a ListDeveloperAppCredentialsWithResponse call
func ParseListDeveloperAppCredentialsResponse(rsp *http.Response) (*ListDeveloperAppCredentialsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDeveloperAppCredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CredentialsArray
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseCreateDeveloperAppCredentialsResponse parses an HTTP response from a CreateDeveloperAppCredentialsWithResponse call
func ParseCreateDeveloperAppCredentialsResponse(rsp *http.Response) (*CreateDeveloperAppCredentialsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDeveloperAppCredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Credentials
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseDeleteDeveloperAppCredentialsResponse parses an HTTP response from a DeleteDeveloperAppCredentialsWithResponse call
func ParseDeleteDeveloperAppCredentialsResponse(rsp *http.Response) (*DeleteDeveloperAppCredentialsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDeveloperAppCredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseUpdateDeveloperAppCredentialsResponse parses an HTTP response from a UpdateDeveloperAppCredentialsWithResponse call
func ParseUpdateDeveloperAppCredentialsResponse(rsp *http.Response) (*UpdateDeveloperAppCredentialsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDeveloperAppCredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Credentials
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseListDeveloperAppWebHooksResponse parses an HTTP response from a ListDeveloperAppWebHooksWithResponse call
func ParseListDeveloperAppWebHooksResponse(rsp *http.Response) (*ListDeveloperAppWebHooksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDeveloperAppWebHooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebHookNameList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseCreateDeveloperAppWebHookResponse parses an HTTP response from a CreateDeveloperAppWebHookWithResponse call
func ParseCreateDeveloperAppWebHookResponse(rsp *http.Response) (*CreateDeveloperAppWebHookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDeveloperAppWebHookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest WebHook
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseDeleteDeveloperAppWebHookResponse parses an HTTP response from a DeleteDeveloperAppWebHookWithResponse call
func ParseDeleteDeveloperAppWebHookResponse(rsp *http.Response) (*DeleteDeveloperAppWebHookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDeveloperAppWebHookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetDeveloperAppWebHookResponse parses an HTTP response from a GetDeveloperAppWebHookWithResponse call
func ParseGetDeveloperAppWebHookResponse(rsp *http.Response) (*GetDeveloperAppWebHookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeveloperAppWebHookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebHook
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseUpdateDeveloperAppWebHookResponse parses an HTTP response from a UpdateDeveloperAppWebHookWithResponse call
func ParseUpdateDeveloperAppWebHookResponse(rsp *http.Response) (*UpdateDeveloperAppWebHookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDeveloperAppWebHookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebHook
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseListEnvironmentsResponse parses an HTTP response from a ListEnvironmentsWithResponse call
func ParseListEnvironmentsResponse(rsp *http.Response) (*ListEnvironmentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListEnvironmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EnvironmentListItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseCreateEnvironmentResponse parses an HTTP response from a CreateEnvironmentWithResponse call
func ParseCreateEnvironmentResponse(rsp *http.Response) (*CreateEnvironmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Environment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseDeleteEnvironmentResponse parses an HTTP response from a DeleteEnvironmentWithResponse call
func ParseDeleteEnvironmentResponse(rsp *http.Response) (*DeleteEnvironmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetEnvironmentResponse parses an HTTP response from a GetEnvironmentWithResponse call
func ParseGetEnvironmentResponse(rsp *http.Response) (*GetEnvironmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnvironmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseUpdateEnvironmentResponse parses an HTTP response from a UpdateEnvironmentWithResponse call
func ParseUpdateEnvironmentResponse(rsp *http.Response) (*UpdateEnvironmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Environment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetEnvironmentReferencedByAPIProductsResponse parses an HTTP response from a GetEnvironmentReferencedByAPIProductsWithResponse call
func ParseGetEnvironmentReferencedByAPIProductsResponse(rsp *http.Response) (*GetEnvironmentReferencedByAPIProductsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEnvironmentReferencedByAPIProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommonEntityNameList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseListEventAPIProductsResponse parses an HTTP response from a ListEventAPIProductsWithResponse call
func ParseListEventAPIProductsResponse(rsp *http.Response) (*ListEventAPIProductsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListEventAPIProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EventAPIProductList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetEventAPIProductResponse parses an HTTP response from a GetEventAPIProductWithResponse call
func ParseGetEventAPIProductResponse(rsp *http.Response) (*GetEventAPIProductResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEventAPIProductResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EventAPIProduct
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetEventAPIProductAsyncAPIResponse parses an HTTP response from a GetEventAPIProductAsyncAPIWithResponse call
func ParseGetEventAPIProductAsyncAPIResponse(rsp *http.Response) (*GetEventAPIProductAsyncAPIResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEventAPIProductAsyncAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest String2MB
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (application/zip) unsupported

	}

	return response, nil
}

// ParseListHistoryResponse parses an HTTP response from a ListHistoryWithResponse call
func ParseListHistoryResponse(rsp *http.Response) (*ListHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []History
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetAllImporterTypesResponse parses an HTTP response from a GetAllImporterTypesWithResponse call
func ParseGetAllImporterTypesResponse(rsp *http.Response) (*GetAllImporterTypesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllImporterTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ImporterInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetAllImportersResponse parses an HTTP response from a GetAllImportersWithResponse call
func ParseGetAllImportersResponse(rsp *http.Response) (*GetAllImportersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllImportersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ImporterConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseCreateImporterJobResponse parses an HTTP response from a CreateImporterJobWithResponse call
func ParseCreateImporterJobResponse(rsp *http.Response) (*CreateImporterJobResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateImporterJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ImporterConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseDeleteImporterJobResponse parses an HTTP response from a DeleteImporterJobWithResponse call
func ParseDeleteImporterJobResponse(rsp *http.Response) (*DeleteImporterJobResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteImporterJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetImporterJobResponse parses an HTTP response from a GetImporterJobWithResponse call
func ParseGetImporterJobResponse(rsp *http.Response) (*GetImporterJobResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetImporterJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImporterConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseUpdateImporterJobResponse parses an HTTP response from a UpdateImporterJobWithResponse call
func ParseUpdateImporterJobResponse(rsp *http.Response) (*UpdateImporterJobResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateImporterJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImporterConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseRunImporterJobResponse parses an HTTP response from a RunImporterJobWithResponse call
func ParseRunImporterJobResponse(rsp *http.Response) (*RunImporterJobResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RunImporterJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseListJobsResponse parses an HTTP response from a ListJobsWithResponse call
func ParseListJobsResponse(rsp *http.Response) (*ListJobsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Job
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseListServicesResponse parses an HTTP response from a ListServicesWithResponse call
func ParseListServicesResponse(rsp *http.Response) (*ListServicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListServicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Service
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseListTeamsResponse parses an HTTP response from a ListTeamsWithResponse call
func ParseListTeamsResponse(rsp *http.Response) (*ListTeamsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListTeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Team
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseCreateTeamResponse parses an HTTP response from a CreateTeamWithResponse call
func ParseCreateTeamResponse(rsp *http.Response) (*CreateTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Team
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseDeleteTeamResponse parses an HTTP response from a DeleteTeamWithResponse call
func ParseDeleteTeamResponse(rsp *http.Response) (*DeleteTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetTeamResponse parses an HTTP response from a GetTeamWithResponse call
func ParseGetTeamResponse(rsp *http.Response) (*GetTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Team
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseUpdateTeamResponse parses an HTTP response from a UpdateTeamWithResponse call
func ParseUpdateTeamResponse(rsp *http.Response) (*UpdateTeamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Team
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseListTeamAppsResponse parses an HTTP response from a ListTeamAppsWithResponse call
func ParseListTeamAppsResponse(rsp *http.Response) (*ListTeamAppsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListTeamAppsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AppResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseCreateTeamAppResponse parses an HTTP response from a CreateTeamAppWithResponse call
func ParseCreateTeamAppResponse(rsp *http.Response) (*CreateTeamAppResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTeamAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AppResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseDeleteTeamAppResponse parses an HTTP response from a DeleteTeamAppWithResponse call
func ParseDeleteTeamAppResponse(rsp *http.Response) (*DeleteTeamAppResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTeamAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetTeamAppResponse parses an HTTP response from a GetTeamAppWithResponse call
func ParseGetTeamAppResponse(rsp *http.Response) (*GetTeamAppResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseUpdateTeamAppResponse parses an HTTP response from a UpdateTeamAppWithResponse call
func ParseUpdateTeamAppResponse(rsp *http.Response) (*UpdateTeamAppResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateTeamAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseDeleteTeamAppAttributeResponse parses an HTTP response from a DeleteTeamAppAttributeWithResponse call
func ParseDeleteTeamAppAttributeResponse(rsp *http.Response) (*DeleteTeamAppAttributeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTeamAppAttributeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetTeamAppAttributeResponse parses an HTTP response from a GetTeamAppAttributeWithResponse call
func ParseGetTeamAppAttributeResponse(rsp *http.Response) (*GetTeamAppAttributeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamAppAttributeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AttributeValue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseUpdateTeamAppAttributeResponse parses an HTTP response from a UpdateTeamAppAttributeWithResponse call
func ParseUpdateTeamAppAttributeResponse(rsp *http.Response) (*UpdateTeamAppAttributeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateTeamAppAttributeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AttributeValue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseCreateTeamAppAttributeResponse parses an HTTP response from a CreateTeamAppAttributeWithResponse call
func ParseCreateTeamAppAttributeResponse(rsp *http.Response) (*CreateTeamAppAttributeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTeamAppAttributeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AttributeValue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseListTeamAppCredentialsResponse parses an HTTP response from a ListTeamAppCredentialsWithResponse call
func ParseListTeamAppCredentialsResponse(rsp *http.Response) (*ListTeamAppCredentialsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListTeamAppCredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CredentialsArray
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseCreateTeamAppCredentialsResponse parses an HTTP response from a CreateTeamAppCredentialsWithResponse call
func ParseCreateTeamAppCredentialsResponse(rsp *http.Response) (*CreateTeamAppCredentialsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTeamAppCredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Credentials
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseDeleteTeamAppCredentialsResponse parses an HTTP response from a DeleteTeamAppCredentialsWithResponse call
func ParseDeleteTeamAppCredentialsResponse(rsp *http.Response) (*DeleteTeamAppCredentialsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTeamAppCredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseUpdateTeamAppCredentialsResponse parses an HTTP response from a UpdateTeamAppCredentialsWithResponse call
func ParseUpdateTeamAppCredentialsResponse(rsp *http.Response) (*UpdateTeamAppCredentialsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateTeamAppCredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Credentials
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseListTeamAppWebHooksResponse parses an HTTP response from a ListTeamAppWebHooksWithResponse call
func ParseListTeamAppWebHooksResponse(rsp *http.Response) (*ListTeamAppWebHooksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListTeamAppWebHooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebHookNameList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseCreateTeamAppWebHookResponse parses an HTTP response from a CreateTeamAppWebHookWithResponse call
func ParseCreateTeamAppWebHookResponse(rsp *http.Response) (*CreateTeamAppWebHookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTeamAppWebHookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest WebHook
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseDeleteTeamAppWebHookResponse parses an HTTP response from a DeleteTeamAppWebHookWithResponse call
func ParseDeleteTeamAppWebHookResponse(rsp *http.Response) (*DeleteTeamAppWebHookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTeamAppWebHookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetTeamAppWebHookResponse parses an HTTP response from a GetTeamAppWebHookWithResponse call
func ParseGetTeamAppWebHookResponse(rsp *http.Response) (*GetTeamAppWebHookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamAppWebHookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebHook
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseUpdateTeamAppWebHookResponse parses an HTTP response from a UpdateTeamAppWebHookWithResponse call
func ParseUpdateTeamAppWebHookResponse(rsp *http.Response) (*UpdateTeamAppWebHookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateTeamAppWebHookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebHook
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	}

	return response, nil
}

// ParseGetTokenResponse parses an HTTP response from a GetTokenWithResponse call
func ParseGetTokenResponse(rsp *http.Response) (*GetTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CloudToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseUpdateTokenResponse parses an HTTP response from a UpdateTokenWithResponse call
func ParseUpdateTokenResponse(rsp *http.Response) (*UpdateTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CloudToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	case rsp.StatusCode == 201:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+z9iW7buroACr8K4f8Aq13bU6YOAQ72cZO0TVeTZsXpsNpkB7RE22wlUhUpJ253gP81",
	"7uvdJ7ngpMmyLXlIk4YHOHs1Fmd+E7/xZ82hfkAJIpzVdn/WAhhCH3EUyr9ggC89zPhln4Y+5OInFzEn",
	"xAHHlNR2a3yIgPoGaB+Ivzonh+AtZhyEiEchQW4diBmgY35hcTMCfcTqgEW+D8MxgMQF6Joj4iJXtwXQ",
	"dbGYCnqyh484dCGHtXoNi+m/Rygc1+o1MVJtt6ZXWa8xZ4h8qJbbh5HHa7s1vYpavYZI5Nd2v6R+0UsQ",
	"3/QCahf1Gh8HYlTGQ0wGtZubujwPNVfRQYgv5hhggM0iA8iHyRrjIeq1EH2PcIjc2i4PI5Re9f+EqF/b",
	"rf3/WsnltNRX1tqjvk/JsRjCLCkIqRs5fMbSsJtaGNDtpy8wM+Cshfrw+i0iAz6s7W48e1av+ZiYv7fr",
	"YmCOQjHFf77Axo9O43O78fyycfHn/9SKTzcofbrBtMUHt79oDztQLPTSpT7E5BK78y8h0H2A6gMwkR8O",
	"RohwcEJDDr2pOyyYr+R2tzbn7LbdeD51o5yHuBdxFN9R0epMo+N5l5A9no7pJ6+5DqDjIMYAZgACFiAH",
	"Qw+MoBchABnAHAzoCAlSots5lPCQeoBTeYoafJsSn6EfeHJpsmmtnrn+9uZ25kQ2p9x/czoAOJT08eCS",
	"IT7rYPKtVoT9ZlgCAzak/DJEI8zkkc5cxUTzWcvRW8aEowEKzbQs8lF4+Q2Np0+VNCkJnpvt9ozbaE67",
	"gBBBji596hZQji7iEiTEV8CHkAOJQIgJWIFA9QWPTt51zwANwcn7s8eABiiUCFaXaIkYN90RENxHgOUI",
	"etiFHLmgF3FAKAcBChlmXDA8SMamgUDxELHI4wzAEMVc0YCq42FEeBOcDRFgKByhEGiWJVd4FWKuF495",
	"H8TcWSyB+phz5E7hhfI40udsuJ7YT61ekyMXczkXjZAnDuEyYigspsjmi6BocftiilUw3HLQ/56hMMYA",
	"REaz8C7+vCBD2KzMEJAg4ZdpLjqfH8g+adZcnh8UTncL7KCPPY7CyY1Jat0fA4Zg6AwBR6EvIVm1j3FB",
	"IJcfeRwHHsq2dSABPQRYJPHUbYKu+nqFPc+IhWYUH3JniMlAYpw+SzXKo3enj5vggDgeZbkJMAHfI8oV",
	"CfCwj3k8HqcgRA7FoZsau/P2rRm0c7z/uPl4mvSpTqSAdKaODfePxLivEXSLTu8kpCOsSQ3icKCZXp+G",
	"AIJAkGsaMfDq4AyICxaUifYBFOunUeggQAmIAleRtM7Z3uvHYrc0dFEo6d2IYhec1zzKuG7HzmtmO0O1",
	"png/h/2GXOu8HfkBDTkKL7/S3ixMnGx3ayhJwwEk+AfkmjPOFi7TrcEjjggk/HH6kHvIo2QgoKUYJdMD",
	"3LI0GsABuiSR3ysCLsFjRAOgGgiIGCDeBEeY7IKNKVAtOhyrAdOrNg9CIRZsbSqpCvuCw2w82XqmhCr9",
	"d71IgpALZfgHKl6mXiHtA8yRIiADJHms3IFZMziC17tgo92esfiumKTk0rX8MWvhDPkjdbgFN68/Lsre",
	"usj/YKahIb90cYicYqAV30HyvXj7otF+qk3RsxgyJ/UkVn+JqYpFA7msPkaeO+WlZhAJAtlKXJxc6sw1",
	"vhRN9YuhEDF2NjaXJAEcQX/ukkWjYpROut8aKnMaYKc7Jhxex9CWO7t0k+LbZX4/dbvqL/8758W3OxIi",
	"7NTHg/m6KHR/0P3FTFeoN6T02yx+kWmyxgfEjRibBZQwJHVeL6B7qnir+Eu8LBHhShkWv7xbX5k6pnI7",
	"PwhDGp7qSdSUWRB8AV2gJ23Wbuq1PUr6HnZucQVmRjn9Sxr2sOsicnvzx1PKBbyCHF3B8Rn2EY1u8RT0",
	"vEBPLNdySAT8QK8rX2dyiNtbkJkcqNmB7CCXdUx5x3FQwGHPQ7e3oGPKQTKvWclLGhH3dhchp5TznwiR",
	"nSg98UuIPXSLKzkJ0Z6cmxKg5q4DD39D3hhA4GMmHxGgh/gVQgQ4URiK95yU7CFxAe43VAste9/Ua+Ki",
	"sYPeEziC2Lvdy9Vzg9Tk8oTPKD2CZKwpFLu9BZ1RCnzxttOvHSaX857AiA9piH/c5lWnZ9XLEG9U8aZx",
	"j5CL4ZlkLLe3nHh2IKcHYv6mktLUIGKOzt7bTkqENHKBixn0PHqVFv303/GnSRGhXuucHB7Kd5zcXWyc",
	"OQlpgEKOBQftQ4+hei1I/fSzVqQCSak/CMd8bHQe+pXFxowjP6PCfQpH7tcdsvnE+Z7T425mpa2NatJW",
	"vUZHKFQasfQxKUkjt2riihtFDOA+gASga8y4VBOcHJqNsCH0PNBDIESBBx2po9NT9ij1ECQ1KUuLfRaJ",
	"9qn9y6e/R6ErppCGMzYmjpgsdXVSS9Q5OTzRdp1C4U7/QntfkcPNXZI+rXiTMMAnGRuhfKDNA2exONNL",
	"zO3D60PVb2vz6ZNn8epgGMJxLW1tmDt0qmWsDHZfjKuqEuOugveX6yxaMg794NC8DwWwBCES8FEE8DHo",
	"SEU0H2ImoQYz4MPwG3IBZCA1QBHQJJ/302OXWW66Q56cLNDfR3wuFTsSbW6MSF/esjEXOVLGZhYgZwYu",
	"1GvvA4E/tbr6pHSpbzH5Vkjg1PiH6yVXT7ar0ic1yZExf09F2SKKJfinMZwLCItNEL2x2s61kTEVxXkk",
	"CJtiXD0PPa4VkA5jL18EbpTecUk0S71U5w+Qfngmz8gvNf2y1KCWph1ZYpA90LS3gFnGxXTy+harh2RZ",
	"MilJchkKqdueSBVtRRq+IHHNEzfNJvUcd5nYlSdWUzjlX2jcifhQoL4T65ErHLk2lE5qnmGAwTc0Vor+",
	"rMG65zQ2NrcaLuo3tneeZElIXiNWmaJ41IGTcqFRMBlqGtsE1IeL9PribxNjl3PikEOmTJo0BK/Pzk70",
	"W0gKPizq+ZjzWPY5OQR/oXHmlD41OieHjb8O/lnp+eQoRXxYdUM0xH1OwfpKGJ/lemWQPpGjqkGgutKf",
	"BcxBivvIBaIFCqVRW0Ijk3cgHSriOVNH/6XWqdVrZ7W6nO6inmx4xj1kJPPmn0XQM3EIPib6h43JE5mt",
	"080sXlGcPha8TzNvKU0LsOpqKSKGK5+6yCuAqXmr5/oVmIP9cTC5nrRmVvWv14gxtRibQz0miBfzoFSD",
	"pmw0BTaNVDQPdHLeOUSinrFNO5QwzDhTSnMPKyukaGFMZAw8en96yB5LJYcTMU79RAQxSzbyhx56hF0U",
	"NtMTMYCIEEHAmEaAU9CLiOshOaaLmXEYGtMoFL2kkSg2KcdOB2AQ0ihggGHxDRJEI+YJEpJjidI76K3o",
	"VeYtoxbYSXVSrniswLVJLA0yRh0sUesK86Fih0VuSl/EKBs1OdhmLY1UK6QiMBDnDb2zQlj1IYmgJ8gx",
	"jDhtgsM+UD/VgRMiF3EMPabM8ZR4Y/HOhQ7HI7k7SnRjYCZJQbn6IjYXcVoofi/87JNuNO/kFuafVqbx",
	"Cp5CLmaBB8fHpV85+6kOyocFh5T4xgl3AvvkzQkkS7VU7rOCkEGSsVk3jSlBYkR6bOmn5EknJe2MJEgD",
	"cgUErgLOZhLq9b4Xg5By6lCvvEriRPfI7mRzZ2fOPoKod2rI3OzLOol6HmbDHGUUhAxpWpbwoZNDcJKQ",
	"gwqXcUYD7JTCelZ64d2oJz710N1YejGbSyNdhnDkdpq7MU2mc0iXBqDZrLOTZRSJ6ByI205rIrC23cjB",
	"JXlUaxGtpuhW9Rzl3nQ5fTBDrpTXpN9P2ofRcm/LvRPuTSz7vmX2HeNYnnn/nrz7znBi4FDfh4Ah8eAS",
	"x2bu4X7x5fuxjSlqs26iKK6gqljCiLMsLVjGUrESE8Tsg6yqTTbnX1K3pDXli+qVH6x+uKe9lCqclbic",
	"y5PTd5/+uTx6t38wy1qIld5ojxKCHE5l8EcYEYLJQCD4SUivx+CIuqgJDok6SRkxAj0PBIpIIFeHEqQo",
	"gXw7pgMMJF8RvN2HHDvQ88Yg9gMRtyFlIU1RHLOYtPijrE+T93Tw4eD47PLk3elZ5+3lh4PT7uG74yU2",
	"nFnzhhB1Mr9sNttAR78YjBQi2WahxJIyJJW3qOlOABPlS6w0w/ExSBcQtfJGPH5to9muTQJPITg5Do0I",
	"x2TwFvt4MVeL+RjQpR500J5HI/ednPrQlesbhogNqeeW599npksBA88TmYioDaWdNneezHLeOD9n5+fd",
	"KVYMZTVZ1Xi5h6YMpDF2GbnwzPEUvhODoLpuFQbBxBNDyIVXBIXgUfwWqkv/ZIC487gJOqY9MwGlcb/U",
	"G6wun1sCpRsDRKRun5km6deA0fOLYTgFEUO1Ir8PTTfm8p0g6KRaL/MugJ7Xg86396FXUhQ4fatdOcze",
	"RD9K0Lt+bffLnBFSnW7qpdt2FGhfrOIhcR3gELFDUiQGMiQNYTIm0ceeh5l0e2T1+PY83EccJ4YPE4Ip",
	"7YuSy8pXXw8BYKDBjTsnT24YBCoeUTNwZQyqg8aGmNvQaCjJHyaYIxXriPkYBCjE1G2Cd8RBYsF17WAQ",
	"YKWMAA4kf3CxAu0FIKTRdDzGk+10PMbzdvvpxvPnmzvbT7fbz59vpIIzGgXRGfVY5XI8PRDeONTmwskF",
	"zCvUyzM4cRaY6Qcbk8iUOr7e2BxTE3yEoWRRDcCGNPJc8O747T8ylg1x6S0mBhENHEoEwxIHIo6/F9Jv",
	"KASKijDgR0weEfYDypCr51eBYA4k8iGYPcEqIX3a7DmFnlYXf69Q7zWl38pzi4+qw1xeUaz1S5OhLJ5P",
	"IcedLN2Kl1iOJmQH2KOCwV/Ppw6pE7qYs0/JWb5HSDcQ4sbEws28lT31gsTcV+FBwyGPyhD5rmqYv6nU",
	"vFPuZE+GoXdRVdEGOqJNH3tzYfSIDT4EpJO0X4IJGbdfScFehTQKSs4+2S9WdVXaxl6mSzzGex1NzaqM",
	"Yjp1jEC2LM/yv3PeRayMN5Zax1Gqw0IU53uEIlSe3qhZ/xadNM3JeA3nBdQQMb6PPDxC4fiEYsKrznSa",
	"H6DMrEx53pef6yBRDWqv/dw0ghFMzMIhL3HYEjllU/EegIP5DwDRppyZJsHIPCpMgnUh6qXOajp1IUnY",
	"ZE6zJKfouG6IWIGyTX0GhycAqiZSfpb+7mnfkI3Np812s93c2N15srG51c6y4FxKkecZFvzo/Nz9uVHf",
	"ujk/b87+5+Nd3Xbn5nEhrzaK1irq1ZBGxOUhDoz7ZW7/8dEBD3JEHOnlSiChWthMH8PmZluG2xlpbXNj",
	"++n2s60n209Tclq7SEyL4TAXfiJ+TgmvZimPDrpnnRdvD7uvD/aFHBUFjzPXkfo86Wc7/SHYaXyeIgVF",
	"AS88HvW7WGFqdZiAgsPZetLeWOBsbuaBdDdmzhXemNo+x4Bi7Wm9BaDEiMB/sNS2mElQYkLiXkghtTbp",
	"VZa1fZRTTAZBmn5pMSIjJ7W3y6mYMyNVVVcuy/oQY3CAyeCkssnjgLhBijfM0pgs4AuBQh9LBjvf9JJq",
	"WuKA7xr0pXpUAb4Uh5gLdctLSGuXcKRsUxaLFn+xLYmnbzHjotcC8UaL652CwFjJjSo4naxIxvsXaYVv",
	"/8qlsk+FnSSMbd+stbGRi3eblV2g2C91kVdd0TWu0jelCaZpPxN1lFV1WlWnVXUWy9CV8Hm9qroiUhGH",
	"L1e0iAQBMF2BMk2BBsDE8SIhRZhnD+iJG5IWwUSekDQgCEAQIiPX3A0i07znVEY+jA9T9s7SAS4TPeeL",
	"vPeVpi3/FipxOJZyWiPRfTMS3TFmtQq7kuFQr8QtY8fyuNXzuAUfb5Y3Wt5oeaPljfeEN949zc/dZ76J",
	"HjrOXiXDVaSfcIAkz5Q5I0f0W2EtDzmKSc21L8soFBgLh5AMjBt62vq3tb3z5OkzOQF03xFvnHN9TWbJ",
	"eLIvNYQx2CWDbLY3Nxobm42tjbPN9u5We3fnafP5ZvtzmUFzbvLJoKljAepcdI78OOBL+Y2Ck6jXjXr/",
	"AtKBVAoHLnUiQaeNP2ymzoI0FU4sA7uLn4vBtKT30Ri8xCHjYHITOQutDi1JGQYn4/hpgB3V+UAwaAeJ",
	"vR3IkLaC7EAvqYy+gJ4HZE9jQEYsTRNT+eBM4Q8VrxGEqI+vjdRGSZqy5nr8v////0eaSvp4EIWykICY",
	"Tn1jmWg0LXlO+mObHAWThk/piiRjPrSN/Bb2riZtlnEkz+UOWgUuFFGkKVQnSy+qhWJMUJtSERlGPv1g",
	"3JyzBy9/jiHFNM6WPVEBp3WgQ1DrgIYgFZma4XwmEKzYYN4s5ngvIMPOUrlxAsjYFQ3dOalDtsqsJjKx",
	"QEuPlQOMeOB6st4iOHmBYIjCM/oNkaUOhYsRskCOxp+GvVcOfoffdN//ONw4xofs0OfB573DJ4f+xvCf",
	"T8d95/Wb0eeXz8ZH+4dXR/tHY9mGnO44os234NOHvTfPm2j8ZuT4Du7jNz96m9fDfzY/BL2t0/bnjy/5",
	"Ib7Cva035MNr7+pzV3T68O7DwYfu+5dv3rxvv8dv9978cD8e4nf48MfnszejfzY3to/OOhuin/Pqw7j3",
	"0fvhbHqjHjkSC33x9/uX5f//k/vi7/ft52Ksfz69CD68eh5+/rjzRm6QeMPe5tUPZ/PzCL1qb4k28NPx",
	"j8OvFL/ffM7++XjsHR4cjxzyYuT4L9vw4/NItvn4sn34lV4ff+38eLff2Tr+8fdG/+/m34cvArxz+f5J",
	"b2OfdK56+703+OXhWTug/ne43Rm/e8v97ruDl09+DOn1X0f+9j+bTz/2Dt9+JtdkeDkI3E8NPuIbz/5x",
	"Iufb9jXbOtt58/Vl//3W99D5cfq6G33dHB24bC/Y//ujO/58dvJh+/jvxo+T69MRHpx9hWee437C5Nmn",
	"q6NXw2fkszv2BqdH3unfX0eUU598+vt60HtPvfZf3sYP/PLl0bj3He1vtL/v7bP3H5+8GTVO/sK9F8db",
	"DtljH69OPn964l5++uf9wR7b6Lz+OmA7wbdG59loa/+1Q0a9T7hzsv3pUxiOn/zgNOh8/OvI2Qk/vKQv",
	"Lj++/Gd7jNshis7++UqedPvtwdPR5+uXuH/6+fPrz/73z/z47/f405Puszb6+9X2t5db/+z/5YU7J/23",
	"+8fBNj7to3Zji40OT65yXD+uBDAlb3un8VkVGWlc/u/Fv87Pm5O//Dv9U/Nfrf8tE7ihcKcIO/eGkBDk",
	"JW4PFfU2ECTOFSqDL8+Ehztq/ElHBfX7oTuRsHz72cLBL5jp7RQkLZ3knTmvkFTMuqwP0iKU476mVaz1",
	"8rR1HrXbW4LeFX3fPzDfL24j50N68YX3WqSDqUBtBxEMIeEIuUfGqaey8uZVwRiFprFSPat6RjuIsSQj",
	"gElKga4dL2J4lE9iaMqhqUBBo8KQfiepsLl0b0JJI/k7kwgu3WxSGxe/7SoHqB+xQTeg1HvP4CC7rx3x",
	"mpisGqL1HkA5ZiHARG8QyX+bJGf6FSN9ZpQqCA1gb8wRA4+OXjxugo7WFNA+aKsMCbIrU6NhMjAClwcZ",
	"j6cKkYPwCLkmv4UQlZmsMwSBM0TON/UijQ9tp72g3qbQodKH12c8SwaePdmePKQQca02CaiHnbG8ebMF",
	"7Yv1PT6ZYrfGlS68OHvb2WSmwEhXb8MsFZOq4Fb8JP3HUrGtgEW9VMbO1PvW67x7+2rr+jr6Z+/DfkA/",
	"edtXf726+tg5fH/68lX0V/6hOKOeRJG2ZTq6p5Jb3AZd0tMV0qR60bCp112ed8zd1O9Mvywd+rV0yOjQ",
	"OQWb22BIo5A1gazqSEEb4L7ppsorKo3CNxRwgInM9Yg58sbrJGFyna9CSCIPhpgXpHmVd2zq2qnyky6A",
	"qt6fh0bIA48oMVQuQDIf0mOZwScTr1/cNrHaDQYhGsA4WSpTSbwUhspkT56XFlU7J4fscT1TbTLh1eJg",
	"CeVxFb50nQBZ2TjF1jO4pL5OYJGW5VQUzqRtJpNzQPoLKwFb71NZKT0vtycpFPLEBqMYAYCcQ2eo1jxb",
	"oVRM2GjknpnH96ycAPnIEhrNj7yXybTkFGkPcJRkBVlohJywnB6urhdWKDRPZMIoygpHRygcYXQVl8eT",
	"/ZvgUBmrpW0sY57u0YinWsZ8W8CTAwMe6exhlA9RqMqEsWZWafWWhsgHOGCRD1zq0RAwzAH0Ea9Loxxy",
	"OOJRCKCLA8wcAfLIw1wQBhdAB3iQhghx4OEeCmkTHEHkIAIZ8KATMRCFBNaBiwdEvCl8wKjnYQfzyMUE",
	"EMwwIMipA1/8zIAgIr1IIEgorVlHMAoxS6+uDpCHcB8RF6AI9HAPETfyAYZO5GFWB0HkjTCByS7AV3GN",
	"TbAXhbCHxU5GiHHci7zIB98jLCg29AX+ByHiOPKb4GXEHAQgIJHnQUAoAS6GPnBhIBcXtzsZQoY8L2Jg",
	"hIbYiTyo1H1iQehaDKm7NMFeCJkcSXcGPuLi92M5BYxk6g2Ce0PZSB3dIIQj7MI6GGEOkTgisXAEPERB",
	"5PEQOxjJIYgDOPIDGgIUUmb+bZY7irwg4pCj5nlON7/dfv6kwht40tg8qZ4OMSKuN45FSkgMaAq6oS3b",
	"ggW/P2R1EJvedD4RcVCKdGt7EIB9HlsblXVkQsoEBF2BQ3om6XcLjDab+SCxeUkqWufnDDZ+NDtS9zE1",
	"jffE/k9jdffvfA5zrUPqXA5kpQZxLEZbnyskJU5CS0py8/JoYk26PiRV76Fa3qxkZlZK1T/Za9nFrjbW",
	"qapd+2Yqvzme+uSbcC2IAbQJ9oYwhA5HIZP5JIUwFTFkshGpk5BZ8QQIOFzaxXZBXLxde1SkuBJmsWFz",
	"0q0h5SWggT0D1j9Fo5vZhvmpJSrPzxsXfz76vy/gv5KqPf73DLwuytFTVJgEMul+0cKMRcnbogedbwBJ",
	"bzHBhaAXDKFM8Y4dsS1znuJtkdkeefZtsN3/+g0+D2f6Rkzb4kxSNVHNI62L3Hiy2d7a2HjybGvn6dNV",
	"Culp5WPGpuKqSO3Wny1EQhpx1BpttLZ3/mw1nu782ZIs1EPbfybK0LLagfR5fJE3/eU/5+etixlH8/70",
	"bXZxQ84DtttqMQkGTSnJtWCAW6N2KyXktVL+Ey3YczY2t1pQJrYPcFOWHcsuu/1sK7PuZ5l1y0n/vSsp",
	"b0tr38/Pm7vtxnMJus1Zt/s+ZX5L9sGpXyUwtxmf3P/N4XsfkuxdyWxbzY3mRkNC+0zwzc0qEPP8vHt+",
	"3pw6pQyMJzBgQ1o5dYV+RxWoV+rmY4cvXhBHD7FIykQYOkM8WnJ6PcZCdbfkuZYL29RpQxZytAqRelam",
	"7iAdd13glxT3SJ9v+royG8+cZLyt4odXkmLhtwEjFIa0QkW4wjSMM21AMFZFFF9G4UlnvWUrWPpSPY3I",
	"UJCjDQbBZEi8ckJV17BK30zJ3Je53QUc95ETIj6/brlsVSz05d2Jl78GmaZ+6mWUg76MQ3RKPC9wKi5S",
	"uVTD2h5kSHuVz2Huo408r26vgjlbZxLrTGKdSRZzJjHIW8ReYh1J1fAfEKisR1Lzkg3SkUqVbEBB8laV",
	"8QBj+T4N0QAzWdVKh/4Q11h/8rE6tVUVAEQ+xF6Gralf6qVLfv2n+ef/Nf8Ut6OE/Cmydh+HjBf48eUL",
	"/WZh4NGXL7tBRBy+e3HxXzPB4yn17+CaJ0h7IlaRpPLKfH3AyYmk1p6aZSZ4rrigiIXe3xx6iwS5BWUf",
	"cSvSGdxNhWtIpa0pGzhpcpd59OZkdd5ZUUY0hpwoRKXXxkNImCmAPqnCjAM3k3ZpzdrZ3kkVlUTMraS8",
	"N00vEYU4K9pB/3uw22r54QbeGTzluP/kx/NhM85W1UxLnLs7T55uztEP7UzRa8lkdY1/XfxZUR4thi6O",
	"+XgfhXiEdAmUivRK9wKcAlcOA6C0Puhqzf2Q+pl67fr3R45HCXrcBEeIw/iJoTwtOAUBZDLnvROFISIc",
	"CHqrdMScStNoiF2lV/boYKAqbsg2DiUcXXOjod5L5cvPIkjVumiLGCAK1BvFfpSlkqkVF5lOV6uZND/8",
	"6hI91zIU8GSVtWmWT9SmM1nmg/+u/aeus+n2IdueqTZdrqatyc+ZLW0dr6jgzOYAzPwEXwpwoOeVCFnO",
	"BP5eTPphyyo44goNhqUjjMXHAkQrSteXE8w9Ly7TalqZAiXIxJnqQwLqgFhZnUOFnH+KA5aB9qOk5RS6",
	"Gp/KIkJgNFUIvIcIP51d6zvWLlq6r9x3xLT7UefksPRNVyAaS5KAjSomuDnwsWC6pjmAYPwCYm33iip/",
	"uJBDBxFuYqdXPuyJLmq4ysEtUpRCit+eUi8hLOx5kDF9r8jtlH4Kd+d0z82wUqTKELmFKxPpUSbNy/sH",
	"HxqvPlb0K5q/3LNxgFZ4DNXErzmylsn5Xu0tjrLSfWXYKwljUzhNGNKwNI/JLVz0PZxMFoC2d548baBn",
	"z3uNjU13qwG3d540tjefPNnZ2d5ut9vtSeZZRWI2lCgHbx0C5IIAdeSz0M0nO9jczkNF9+LRF+lcwC7+",
	"m9LCPJ42q3oSzpKiS9QRy9chrKi4SWe/WBhpK5ZynD2KiftfzPq5LPddsrDaZL6KQ3oGuogwKj3+Z9Ov",
	"7Qr0i0R+D4Xv+vL+s8GeW7OcqpIEADM8qeKCgsU+CPHn5e4qRIy/D703rOxd6Vxcut8/0K+Ww0sQOCny",
	"xfrD5Jr875zPvpwixy+ltmtMV9upKasmG2NJQdUFvSvS4VWpKI65JGwGwEVkRdeey++x2CCpko7zBzAe",
	"ZKIfDnkEPZVqfklZ5Qr1GOao2u0WlR+cmo8kR9wrZSPJM4YyDsqvMeO0ciVfWKAnf398+Alwc3HgaogI",
	"gJGLuYzplH6Nac6acg7daD/d2N7Z3Nnc3qrqC6poosy3ZXQY6fRRUr1Rq9dO3nXPxH/ei//dP3h7cHaQ",
	"jW8yDQsjnBDjL6g7zublq8DE52Tm68rJNo9eqJR8esb3p4fFmdr0dyAaFGD3NCG2OIlYqAW3Pepmudjm",
	"7Gi6nefPU/ex0S7kKRxzL8cb30tKYKLbwHnNBKZtnNeW303Eit/11YN7D/2AhhyFezoh0yLJB2Ir5REM",
	"Mji8GrPnKlz3V10To489rq5gQpmk3LtoH2BXP+ghkan8xDGrBIwwCLyxKREi3eIYgAOICZOvf3StffnZ",
	"mHHkL1wgPwMa+RMwKzIxy+VHXuA+5tTVupgBmIekT5eAx2ULay8rdCtA2b/lqu5FKPCG9qo765bwao6f",
	"xPETYzLRC2EckkT1UegO8BITKYHl/E4FGW3IclZT3AhOI1KlC5m2BoKuq44VIibl0J81SMaaXU6yxHy3",
	"gmfHzwk2P+ninfwEk7S2bCKRZJI9sq8PtLhIf3lJ7Wjma75Qp+4jDrN1kjLBUB91FtoQ8SgkKuCHUV+G",
	"P9EodFASq8cQVxJWALkzlFkDQh2rRwbpMTvZtKwm/hvx5sr8b/QrvljrLNk9JK6UDNOBWlcybJdx4FMX",
	"95UD+JTwv0TIq6h2SPuxK+cB92VI/TJmeWVnP0V9FCKiqjCK1R6Zxd7CZtPzLbJjxrWKq9xeu7L5wg+t",
	"mykokj/I26vlFofMFmppVh/sNzd4NR2pMlvf6n9AYbL82Ufb5fn0JTU3hH1eK0ph4uE+csaOh4CEDmNq",
	"0U4zDeVOI7sLOSxEHoJMBl0CFwUhclRgpfjCBZVsgmPjioMRSyf1+MP0/UPPhNVM+g8GqMrx0ARyF5gj",
	"6Y/zh5zb9EnFa4YGgFI5Bsy8ZgzEZA/po4VVFmmxHTNmdlU9nZHCNYk1CLoyqyOCgiqlhURnShyU7qtt",
	"Z7PX9C7XKQ7ijbc1oCqWUywsve9muhtKb62HwB8uChx9E3+AqyF2hsBHkLDEBSpel0qewrjgKzIXORjS",
	"KzRCodxssnxdlw+z/Ap7yPh4NuXE8bzJ/fQQ8OlIHIHZSu7mZREDPa684fwwmVHUABK4sruDnpfeWG7B",
	"VzHrlMM0wR/izv4wcJoCvSzEq40Cj5IBClNxwc1UZhSDTWZfErHMHuTvco7CdNQTBasXrYx9XNmwuDA7",
	"lymgtGPbvsLojlNGRu/sve3E5RczwxxcOyioVs8xf3J7heMVPWIXqkkw9ZVYVHBZq0VXsKuT3EhF+9Gz",
	"ySjnxe9D59jpoRWsujsxVtG64xmXXPnCpapz2DMTtGcd8+yt5ACu8KlQDpYXfM4vg9/x5Kna2WnX8kdf",
	"2o3nF//9stF4fqH+uSH/83Pz5r+bX9qNbf3r5s6XdmPn4vH5efPxz62bqt0enZ+3Hm19aTc2ZadN/Vn+",
	"7+PiMtnrx/KF4W72CS8ALxNU4nYg5dYIqcSqzO4qZJwtHKM7Jhxez7090Uc3XebCi7cxe2kLgEEB2f1d",
	"ACFLYBcFhSmj3C4wTNvKvOWVB4jMLVa5/kziepngP5UedEVeVtlJNKdDIV/1THleP2fa+qzdzzjriA9p",
	"iH+ofM4hjYJ7IMHDiUVXn1vxsIWXjqannb3TrHvK0dWnyZLZ31AMbCVReS89SFXI8jx6laToNc6te/K9",
	"fjDr/HM9j9jgVIVoVuzVRcSd3+UshIRBhyO3i1Sq99l9lhJrFwZYE8+IKTm4p7BbBJGzL23uDZWAlXo5",
	"QCw84Yp48p6h0Chyb4kELwtVE+u+NyQ0Xb1nQZN2bvcliWg88cL01MwYJ6apoOTIQVo2iYzKC6f/2pg8",
	"MzXE0XfONSLdmnz+S0HFTzasa2C4FcdPBvigvPVOaaQdSWIDboilh2S91oPOtygoVLfKoovV5papqI8K",
	"ssHP9DYzvXRa9PltTxELkMPPuDeTvSxM/IvuII1AU4+4NG5NBmh0Tg4brz42Dt7vdj52dzeqhMD/58//",
	"/HvKA0LNFqcUX7jaQKlqASurMowGqqzeL0VETOavwq8K6n45KF8A9YJMuSZzX4Q21EVqk2pDJzLVVXsL",
	"b02iWHX2LLt108nnK3KLv/MD5F3MCupA5S8tXDNlSM5mAkDyYGtuMXM19TReFZ5ZaRIyeVy/mf5KbipO",
	"R1tBc7Wstik1cenbOEWM76s8ueOTBVLArOSlVkUqM11+vcQjkeCFKuJflWZMHPvfqcFyc288mUc95EoW",
	"IluVpwoR43u6dPrSmz5NDbbQSjKjVSf9CyNc8dxpUSt7Tnlgia9scTzNAMzt4GxAGdeZeM5gOFC5Q2cx",
	"us1pXFqv+3iBPL9y+tcIuiuAv/QZqiFzUJhLAr6xQkXN5GEWnM2C8KD3cjtQMZSTFdXlbc8txK36xhWQ",
	"50R+TCbsWvTwU2vOLqLCgWeI1+0cddZ68ZrzQFowToprLBdEMs4x1MQjppVVS4/4ehqALDNcEcxUH68r",
	"jhmtgHt1ioadJ6IMOQ+OEB9SdwUreJ0MpmjYCWX8I8TcBFwmgVpFYVo04gOKyUA7LGBK9mikpMHZHUPk",
	"U45eU2baFvrNJm6zKmq2OGJAjHSi8+/NmzXZ+SJchIfjfeQpxeDsmOjyNKZe497sZzcPI8aRu3e8Usnp",
	"zGNneuBp4ms+d+TGnHTsE8ebQPKCFLIzBe+SBz+RtJjzoNETJMj8oajzDL/KsliRViNSlUIs4ouOW3jm",
	"t8MEKgJk4TIrEc18Ae6iMYug4l04gERbUU3E2twzmj2KQEsVhlnV7cGE9JXHvMLlZ0wBGwWhg5lK2lWm",
	"OJYddb2KmacQt1zG8SMbxzxrkVIgyKLv3GjmzsnhX2hcsdMLBEMUyvKM+Z4XN/V0ov3FYu7NAHkhYC7w",
	"nqIgRAwRPicAeGrpyEacoz858nzOQ5VsAMhsAzJLsjyIOtA7YOC8NkDcZL1i5zUZlHCuCkKCQBYLAiGC",
	"7nkNpCuq121dAFsX4LepC7CxproA9Xl1t+PCsZIW4RwjKs1H0v0WzBTnBx82OxO0fE4o2WSfJPPXqUzX",
	"Pj/vTDfbXJoCCgPY59PTeYnCqiSTnUGpby7y5DiJCS47ZFf1uLnJbaIbj1Ql75aAI/PEGumC0gW666T+",
	"27zGRcLCSYr8V4tN9jDjKspK5l5UnsuS0cRuq4DTADvM5PYfQgZ0uXZOm+BU12hUdakJAKo5QB6SGk5V",
	"yBt+QwRgwqnoKp6Zk3HIeu6MrfnLzxoNXRS2VDha66fsG44vsXvT+ik/iX+aBGcEeYdubbfmbNbqNcz2",
	"1E8xm04f0pfswC9Pk5qAmQ/7B+bDxY2gGeqjChIsuxz5QaVAMUsquzw90eTy9If88iCR8YitEBKX+i1k",
	"nI1bP00wuVlgan4DuNkFTB1qS8hT0z5ui4VcpHJ0FMPiHAKoVpZAda0I6OcmOYohuBimMoJ7adDaKH13",
	"2fEnrzD7/Vfc5Masm9y8MzdZSPFSyd0qkOM4INyUv/e/B+IQ/O8B0/oH/R/x51ef1UxNiYb6Q6eP07/p",
	"v65Y8q/UP9XforXfV//LUg6RyG2I34vUEQuH4pdizMocvxAz07qQWFE46TWiMmwyOYdRTytd2+bG9tPt",
	"Z1tPtp/OS0qYHeToRZVhkqWsIktMNy6Yt8Ap/YXGOc1LLt33s6r5S83IybJWNnjehzO1h4vCg/E/FGZ8",
	"Ahp2gboIgAlgyB+hEDzqIh8KaRRoiMVk8Bjo1DLpN+tGs93cqGVr3bRVUOH5ufvn4/Pz5sy/H/17t/Ho",
	"0b93U7/9V/yPPoOGjDI0/5bNxQil2z/+8/Hjf8tO/3qU/vIvNVDmJ9m28CpzyR7sQZY8yLnZNrpTnksV",
	"ZOJugBzcx4iBIb0yifeYyVDWPTg6GW2CI0jgQIq4UncjpNyUkgm5dZMWQ3aMVWpNcNgHSlkGMANMT6VS",
	"FUTaCJekAtLVMPRDLFNHgwGTxU8MJEs7QCbX8hcaF6T5CfBfaPyWJieSJA75HiHpYmu4otbA1/WHTMrE",
	"+NukoU3OUFwQPi7rrvMwyIFBAEPoI45CQEPw+uzsBKjRZVp6FvV8zLnJ06E3lgHwT43OyWHjr4N/Zhf9",
	"qpwnWlzk2UR61fgOUyeV/k3dava09G9lwtjkhMW0tlx28OyJqywnMr1KkngK9mjEAYwz6RvwSmsipz7Q",
	"9AdMBm+xjyv4WHWyHUvk4Yeuj8lJSAcmOH1VUYpi3FXXrkglwlosxa0tqpFOjtcPIeNh5PAoXLbGgEed",
	"b1MdoktUpcjWz2BRIG1CMu2PzEJjEumvoRCFWV2X01C7ay9UfLpYwC4IKC6RCCRjlFy2VMZqqzs8+Doa",
	"J9D5BgdoHQuMM43d6YIc9VqchHpxSmxyqq9oRUKeW+p6b6aLA7MgvsJjVblYr5LHvsaDIeiMIPZgD3ta",
	"ib2isY+UZgCorO7gDBFInFVOcIz4FQ2/gW6AVpoewYybxN6sZty/Yz/wFQ2Y4jfryNcwCRz5M0+WMPW6",
	"423XY/DNn/AMOTpjzSpk+aKneKicdP8VS8qh7qVyWJsHF6fAo/QbiAJTo8pJZw4HSHN8Ji0qDgzUrmWi",
	"wP3U8/C8FniQCwZ/XgO4b7IkZjLhpVajjCpiZuSKuV0cIod7YzDCcFKgP9FDiydU0/gPKPeB85rYB5N9",
	"YpEjmcVsRj1EZZ0BoIxUYLPZ1qvT1VUNzREHx5DXb/jygezqg2Hp1Hpms7V6ejGFqtAkS362KC4bEwcG",
	"eFcspNk+J0C+c3bFPwCQGeh3wWvkeRRc0dBzZZJxrQ1QbbR6ZRf80W5uNNt/iF+1op/pYYaiv/43MLax",
	"+G+gTwylfgEggGOPQjfzG5AQtQvUrs5JvkCv/L/FMTaSxrgFazHhu1KGqSue+9JEAJjaUT/yVluKqYib",
	"nsFBQTU6wOEAUJIk76xSpOA/zT//Rw9d8KboIi6VIHBQuoCdWGMZe9cZgn5FLUFS/J32AQQcQT9d9l38",
	"nan4rm3AcSZUVfYduZK+5Sq9SyJlHser8oVctlTBkun609PPSBIubmJdVfofxEUVouowRGxIPbciiVux",
	"UD8qEYewsHzEVbTtaGpoSjpdWUY7qWyMhsOqv6QlsoirfkgMjGlzwUaznS+NtTNrXzoPduExfUS915R+",
	"W9pldRbg6Dmk/rUgADSLW+mvprQoZuAK9YZChJMFvFhdSF+wx4SkY76YJMNx9WToeZn61AuXJJmtATI+",
	"7Mkd63pGcZmjpLxR0SX7urhP0j+AIfQ86X4Si2LJTwyFeIoURm4rbE/faCY0L5WGZSIWz2PvglI+eXrg",
	"s7dd00G8z0M8EdDYzoC49AT49+75eev8vKX9Cs/Pm7uqHNzFn80SOC1mie+zCKfTYDzPQS6urFFis4lx",
	"Yp63Y+bYVY+LZGHJONWReTIUQ45WCGVBuai2Z5My4HT1S3nITWoo5O8vyWQUr3DGNZYMxczJYQTAsId5",
	"CMNxxhIm3y3qpSn4vKGq+aOuEJJZmtFVC9VcjN9VCsuchNKqwm76ZBNynuU55aD49fQgpel3sbG5jsuY",
	"5zK93tsQrU25wuxxiy9S3NSioDIAx1KiEmQ1ky3LQlOTslJvokyHZZdY7EuWZx+pm9iaeBcWkSnFhcqH",
	"uEy7ioV8uvoQe1GIThFkxi0gfUKpv0wtDyMXYQZcekXqqgTGFWYIID/gY63nmP12L67kJytfqQWZINac",
	"HwFWPgSyqo5eOnjEkEOJy1TdDxRQZ/i48MG+rCvanfBnWxrcgsljxcSVXius4I6jQGJIGBGibjV+MWQ8",
	"cFKm1fWJVdMgPyXWzWcJcQ0PvYGcAvhtF1A1lonEktxXW38B9QTzOOn+K63YzD04C+Ilp1iXdTugGgLZ",
	"UjIlcQmnB90zYOJP5SNd8qzeGCDihONAFuUJIWFiYVKPPEIh7o9B7G2j/TscsTbpaoyADpcwVmxVO4Xr",
	"yYzbXxOcDdEY+BHjABPHi1xV18pRy0x78hR1/0OZxlGYnrmZpvGTj5VZr6Gim8/qJXKMPhalxEpb8jUN",
	"AohDBiBj1MGyntEV5kMAidSG6MqkdalIqQMXjZAnrhRQKYJl1r6Au3FueTF/Ed/rJpoCMwCVQxiUdXsi",
	"BCADmIMBHaGQxFEXDiU8pJ4RCfXSmxnPqDiV2iypbVqdq+ZUzW2s+8huSAoJBiDii8muSKrPnToIQjyC",
	"HNXFyQoaGRLo5VMImsLl09Wr8yQZLa9P16PMdzmXLt6Yj1XkurzOzEMoewT7MVmpAx+OU0WJBBL2Iy4Y",
	"lXHp1CelysQzHRlfM0HweiXSF/2mXlNBsmbWnvzrpXEFefPxLDOE/Do5xrsAEWWIpvJfOsZIBtfWWkLC",
	"bTWvkOc1vhF6RVqiEXYbGVtWMmhmCBUmhXVZ0pyqW1mhBH6lvCV1R1UmvwmOKUe7QO49J4kDcwPAR84Q",
	"EsykijMh4ALAPOwgbfVQyFY7OhRHEsmtST6z22oNMB9GvaZD/RaTi2pgyhsC11vGFtWAAW71PNpr+RCT",
	"1tvDvYPj7kGqnvG87dRSfvu1dnNjp7mpC1QTGODabm2r2Zb6tQDyoQSnlnTHE//SmZWyx3cqnUBjBz7M",
	"Ywc+ATzJMWplnjIx5q4s1iDL4JWOnC8p/yxXsdlua691jnQyuMRW1vqqpUIlic719JMTSJDI7uVwwglR",
	"sRNzdjf12rZaR9Hw8XpbL6CrUyipLhvzu7wnJrs7clWnrfmdXtKwh10XEdVje36PY8pf0ojoKZ6U6tBx",
	"HBTIQumy1+bz+b3OKD2CZKwPQb6Bdsoc3KEmtV3Jlw/CUB36TpnD0Ibz9wQqw71a7k6ZU3kFObqCYyHM",
	"K8hI6KrUYhnC9KVGw0FDumfWLm4uTM6LL8pjEzOuIfpCjNCiqahMlsKfLLSLV+m7TMt6LfY4ZlOVaEmT",
	"VgAH6JLhH2iqAi3fOFWxdk5zRkN+2cfIcy91yulyXZSt38S6LoXJlZNi5INt57PRm6J4U8H/sldo0d+i",
	"fzn0VzkJJ5FdlR1IA2stNkK8oO54ZSxuFj5MgntmQTcT+LqxpmWZGuSTCzpGVyC/qO0VSgAStGYt4AV0",
	"TUhNE7zF35A3Fo8wTFSlUoGsQCZP0XVahZj3++F6uwSu71HS97B6rmxv7JTZfuyifoRcDFW+BkFZNm/v",
	"fvcjNTTKkHhL4BaWb1o/039eqvrV8rHgIRUukqWE+/L3CUqYoTvbBapwCgyAWG78YIB1Bp8tlKlfIT4b",
	"stq3ztFkvf1ijmbB9+GCb7WXXhaALqSSRnnvZeFfZXHJoUC1qXD/SIxtXFwu7oGYevtIrc7ZtaLqr6ck",
	"G5vze52E0gIrzSIvIfb0nh44ERKiXIHw1oIBPlFGm9nKq06q3W+muprfo489HtPHdSu5OieH+qSXUmp1",
	"Tg5BfGNWDHl4FCCFsKuQQWZouhLasCY9VxolJiG+k4wLXOpDTBgYwhECULtQEVfnAVRfm2tVfs1e6zG6",
	"SmOmRcx7qk9K3aFyHlBimLLpgxD1UYiIgwBqDprx15SfPjClPR80VSohlLR+wgBfar+SsgqnHEGy6qZF",
	"FMK3g1J7kPzBgbrOegatMAOMY89LsEk/aR42H5+mCpsF8+1b4m7agc0yNyt1rkDqnP8uy7OG+dqyDJbc",
	"RV1ZgmAqZndN8u5tUQSjO7Nk4Rfy2LMhynNWQjmQQmkTvKQh0K6x0hFOy7DGP9SoE02vgXzyhYAPoXbo",
	"jsJQSLS6Q3NZRZ19DdjXQIXXgPhcVnXZEU2t4111neS0aPGSOkkYYAnikyEP0kk/wCZwwPIGKzLeusi4",
	"BN1Rv8daiflvs06AdUZnZ4rFFpNUEmQdRhDn007QNi4akEfueuan68YY+l7uxx84KAgWXpqSzMoVkIt5",
	"uSlcZWnWnCTiyo8ktpYZJk5U2sMEhkXZjyepFRsTR1IlhgLHkiRLkm6bJJXrsyz5CuaJTcGpkVzZGU3e",
	"eVaEqvCKUJLTgUzcFqcnsCKSpUcPQkSK46JbP+N/H1e14cQhytaYc4+MORZNyzwHpoP2CjW0ZhKVP6eI",
	"+cRJAFSQukUcy2LunshrgLSyqSeNZeuz+XB0zVuBB/FKUbMziZq/kFDE5px4VR8swfhlJp34EjIGHWt/",
	"sfaXRYl+VMLH01JTS00tNbXU1FLTdVizXRTikcruOFUzu6/a/MYhObdo1E5Us2wh27ZMOJpW0DKg71Cl",
	"ALXqW/u2vgNOkTPCdybIyZqieBSmqdli0C4IkSnMg6zTFBrUyvkT/qJonv3i1Vj8vudSj4K4MAuBxhHS",
	"SjaLSTY+4nBFFqEjxKG1Clmr0G9qFZoD3tYyZKVXaxlaiWUoj2lWn2n1mVafafWZVp+5qHXIUlRLUS1F",
	"tRTVUtR16VFCNMJsbrGBhCKfxu2tkai6kaiL/A/56q8lLUPxRcXViKwZyD6k758XfwzHrZ8M+SMUlox1",
	"NITn1+WjMStPFbmydhqLgHdXk6XwazaqzuX7DzBBqzhrDzN+qcN9bzGn68wKjOVKpHdODlVYYH1uu27k",
	"+zAcl21+SPpUtb2YnSrWpoh9mPRwpblhc2X2fFUKFhLQkRH1gvtKlyhIALpWhwEYjUIHTVQHVJ07AV5f",
	"Rlk1RWGBQPklTre+tIPJr0mMMDX3LB9CDq4gA9hXKoVbT2Z/qFUCYjUsnQ4j62RhfWISPc9DJEyzhKBc",
	"5pW5niPWS8Qmgv1NuPWMl/fvlE7IpgyysvQDk6Ur5f2Z7+Ry58yvM8XTFA5lMqTd3Mu0ZBPbi7Qpd8Y2",
	"rQz+Owk06QPOJ9N9mDbjB80WZjrPVKbUjux56VMX3TadTpQ58+j0vdSSnA2RptGFW7Q02upJ7qmepFSt",
	"P/WOjBM/ui/G2cSPvzxRYrqunVJlJv5GfIhZzGjsA8w+wNb6ACuNdsvFvNlANxvo9tsoKG1Ym+UXD5Rf",
	"rCWOzYZa2FALG2phQy1sqMViijdLPy39tPTT0k9LP5dTLWLSp3N0ioeiyXpDQeQUU3SGPuIQiGWGfl6Z",
	"b9989s33y5w0NFrc0VrEYnVTCxErlwbAKdCFv0XrOqDEG4NE6Slz+eWxDziQgB4CzhCSAXKbQHAt2RF5",
	"SNDdOGjySPR8p8i18lzGnie6xg4Voapb60HGj6iL+xi5L8ZyVmUllX/Fy1l7NeRpRChKlUJWbX6hNVEs",
	"wDp63Ma5/jJxy4or08WVVeQitEkIrW3mt7LN2LSDVla39pnV2mdsOiyrY7Q6RqtjtDrGxW00loZaGmpp",
	"qKWhloYur/gonTzQZg1cvrTUBxX1tbLkgZZG22fw3XFrT6UF1OGNN3OjSuKEgDZLgc1SYKmJVaqx1sgw",
	"yWUIT6XQNtU7CWuLg93uTXwbMEdgcdji8G+DwyV8yLREbV3JLBZaLJyOhfPtUllEuqPOZ6lFWh8064Nm",
	"lcnWB+1eq2Lj29+nPsRzdLAHJ53JDreni71YJ4HKb2zaW8gkKE9NBVx1FAATpRZljDpYErWDESIcnNCQ",
	"Q8+KZA8P/5C4f3X9jc1me/nM5uUxWTxt4t8uFYheYnemQrQAwWu3iXSFGkIC5CmmSxUx4KI+Jsi1KGdR",
	"bs0oV+ZBVIBns3F1nq0zeIAFU1ZV/aSUNbQTBOKkDznyF7KFpsQAW6fkQQrWwUp0LUVWRsYhj1jGyjgH",
	"lLuqx81smiMlgqQ+wXSdZlCZ+HAaYKc7Jhxer11ON2/OV4igEDtTZAYYBBYvLV6uj+XP903IYFyZMmlB",
	"J8DddE5V6+m0uKfTsXa+q8zaxTtD7I+lXxVXmA+1z5OlK5au3DG6kqs8NIOz5ynM7+T39GuydVufKEtt",
	"7gi1SahH/dd4Y2Ypk37HzCZIXfPYWeeTYY8SokSQ+KU0gXVqtYlrcwAawIn7sTq4Qr0hpd9YPS0XfI9Q",
	"hKwGwOLoL5QIHEr6eNBFfO77Yi9peXuCeN6/sLxyTW3MYtcDxC4fEjiQHi/rs5kleNP6qf59yRAvJUbH",
	"iLR+xqXnsZYxi1N3B6fm860cQi2Ihi1GYMCGtAJr68Y9VsXiNLvChKOB1JSVZmDx6sGj2Lv4sTQbad5m",
	"0dCi4b1Cw+Sb/uXSAHZJlqm7rTesJTNTEeeMS5fFKCqxUpqNLGpa1PwlqFm+Sx73ZqC1i0bIE/g4m4Pu",
	"J82syan6Szc+vqWcSVKXYInPgyM+KUxd+slbrwWUTU1glEDreuJkUthQkF/FfATQcWhEeD5sbamKrQsv",
	"6xhdATeNxRb9bJzFYrg7nxW3fsb/voyY2EupDL9ZvLWpfe9Hat96QlcAZoBx7HlJAL3OrPWgWd20V+MM",
	"eG/fDleAlidYkWwlItn8h8skS5gfNp3GkLsYMR2vb2qwdKcgjm4IRwhA6YQn45Wld7H+ut445ZnEwKSp",
	"tCQhKybaSN57ImHOjzyK4b84BGnF0Qp1q1sqF6qUiJo2VMkKMYs4KtXvhixTRiml4o/Wkr8lCKaIILem",
	"g8ogc7EWKhthcDvv1RfQBfrE61JroPMZJIlpYI9GHPQl7wY96HwDiLjAgZ7HwNUQkdhrEjOgMn0wTMlv",
	"mUTlHqayFhdTOoV15+TQuBOtKoX1bWWcUbQXKOILkOiwAnjOgfMdo+XLCIO5kNCS6kdDoa0G0sodVeWO",
	"ubq++xJ+bOOOLbDfPSG7UkBBWeXiIih5SxkZgyDWLN78OrzvWJHd6iittH/Ppf0HJe4vVWo4zRlsvWFb",
	"b/i+WVDqSfRmmfeIrUBsnxl3GYbv9jNj9UWMp+GmrcJpq3DaKpy2CqetwjmdVUSlDLCWqlqqaqmqpaqW",
	"qpagqqvSyDghchHhGHrlnfT2Un3WGVKdTNOZm7UntSRL5awl7J5Ywkq6puURbvU2rfQMBWhG0FUaxYwN",
	"aK1ea9WWZE1h1hR2L01horE1gT0cE1iKZsm8NizyUXj5DY0rmsBmCmHWCGYFpHsvIJVKTROjTzUNfhZ7",
	"7qKX0RzxZy8r+tzGI6zEMqwEZiUw64xkJbF7IYldod5rSr+V13t9NB3WSG/1HEnm6uk6L5Mb3spzVp77",
	"zRReGgvWpOwyo0/RKmm8Wqtyq/wSrEhlRSorUlmR6l6JVK2fmoItEuaZJv5Wq2WloHVEe06FsfZtsHhB",
	"GCZZvAVbK7zfY2VsmuJXU8YmyHgXFbEz8Hj6S+FWyEj8yb4S7CvBvhLsK+EXvRJSLpqzlakH6Ya/WcmH",
	"eukqxi7qw8jjtd0ai3xf1ec1lY2TX/qR562jYHGp9H+pixL3dsiRv1QawAyEWIn3wUm8mftfc6GJFOyu",
	"SX+cnqEA6FOfby3F35wlHaOrNA5aFLxX4tXhcbE0VQd9GgJ0Df3AQ8DxaOQCpvA3JXLFslgoxAtOHerJ",
	"MJR4Y6A3lkJIZoCmpVJlxJ3WT0RGZZWcecpklZv3pZhGhqTbchqFLH2a2nUm1LfXwQFn3avlgncGqZBF",
	"qrXKyfPfsIZ3zVfXZpH4LqppUyu8J3U/5sjsJoj7wFKsh6dRtSL/fRD5WzDAOqCdzapEnZFNDH97Me6c",
	"HMa911qa2vcpOSAc8/Esv9JUeD4DfAjTens+xMxqEKwS79cIJ1PRcoQI7xTioIuCEDmCgdZ2eRihepE5",
	"QnbPIOFtmSTWmS88t615buTyEAEMsLHFMeCiPibIBVgbahmjDlbCiGx8QkMOPUsDHiANEPevr39pPX5Z",
	"tG79lL9cwgBfahi9xO5NBWwXPDiLFbXbQ8ApSfst3lm8+yV4V4L1FqDb8vjagmxMnE6Al0Lcjhzk5LBc",
	"ocAC87sxtU/gdz3z03VjDH0v9+MPHKzDJg9d9VKF3kko9s+xGEedh37ryWZi61CcX22z2W62a/WaM4SE",
	"IJW7aYg8j4p/BFHPw0zqcnzEGBzI3gEcexS6Mgdebv2SQGHSl7055mK62msxHLiioSeTVJjl1+q1EQqZ",
	"ImPt5kazrQBVDaneq/KXgsMsTUG7cmWbRy8mRhI3kBlG3/BurYeJ8pyY2F2R+60EI+mBxALkCIr7pvvu",
	"GOjRLIW1FPYuUdghZpyG45nOVa91m9/Mr+pW/J3M2S3i4wQjF3MwTEawlONhUQ4fEjhAUiu2ticR9qXi",
	"NjwbB2imqrHjeYeZtreBPmbGQyFC3FSoDux5wOwMiE7iCYRJP3kCOZQQ5HBqy55bxForYpVFqttFqD1K",
	"+ngQhbED4SKYxUCIBphxFFq8sni1Yrya7Ytr4PgN7a3JF3cKphRYVA2fmcCptTnlll7b2RAlfNDJr8+i",
	"53Jm+4eL23OZXuun+eflV9or68eax2rrx3pfXO7SGfity10RM5wmAs6E+bZlGZZlWHGwjHpvgt/M9z29",
	"j0KkpQiWIjxkIbIVRkQZHX8BMSl8kJ5G5JZ4eDdyHMTYLKmsG/V8zBimBBgLrcVRi6Mrx9GvtDc7I8Mb",
	"0eBhZGJgHPKIFbuCeJ44BERcTAa1eq2PCWZD5P6y/AuCQi1ii9wzal2ATYoSAQJA793SGCvcr8GGouNH",
	"ZlOarmlk/ROq0wN9eEvlYDG3BOiEd2mXetBBYE9GA0HHoZFV1dkIj3WRC46gP5tWnMkWllBUJxTi5Jai",
	"EuroLe4/ONxXWLlme7AEz/Xo8BTkF6jFEPRvLQ3TtEUcoyvANWpaxLKv/MpYOZOXtn6K/5S13sY4aM22",
	"98VsyyUNs/baLJ+aZqotBvD22ok8tCTeyk5rtXfEZH6+0VQjwV3M1COWNj1FDwGRTnwjqZ4KKFtvIp5p",
	"CP0+tRCL1r809Y4V+mYJfbIOz1yNSkel9C4RNVtgKpmFP50g6GoDQ1nNywNX03SCIJH+ltDWyHu3lOmh",
	"VpD5RXLHHAVPJwjWpOMRIxen9bs1DU8Gc4sVPVCs0pZksYm/bV2VX11X5a6WVVlMwktVWiyn5jOU2Gr6",
	"rDBRQZiYpVhTIFVN3JApdbtjwuH1ejPfzWHOkOR4swVxKy+vWV6uWiB9nk5vEfy7HbVeJwhird7Nr0Py",
	"zr2Xvm09RFsP0crtv6fc3oKch7gXcSR+Nf8+riTSd0w3K9vfIyv+g7Vj1BXylHhYzADsFYoPZpIP0IuK",
	"nwmmBRipJhZtHjzk3sn3Qom2BpSrvTDSiLi+pwZH17wVeBCvFHs7k9j7C2mJcSFIVvXB0pRfwYrPhih1",
	"CZjJejhS7G4+wGdJOg9M6edJul7bip4n958vRPNMoZaWWlpqaamlpZaWzqali6tUnBC5iHAMvVI+cHup",
	"5uusupZM05nnxpXegaVm1jp1Z61T8z2/8ti1ejtTeoYCnCLoKo1Pxi6zVqewakuyzmHWPnUv7VOi8cO2",
	"S/3GhqkUgWr9dChhkY/Cy29oXN4wNVOysqYpK/XcQ6lnfts0rpTWsGdR5S6688yRafay8sxtPKNKLMOK",
	"VVassm4/Vry6e+LVFeq9pvRbKQ3VR9N2jXRVz3EMfTSvQPgV6g3lcqyQZoW0e6ya0iC/JrWUGX2K/kcj",
	"0VrVUOWXYOUkKydZOcnKSXdXTmr91OSqYrxjmshb/ZMVbVYX9jgVstq3wcAF2k8ycAusVg6/V8rSNFEv",
	"rSxNMO8uKkpTSHvza2hD/MkK9lawt4K9Fex/gWBPvyEyq4T6mWywTkORRyNXzSLXP8Uh2ofXbxEZ8GFt",
	"d+PJ1rPtes3HJP5F8iNxp7Xd2n++dBqfYeNHu/G8cfm/F/86P29O/vLv9E/Nf7X+9+LP/6lNFg2agBxH",
	"ltpQp2bFOVuVZ7mM+0VBCFqCitFuDRbiVWBcu31rOJepcnNmUG99ToH3iiCdDRGwRMkWKlhNOcKbeo0h",
	"JwoxH0uK9i5Akip9uRBvxBeQYacTCQDXPyAYojD+5UL0FhtT5DAKvdpurTXakMROT5jX5Z2iIERMrBd0",
	"2Jg4UqhkAXJwX6MvawIB5NnfgB8xDnoIiP16GBIOXOpEsgISwAS86b47FoLsP0dvgZLlkiy5MMBMvnkn",
	"MlinBVqHEoYZZzJdKzA2VdEiRIxGoYMYePT+9JA9BlAIhBHj1Ac+4tCFHMr3FQ6FyDiWEqIeeoRdFDbT",
	"EzGAiLhMMKYR4BT0IuJ6SI7pYmaCdcY0CkUvJpr4kcdx4CHgohHyBPsAg5BGAQMMi2+QIBoxb5zZsg51",
	"Kdr5vhlGH2uIBphxuc4+R6FY/xjAEMUfkFtP5mbxz6IhDmVy2zpwhpQyZPbO1CBX4qI4BRFDdbnFEDkI",
	"j1SziODvkTqptCP4I+OoBb6hMZO9GHJCxNljQBBykSB9AMrarXKqZrLvZJEF25Ylk4ADiYAjhjiIAglq",
	"oY6NEiAgyIq4d5nT3Ed+D4VsiAPgRGGICPfG5oycEEnIrMvtm1Hlr8gVIAhUmQF9MJgM5h2NGlG3W8PZ",
	"cF0xKn8sR5IigHjk9HxyH+plEUNWMAWZ0qFSGvIZgCCMCMc+AugaOZF8YUmufc3l4HKN4AA6w0x/zNJl",
	"764wHwIYUwSgKaPA+xIF8prgbBxgB3rpGZiEbxeN6oBxOEB1iZ6g2UwdWKbK2tRzS0t5AqrEFbI6gJGL",
	"ORhixmk6Y3eK/E4dkSMCBT2n4YA1wakiLAxA18fE3K0nAD21VvlRkI9EdZgd+8TcSIig26DEG5uhOJWn",
	"qI/uYCTO/4SGHHpgs9kGExchj1wfbeqwRD/VrbHZbK9qBZUnr91c3Px/AQAA//+DCGBryjcDAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
